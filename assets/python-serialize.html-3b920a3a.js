import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-a3d23ff5.js";const p={},e=t(`<h1 id="_7-2-序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#_7-2-序列化和反序列化" aria-hidden="true">#</a> 7.2 序列化和反序列化</h1><h2 id="csv" tabindex="-1"><a class="header-anchor" href="#csv" aria-hidden="true">#</a> csv</h2><h3 id="csv-文件简介" tabindex="-1"><a class="header-anchor" href="#csv-文件简介" aria-hidden="true">#</a> csv 文件简介</h3><p>参看 RFC 4180 http://www.ietf.org/rfc/rfc4180.txt</p><p>逗号分隔值Comma-Separated Values。 CSV 是一个被行分隔符、列分隔符划分成行和列的文本文件。 CSV 不指定字符编码。</p><p>行分隔符为\\r\\n，最后一行可以没有换行符 列分隔符常为逗号或者制表符。 每一行称为一条记录record</p><p>字段可以使用双引号括起来，也可以不使用。如果字段中出现了双引号、逗号、换行符必须使用双引号 括起来。如果字段的值是双引号，使用两个双引号表示一个转义。</p><p>表头可选，和字段列对齐就行了。</p><h3 id="csv-模块" tabindex="-1"><a class="header-anchor" href="#csv-模块" aria-hidden="true">#</a> csv 模块</h3><p><code>reader(csvfile, dialect=&#39;excel&#39;, **fmtparams)</code> 返回reader对象，是一个行<strong>迭代器</strong>。</p><p>默认使用excel方言，如下：</p><ul><li>delimiter 列分隔符,逗号</li><li>lineterminator 行分隔符\\r\\n</li><li>quotechar 字段的引用符号，缺省为 &quot; 双引号</li><li>双引号的处理 <ul><li>doublequote 双引号的处理，默认为True。如果碰到数据中有双引号，而quotechar也是双引号，True则使用2个双引号表示，False表示使用转义字符将作为双引号的前缀</li><li>escapechar 一个转义字符，默认为None</li><li>writer = csv.writer(f, doublequote=False, escapechar=&#39;@&#39;) 遇到双引号，则必须提供转义字符</li></ul></li><li>quoting 指定双引号的规则 <ul><li>QUOTE_ALL 所有字段</li><li>QUOTE_MINIMAL特殊字符字段，Excel方言使用该规则</li><li>QUOTE_NONNUMERIC非数字字段</li><li>QUOTE_NONE都不使用引号。</li></ul></li></ul><p><code>writer(csvfile, dialect=&#39;excel&#39;, **fmtparams)</code> 返回DictWriter的实例。 主要方法有writerow、writerows。</p><p><code>writerow(iterable)</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> csv
rows <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;comment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&#39;jerry&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;justin&#39;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">&#39;just\\t&quot;in&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&quot;abcdefgh&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>

<span class="token comment"># newline=&#39;&#39;，表示写入时，不要做\\n的替换，那么输出就是\\r\\n</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;o:/test.csv&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w+&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    
<span class="token comment"># newline=&#39;&#39;，表示读取时，也不做\\n的替换</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;o:/test.csv&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token comment"># 行迭代器</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> reader<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ini-文件处理" tabindex="-1"><a class="header-anchor" href="#ini-文件处理" aria-hidden="true">#</a> ini 文件处理</h2><p>略</p><h2 id="序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#序列化和反序列化" aria-hidden="true">#</a> 序列化和反序列化</h2><h3 id="为什么要序列化" tabindex="-1"><a class="header-anchor" href="#为什么要序列化" aria-hidden="true">#</a> 为什么要序列化</h3><p>内存中的字典、列表、集合以及各种对象，如何保存到一个文件中？</p><p>如果是自己定义的类的实例，如何保存到一个文件中？</p><p>如何从文件中读取数据，并让它们在内存中再次恢复成自己对应的类的实例？</p><p>要设计一套协议，按照某种规则，把内存中数据保存到文件中。文件是一个字节序列，所以必须把数据转换成字节序列，输出到文件。这就是序列化。</p><p>反之，从文件的字节序列恢复到内存并且还是原来的类型，就是反序列化。</p><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><p>serialization 序列化 将内存中对象存储下来，把它变成一个个字节。-&gt; 二进制</p><p>deserialization 反序列化 将文件的一个个字节恢复成内存中对象。&lt;- 二进制</p><p>序列化保存到文件就是持久化。 可以将数据序列化后持久化，或者网络传输；也可以将从文件中或者网络接收到的字节序列反序列化。</p><p>Python 提供了pickle 库。</p><h3 id="pickle" tabindex="-1"><a class="header-anchor" href="#pickle" aria-hidden="true">#</a> pickle</h3><p>Python中的序列化、反序列化模块。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>dumps</td><td>对象序列化为bytes对象</td></tr><tr><td>dump</td><td>对象序列化到文件对象，就是存入文件</td></tr><tr><td>loads</td><td>从bytes对象反序列化</td></tr><tr><td>load</td><td>对象反序列化，从文件读取数据</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pickle

filename <span class="token operator">=</span> <span class="token string">&#39;o:/ser&#39;</span>

<span class="token comment"># 序列化后看到什么</span>
i <span class="token operator">=</span> <span class="token number">99</span>
c <span class="token operator">=</span> <span class="token string">&#39;c&#39;</span>
l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span><span class="token number">127</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span>

<span class="token comment"># 序列化</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>i<span class="token punctuation">,</span> f<span class="token punctuation">)</span>
    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>c<span class="token punctuation">,</span> f<span class="token punctuation">)</span>
    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>l<span class="token punctuation">,</span> f<span class="token punctuation">)</span>
    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>d<span class="token punctuation">,</span> f<span class="token punctuation">)</span>

<span class="token comment"># 反序列化</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="序列化应用" tabindex="-1"><a class="header-anchor" href="#序列化应用" aria-hidden="true">#</a> 序列化应用</h3><p>一般来说，本地序列化的情况，应用较少。大多数场景都应用在网络传输中。 将数据序列化后通过网络传输到远程节点，远程服务器上的服务将接收到的数据反序列化后，就可以使用了。 但是，要注意一点，远程接收端，反序列化时必须有对应的数据类型，否则就会报错。尤其是自定义 类，必须远程得有一致的定义。</p><p>现在，大多数项目，都不是单机的，也不是单服务的，需要多个程序之间配合。需要通过网络将数据传送到其他节点上去，这就需要大量的序列化、反序列化过程。</p><p>但是，问题是，Python程序之间可以都用pickle解决序列化、反序列化，如果是跨平台、跨语言、跨协议pickle就不太适合了，就需要公共的协议。例如XML、Json、Protocol Buffer、msgpack等。</p><p>不同的协议，效率不同、学习曲线不同，适用不同场景，要根据不同的情况分析选型。</p><h2 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> Json</h2><p>SON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript 1999年ES3 的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。 http://json.org/ https://www.json.org/json-zh.html</p><h3 id="json的数据类型" tabindex="-1"><a class="header-anchor" href="#json的数据类型" aria-hidden="true">#</a> Json的数据类型</h3><p><strong>值</strong></p><p>双引号引起来的字符串、数值、true和false、null、对象、数组，这些都是值</p><p><strong>字符串</strong></p><p>由双引号包围起来的任意字符的组合，可以有转义字符。</p><p><strong>数值</strong> 有正负，有整数、浮点数。</p><p><strong>对象</strong> 无序的键值对的集合 格式: {key1:value1, ... ,keyn:valulen} key必须是一个字符串，需要双引号包围这个字符串。 value可以是任意合法的值。</p><p><strong>数组</strong></p><p>有序的值的集合 格式：[val1,...,valn]</p><p>实例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
  &quot;person&quot;: [
    {
      &quot;name&quot;: &quot;tom&quot;,
      &quot;age&quot;: 18
    },
    {
      &quot;name&quot;: &quot;jerry&quot;,
      &quot;age&quot;: 16
    }
  ],
  &quot;total&quot;: 2
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json-模块" tabindex="-1"><a class="header-anchor" href="#json-模块" aria-hidden="true">#</a> json 模块</h3><p><strong>python 与json</strong></p><p>Python支持少量内建数据类型到Json类型的转换。</p><table><thead><tr><th>Python 类型</th><th>Json 类型</th></tr></thead><tbody><tr><td>True</td><td>true</td></tr><tr><td>False</td><td>false</td></tr><tr><td>None</td><td>null</td></tr><tr><td>str</td><td>string</td></tr><tr><td>int</td><td>integer</td></tr><tr><td>float</td><td>float</td></tr><tr><td>list</td><td>array</td></tr><tr><td>dict</td><td>object</td></tr></tbody></table><p><strong>常用方法</strong></p><table><thead><tr><th>Python 类型</th><th>Json 类型</th></tr></thead><tbody><tr><td>dumps</td><td>json 编码</td></tr><tr><td>dump</td><td>json 编码并存入文件</td></tr><tr><td>loads</td><td>json 解码</td></tr><tr><td>load</td><td>json 解码，从文件读取数据</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> json

d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;interest&#39;</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">&#39;music&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;movie&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
j <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 请注意引号、括号的变化，注意数据类型的变化</span>

d1 <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>j<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般 json 编码的数据很少落地，数据都是通过网络传输。传输的时候，要考虑压缩它。</p><p>本质上来说它就是个文本，就是个字符串。</p><p>json 很简单，几乎编程语言都支持 json，所以应用范围十分广泛。</p>`,61),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","python-serialize.html.vue"]]);export{d as default};
