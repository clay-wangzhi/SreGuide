const e=JSON.parse(`{"key":"v-8d2e7446","path":"/code/shell/part2/08_2_numerical_constants.html","title":"8.2 数字常量","lang":"zh-CN","frontmatter":{"author":"LinuxStory","category":"Linux","tag":["Bash"],"description":"8.2 数字常量 通常情况下，shell脚本会把数字以十进制整数看待(base 10)，除非数字加了特殊的前缀或标记。 带前缀0的数字是八进制数(base 8)；带前缀0x的数字是十六进制数(base 16)。 内嵌 # 的数字会以 BASE#NUMBER 的方式进行求值（不能超出当前shell支持整数的范围）。 样例 8-4. 数字常量的表示 #!/bin/bash # numbers.sh: 不同进制数的表示 # 十进制数: 默认 let \\"dec = 32\\" echo \\"decimal number = $dec\\" # 32 # 一切正常。 # 八进制数: 带前导'0'的数 let \\"oct = 032\\" echo \\"octal number = $oct\\" # 26 # 结果以 十进制 打印输出了。 # ------ ------ ----------- # 十六进制数: 带前导'0x'或'0X'的数 let \\"hex = 0x32\\" echo \\"hexadecimal number = $hex\\" # 50 echo $((0x9abc)) # 39612 # ^^ ^^ 双圆括号进行表达式求值 # 结果以十进制打印输出。 # 其他进制数: BASE#NUMBER # BASE 范围: 2 - 64 # NUMBER 必须以 BASE 规定的正确形式书写，如下: let \\"bin = 2#111100111001101\\" echo \\"binary number = $bin\\" # 31181 let \\"b32 = 32#77\\" echo \\"base-32 number = $b32\\" # 231 let \\"b64 = 64#@_\\" echo \\"base-64 number = $b64\\" # 4031 # 这种表示法只对进制范围(2 - 64)内的 ASCII 字符有效。 # 10 数字 + 26 小写字母 + 26 大写字母 + @ + _ echo echo $((36#zz)) $((2#10101010)) $((16#AF16)) $((53#1aA)) # 1295 170 44822 3375 # 重要提醒: # --------- # 使用超出进制范围以外的符号会报错。 let \\"bad_oct = 081\\" # (可能的) 报错信息: # bad_oct = 081: value too great for base (error token is \\"081\\") # Octal numbers use only digits in the range 0 - 7. exit $? # 退出码 = 1 (错误) # 感谢 Rich Bartell 和 Stephane Chazelas 的说明。","head":[["meta",{"property":"og:url","content":"https://clay-wangzhi.com/code/shell/part2/08_2_numerical_constants.html"}],["meta",{"property":"og:site_name","content":"SRE运维进阶之路"}],["meta",{"property":"og:title","content":"8.2 数字常量"}],["meta",{"property":"og:description","content":"8.2 数字常量 通常情况下，shell脚本会把数字以十进制整数看待(base 10)，除非数字加了特殊的前缀或标记。 带前缀0的数字是八进制数(base 8)；带前缀0x的数字是十六进制数(base 16)。 内嵌 # 的数字会以 BASE#NUMBER 的方式进行求值（不能超出当前shell支持整数的范围）。 样例 8-4. 数字常量的表示 #!/bin/bash # numbers.sh: 不同进制数的表示 # 十进制数: 默认 let \\"dec = 32\\" echo \\"decimal number = $dec\\" # 32 # 一切正常。 # 八进制数: 带前导'0'的数 let \\"oct = 032\\" echo \\"octal number = $oct\\" # 26 # 结果以 十进制 打印输出了。 # ------ ------ ----------- # 十六进制数: 带前导'0x'或'0X'的数 let \\"hex = 0x32\\" echo \\"hexadecimal number = $hex\\" # 50 echo $((0x9abc)) # 39612 # ^^ ^^ 双圆括号进行表达式求值 # 结果以十进制打印输出。 # 其他进制数: BASE#NUMBER # BASE 范围: 2 - 64 # NUMBER 必须以 BASE 规定的正确形式书写，如下: let \\"bin = 2#111100111001101\\" echo \\"binary number = $bin\\" # 31181 let \\"b32 = 32#77\\" echo \\"base-32 number = $b32\\" # 231 let \\"b64 = 64#@_\\" echo \\"base-64 number = $b64\\" # 4031 # 这种表示法只对进制范围(2 - 64)内的 ASCII 字符有效。 # 10 数字 + 26 小写字母 + 26 大写字母 + @ + _ echo echo $((36#zz)) $((2#10101010)) $((16#AF16)) $((53#1aA)) # 1295 170 44822 3375 # 重要提醒: # --------- # 使用超出进制范围以外的符号会报错。 let \\"bad_oct = 081\\" # (可能的) 报错信息: # bad_oct = 081: value too great for base (error token is \\"081\\") # Octal numbers use only digits in the range 0 - 7. exit $? # 退出码 = 1 (错误) # 感谢 Rich Bartell 和 Stephane Chazelas 的说明。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-19T13:08:31.000Z"}],["meta",{"property":"article:author","content":"LinuxStory"}],["meta",{"property":"article:tag","content":"Bash"}],["meta",{"property":"article:modified_time","content":"2023-04-19T13:08:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8.2 数字常量\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-19T13:08:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LinuxStory\\"}]}"]]},"headers":[],"git":{"createdTime":1681909711000,"updatedTime":1681909711000,"contributors":[{"name":"clay-wangzhi","email":"clay.wangzhi@gmail.com","commits":1}]},"readingTime":{"minutes":1.31,"words":393},"filePathRelative":"code/shell/part2/08_2_numerical_constants.md","localizedDate":"2023年4月19日","excerpt":"<h1> 8.2 数字常量</h1>\\n<p>通常情况下，shell脚本会把数字以十进制整数看待(base 10)，除非数字加了特殊的前缀或标记。\\n带前缀0的数字是八进制数(base 8)；带前缀0x的数字是十六进制数(base 16)。\\n内嵌 # 的数字会以 BASE#NUMBER 的方式进行求值（不能超出当前shell支持整数的范围）。</p>\\n<p><strong>样例 8-4. 数字常量的表示</strong></p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>#!/bin/bash\\n# numbers.sh: 不同进制数的表示\\n\\n# 十进制数: 默认\\nlet \\"dec = 32\\"\\necho \\"decimal number = $dec\\"             # 32\\n# 一切正常。\\n\\n\\n# 八进制数: 带前导'0'的数\\nlet \\"oct = 032\\"\\necho \\"octal number = $oct\\"               # 26\\n# 结果以 十进制 打印输出了。\\n# ------ ------ -----------\\n\\n\\n# 十六进制数: 带前导'0x'或'0X'的数\\nlet \\"hex = 0x32\\"\\necho \\"hexadecimal number = $hex\\"         # 50\\n\\necho $((0x9abc))                         # 39612\\n#     ^^      ^^   双圆括号进行表达式求值\\n# 结果以十进制打印输出。\\n\\n\\n\\n# 其他进制数: BASE#NUMBER\\n# BASE 范围:  2 - 64\\n# NUMBER 必须以 BASE 规定的正确形式书写，如下:\\n\\nlet \\"bin = 2#111100111001101\\"\\necho \\"binary number = $bin\\"              # 31181\\n\\nlet \\"b32 = 32#77\\"\\necho \\"base-32 number = $b32\\"             # 231\\n\\nlet \\"b64 = 64#@_\\"\\necho \\"base-64 number = $b64\\"             # 4031\\n\\n# 这种表示法只对进制范围(2 - 64)内的 ASCII 字符有效。\\n# 10 数字 + 26 小写字母 + 26 大写字母 + @ + _\\n\\n\\necho\\n\\necho $((36#zz)) $((2#10101010)) $((16#AF16)) $((53#1aA))\\n                                         # 1295 170 44822 3375\\n\\n#  重要提醒:\\n#  ---------\\n#  使用超出进制范围以外的符号会报错。\\n\\nlet \\"bad_oct = 081\\"\\n\\n# (可能的) 报错信息:\\n#  bad_oct = 081: value too great for base (error token is \\"081\\")\\n#              Octal numbers use only digits in the range 0 - 7.\\n\\nexit $?        # 退出码 = 1 (错误)\\n\\n# 感谢 Rich Bartell 和 Stephane Chazelas 的说明。\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"LinuxStory"},"autoDesc":true}`);export{e as data};
