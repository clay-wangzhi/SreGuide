import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as r,c,b as n,d as s,e as a,a as i}from"./app-b89db1c8.js";const p={},t=i('<h1 id="_4-4-jenkins共享库应用" tabindex="-1"><a class="header-anchor" href="#_4-4-jenkins共享库应用" aria-hidden="true">#</a> 4.4 Jenkins共享库应用</h1><h2 id="由来与演进" tabindex="-1"><a class="header-anchor" href="#由来与演进" aria-hidden="true">#</a> 由来与演进</h2><p>在Jenkins 1.x中，对于job的配置大多是基于图形界面的，也就是说，要在GUI页面手动设置相关的job参数。 随着不同类型和用途的job越来越多，参数越来越复杂，难以有效地管理数量庞大的图形界面配置信息，也无法有效追踪和记录配置的更改。</p><p>在Jenkins 2.0中，基于Pipeline，用户可以在一个 JenkinsFile 中快速实现一个项目的从构建、测试以到发布的完整流程，灵活方便地实现持续交付。 并且通过“pipeline script from SCM”方式，可以保存这个流水线的定义，进行版本化管理。</p><p>在实际使用中，一开始大都会制作一个尽可能通用的pipeline脚本样例，让搭建者只需要修改几个赋值参数就可以在项目中应用。 但不可避免的是，不同的项目往往有不同的需求，随着定制化需求越来越多，加入了不同的功能实现代码，导致pipeline也会越来越复杂，可读性差，也不利于维护。 而且随着pipeline数目不断的增多，将会发现同一类型和用途的pipeline，它们的很多功能其实是相同的，这时如果对某个功能做改动，往往需要更新数量众多的JenkinsFile。</p><p>针对pipeline的扩展和管理问题，共享库功能（Shared Libraries）应运而生。 共享库可以将整个pipeline脚本的实现和复杂度封装到Shared Library中，在各种项目之间共享pipeline核心实现，减少冗余代码。 也就是说，Shared Libraries的方式抽象了各种项目之间共享的代码（甚至整条完整的pipeline），有效降低了使用pipeline的复杂度。 而且通过外部源代码控制（SCM）的方式，保证所有job在构建的时候会调用最新的共享库代码。</p><h2 id="共享库是什么" tabindex="-1"><a class="header-anchor" href="#共享库是什么" aria-hidden="true">#</a> 共享库是什么？</h2>',7),d=n("strong",null,"独立的 Groovy 脚本的集合",-1),u={href:"https://www.qikqiak.com/post/groovy-simple-tutorial/",target:"_blank",rel:"noopener noreferrer"},v=i(`<p>使用共享库一般只需要3个步骤即可：</p><ul><li>首先创建 Groovy 脚本，添加到 Git 仓库中</li><li>然后在 Jenkins 中配置将共享库添加到 Jenkins 中来</li><li>最后，在我们的流水线中导入需要使用的共享库：<code>@Library(&#39;your-shared-library&#39;)</code>，这样就可以使用共享库中的代码了。</li></ul><h2 id="共享库内容" tabindex="-1"><a class="header-anchor" href="#共享库内容" aria-hidden="true">#</a> 共享库内容</h2><p>在共享库中一般会有两种通用的代码：</p><ul><li><strong>Steps</strong>：这些 Steps 在 Jenkins 中被称为<strong>全局变量</strong>，我们可以在所有的 Jenkins Pipeline 中使用这些自定义的 Steps。</li></ul><p>比如，我们可以编写一个标准的 Step 来部署应用或者发送消息通知等，我们就可以将代码添加到 <code>vars/YourStepName.groovy</code> 文件中，然后实现一个 <code>call</code> 函数即可：</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token shebang comment">#!/usr/bin/env groovy</span>
<span class="token comment">// vars/YourStepName.groovy</span>

<span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something here...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>其他通用代码</strong>：我们可以在这里面添加一些帮助类，还可以定义整个流水线中使用的静态常量等。</li></ul><p>这些代码需要放在 <code>src/your/package/name</code> 目录下面，然后就可以使用常规的 Groovy 语法了，例如：</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token shebang comment">#!/usr/bin/env groovy</span>
<span class="token comment">// com/qikqiak/GlobalVars.groovy</span>
<span class="token keyword">package</span> com<span class="token punctuation">.</span>qikqiak

<span class="token keyword">class</span> <span class="token class-name">GlobalVars</span> <span class="token punctuation">{</span>
   <span class="token keyword">static</span> String foo <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;bar&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在 Jenkins Pipeline 中使用 <code>import</code> 导入上面的类，并引用其中的静态变量，比如 <code>GlobalVars.foo</code>。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>新建一个名为 <code>pipeline-library-demo</code> 的文件夹，将该项目加入到 Git 仓库中。首先创建一个名为 <code>vars</code> 的目录，自定义一个 step 就是在 <code>vars</code> 目录下面的一个 <code>.groovy</code> 文件，这些被称为全局变量，比如我们添加一个 <code>sayHi.groovy</code> 的文件，代码如下所示：</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token shebang comment">#!/usr/bin/env groovy</span>

<span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>String name<span class="token operator">=</span><span class="token string">&#39;QIKQIAK&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  echo <span class="token interpolation-string"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是需要实现 call 方法，添加了一个名为 name 的参数，具有默认值 <code>QIKQIAK</code>，可以用 <code>\${name}</code> 来进行访问。</p><p>然后创建一个名为 <code>src/com/qikqiak/GlobalVars.groovy</code> 的文件，文件内容如下所示：</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token shebang comment">#!/usr/bin/env groovy</span>
<span class="token keyword">package</span> com<span class="token punctuation">.</span>qikqiak

<span class="token keyword">class</span> <span class="token class-name">GlobalVars</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> String foo <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;bar&quot;</span></span>

  <span class="token comment">// 在 Pipeline 中可以引用这里的静态变量：</span>
  <span class="token comment">// </span>
  <span class="token comment">// import com.qikqiak.GlobalVars</span>
  <span class="token comment">// println GlobalVars.foo</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整的代码目录如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tree <span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
├── README.md
├── src
│   └── com
│       └── qikqiak
│           └── GlobalVars.groovy
└── vars
    └── sayHi.groovy

<span class="token number">4</span> directories, <span class="token number">3</span> files
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整的代码上传到了 GitHub 仓库 https://github.com/cnych/pipeline-library-demo 中。</p><p>共享库创建完成后，我们需要让 Jenkins 知道这个共享库，我们可以从 Jenkins 的 Web 页面进行添加。在 Jenkins 首页 -&gt; 系统管理 -&gt; 系统配置，在 <code>Global Pipeline Libraries</code> 区域配置共享库：</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/20200520174843.png" alt="Global Pipeline Libraries">Global Pipeline Libraries</p><p>保存后即可使用配置共享库。接下来新建一个名为 <code>share-lib-demo</code> 的流水线项目，在 <code>Pipeline script</code> 区域添加如下代码：</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token annotation punctuation">@Library</span><span class="token punctuation">(</span><span class="token string">&#39;pipeline-library-demo&#39;</span><span class="token punctuation">)</span><span class="token number">_</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>qikqiak<span class="token punctuation">.</span>GlobalVars

<span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Demo&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    echo <span class="token string">&#39;Hello world&#39;</span>
    sayHi <span class="token string">&#39;阳明&#39;</span>
    println GlobalVars<span class="token punctuation">.</span>foo
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://bxdc-static.oss-cn-beijing.aliyuncs.com/images/20200520175022.png" alt="img"></p><p>需要注意的是 <code>@Library(&#39;pipeline-library-demo&#39;)_</code> 最后有一个下划线 <code>_</code>，这个下划线并不是写错了，如果 <code>@Libray</code> 后面紧接的一行不是 <code>import</code> 语句的话，就需要这个下划线，我们这里后面就是一条 <code>import</code> 语句，所以这里可以省略这个下划线。</p><p>配置完成后，构建这个 Pipeline，正常就可以看到如下所示的构建结果：</p><p><img src="https://bxdc-static.oss-cn-beijing.aliyuncs.com/images/20200520175509.png" alt="img"></p><p>这样我们就完成了一个共享库的编写。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,30),m={href:"https://www.cnblogs.com/anliven/p/13693871.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.qikqiak.com/post/jenkins-shared-library-demo/",target:"_blank",rel:"noopener noreferrer"};function k(g,h){const e=l("ExternalLinkIcon");return r(),c("div",null,[t,n("p",null,[s("共享库（shared library）是一些"),d,s("，我们可以在运行 Pipeline 的时候去获取这些共享库代码。使用共享库最好的方式同样是把代码使用 Git 仓库进行托管，这样我们就可以进行版本化管理了。当然我们也需要一些 Groovy 语言的基础，不过并不需要多深入，基本的语法概念掌握即可，可以查看前面我们的 "),n("a",u,[s("Groovy 简明教程"),a(e)]),s(" 。")]),v,n("p",null,[n("a",m,[s("Jenkins - 共享库（Shared Libraries）| anliven | 博客园"),a(e)])]),n("p",null,[n("a",b,[s("Jenkins 共享库示例 | 阳明的博客"),a(e)])])])}const f=o(p,[["render",k],["__file","jenkins-shared-library.html.vue"]]);export{f as default};
