import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as t,c,a as n,b as s,d as p,e as l}from"./app-fb0a644a.js";const r={},i=l(`<h1 id="内存available-是怎么计算的" tabindex="-1"><a class="header-anchor" href="#内存available-是怎么计算的" aria-hidden="true">#</a> 内存Available 是怎么计算的</h1><p>内存 ( memory )是操作系统管理的一项重要指标，对内存使用量进行监控，有助于提前发现内存问题，避免因内存耗尽而造成的故障。</p><p><strong>如果出现内存快被耗尽，一般会出现 OOM 的现象。</strong></p><h2 id="虚拟机情况" tabindex="-1"><a class="header-anchor" href="#虚拟机情况" aria-hidden="true">#</a> 虚拟机情况</h2><h4 id="命令查看" tabindex="-1"><a class="header-anchor" href="#命令查看" aria-hidden="true">#</a> 命令查看</h4><p><strong>使用 free 命令查看</strong></p><p>Linux 内核负责统计内存使用量并暴露在 /proc 伪文件系统中，路径是 /proc/meminfo 。一般而言，需要重点关注的指标如下： 内存使用量指标(字节):</p><ul><li><p>total 表示 物理内存总量 ，单位为 字节 ，对应 /proc/meminfo 的 MemTotal 字段。</p></li><li><p>free 表示 空闲内存量 ，单位为 字节 ， 对应 /proc/meminfo 的 MemFree 字段。</p></li><li><p>buffers 表示 内核缓冲区 ，单位为 字节 ，对应 /proc/meminfo 的 Buffers 字段。</p></li><li><p>cached 表示 文件缓冲页 ，单位为 字节 ，对应 /proc/meminfo 的 Cached 字段。</p></li><li><p>slab 表示 内核 slab 数据结构 ，单位为 字节 ，对应 /proc/meminfo 的 Slab 字段。</p></li><li><p>cache 与 free 命令中的 cache 相同，即 cached 以及 slab 之和：cache = cached + slab</p></li><li><p>g_free 表示 广义空闲内存 ( generalized free )，单位为 字节 ，计算方式如下：g_free = free + buffers + cache buffers 和 cache 是系统为了提升性能而使用的缓存，内存紧张时可随时回收另做它用。因此，这部分内存在某种意义上可以认为是空闲的，这就是 广义空闲内存 的由来。</p></li><li><p>used 表示 已用内存 ，单位为 字节 ，计算方式如下：used = total - g_free = total - free - buffers - cache</p></li><li><p>active 表示 活跃内存 ，单位为 字节 ，对应 /proc/meminfo 的 Active 字段。 活跃内存 是指最近经常访问的内存，通常不会被重新分配，除非非常必要。</p></li><li><p>inactive 表示 非活跃内存 ，单位为 字节 ，对应 /proc/meminfo 的 Inactive 字段。 非活跃内存 是指最近较少访问的内存，需要新分配内存时，这部分优先选择。</p></li><li><p>available3.14 内核版本开始提供在 /proc/meminfo 的 MemAvailable 字段，available 表示 可用内存 ，单位为 字节。</p></li></ul><p>计算公式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>available <span class="token operator">=</span> free_pages - total_reserved + pagecache + SReclaimable
<span class="token comment"># 计算 wmark_low</span>
wmark_low <span class="token operator">=</span> <span class="token function">awk</span> <span class="token string">&#39;/min/ {sum += $2} END {print sum * 4}&#39;</span> /proc/zoneinfo
<span class="token comment"># 计算空闲页 free_pages</span>
free_pages <span class="token operator">=</span> <span class="token function">awk</span> <span class="token string">&#39;/free / {sum += $3} END {print sum * 4}&#39;</span> /proc/zoneinfo
<span class="token comment"># 计算保留内存</span>
total_reserved <span class="token operator">=</span> Σ<span class="token punctuation">(</span>min<span class="token variable"><span class="token punctuation">((</span>max<span class="token punctuation">(</span>lowmem<span class="token punctuation">)</span> <span class="token operator">+</span> high_watermark<span class="token punctuation">)</span><span class="token punctuation">,</span> managed<span class="token punctuation">))</span></span>
max<span class="token punctuation">(</span>lowmem<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">awk</span> <span class="token string">&#39;/protection/ {gsub(/[\\(\\),]/,&quot; &quot;); print $5}&#39;</span> /proc/zoneinfo
high_watermark <span class="token operator">=</span> <span class="token function">awk</span> <span class="token string">&#39;/high / {print $2}&#39;</span> /proc/zoneinfo
managed <span class="token operator">=</span> <span class="token function">awk</span> <span class="token string">&#39;/managed/ {print $2}&#39;</span> /proc/zoneinfo
<span class="token function">paste</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">paste</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">awk</span> <span class="token string">&#39;/protection/ {gsub(/[\\(\\),]/,&quot; &quot;); print $5}&#39;</span> /proc/zoneinfo<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">awk</span> <span class="token string">&#39;/high / {print $2}&#39;</span> /proc/zoneinfo<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $1+$2}&#39;</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">awk</span> <span class="token string">&#39;/managed/ {print $2}&#39;</span> /proc/zoneinfo<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{total_reserved += ($1 &gt; $2 ? $2 : $1)} END {print total_reserved * 4}&#39;</span>
<span class="token comment"># 计算 pagecache</span>
pagecache <span class="token operator">=</span> active <span class="token function">file</span> + inactive <span class="token function">file</span>
<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span>$<span class="token punctuation">(</span>awk &#39;<span class="token operator">/</span>nr_inactive_file<span class="token operator">/</span>{sum <span class="token operator">+=</span> $<span class="token number">2</span>} END {print sum <span class="token operator">*</span> <span class="token number">4</span>}&#39; <span class="token operator">/</span>proc<span class="token operator">/</span>zoneinfo<span class="token punctuation">)</span> <span class="token operator">+</span> $<span class="token punctuation">(</span>awk &#39;<span class="token operator">/</span>nr_active_file<span class="token operator">/</span>{sum <span class="token operator">+=</span> $<span class="token number">2</span>} END {print sum <span class="token operator">*</span> <span class="token number">4</span>}&#39; <span class="token operator">/</span>proc<span class="token operator">/</span>zoneinfo<span class="token variable">))</span></span><span class="token punctuation">)</span>
<span class="token comment">#  pagecache -= min(pagecache / 2, wmark_low)，并不是所有的 pagecache 都被认为是可用的：</span>
pagecache -<span class="token operator">=</span> min<span class="token punctuation">(</span>pagecache / <span class="token number">2</span>, wmark_low<span class="token punctuation">)</span>，并不是所有的 pagecache 都被认为是可用的：
<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span>$<span class="token punctuation">(</span>echo $<span class="token punctuation">((</span>$<span class="token punctuation">(</span>awk &#39;<span class="token operator">/</span>nr_inactive_file<span class="token operator">/</span>{sum <span class="token operator">+=</span> $<span class="token number">2</span>} END {print sum <span class="token operator">*</span> <span class="token number">4</span>}&#39; <span class="token operator">/</span>proc<span class="token operator">/</span>zoneinfo<span class="token punctuation">)</span> <span class="token operator">+</span> $<span class="token punctuation">(</span>awk &#39;<span class="token operator">/</span>nr_active_file<span class="token operator">/</span>{sum <span class="token operator">+=</span> $<span class="token number">2</span>} END {print sum <span class="token operator">*</span> <span class="token number">4</span>}&#39; <span class="token operator">/</span>proc<span class="token operator">/</span>zoneinfo<span class="token variable">))</span></span><span class="token punctuation">))</span> - <span class="token variable"><span class="token variable">$(</span><span class="token function">paste</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">awk</span> <span class="token string">&#39;/min/ {sum += $2} END {print sum * 4}&#39;</span> /proc/zoneinfo<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token builtin class-name">echo</span> <span class="token punctuation">$((</span><span class="token punctuation">$(</span>awk <span class="token string">&#39;/nr_inactive_file/{sum += $2} END {print sum * 4}&#39;</span> /proc/zoneinfo<span class="token punctuation">)</span> + <span class="token punctuation">$(</span>awk <span class="token string">&#39;/nr_active_file/{sum += $2} END {print sum * 4}&#39;</span> /proc/zoneinfo<span class="token punctuation">)</span><span class="token variable">)</span></span><span class="token punctuation">))</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{min =  ($1 &gt; $2/2 ? $2 : $1); print min}&#39;</span><span class="token punctuation">))</span><span class="token punctuation">)</span>
<span class="token comment"># 计算 SReclaimable</span>
<span class="token function">awk</span> <span class="token string">&#39;/nr_slab_reclaimable/ {sum += $2} END {print sum * 4}&#39;</span> /proc/zoneinfo
<span class="token comment"># SReclaimable -= min(SReclaimable/2, wmark_low)，和 pagecache 相似，不能全用。</span>
<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span>$<span class="token punctuation">(</span>awk &#39;<span class="token operator">/</span>nr_slab_reclaimable<span class="token operator">/</span> {sum <span class="token operator">+=</span> $<span class="token number">2</span>} END {print sum <span class="token operator">*</span> <span class="token number">4</span>}&#39; <span class="token operator">/</span>proc<span class="token operator">/</span>zoneinfo<span class="token punctuation">)</span> <span class="token operator">-</span> $<span class="token punctuation">(</span>paste <span class="token operator">&lt;</span><span class="token punctuation">(</span>awk &#39;<span class="token operator">/</span>nr_slab_reclaimable<span class="token operator">/</span> {sum <span class="token operator">+=</span> $<span class="token number">2</span>} END {print sum <span class="token operator">*</span> <span class="token number">4</span>}&#39; <span class="token operator">/</span>proc<span class="token operator">/</span>zoneinfo<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>awk &#39;<span class="token operator">/</span>min<span class="token operator">/</span> {sum <span class="token operator">+=</span> $<span class="token number">2</span>} END {print sum <span class="token operator">*</span> <span class="token number">4</span>}&#39; <span class="token operator">/</span>proc<span class="token operator">/</span>zoneinfo<span class="token punctuation">)</span> <span class="token operator">|</span> awk &#39;{min <span class="token operator">=</span>  <span class="token punctuation">(</span>$<span class="token number">1</span> <span class="token operator">&gt;</span> $<span class="token number">2</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">?</span> $<span class="token number">2</span> <span class="token operator">:</span> $<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> print min}&#39;<span class="token variable">))</span></span><span class="token punctuation">)</span>

<span class="token comment">#  available = free_pages - total_reserved + pagecache + SReclaimable</span>
<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span><span class="token punctuation">(</span>$<span class="token punctuation">(</span>awk &#39;<span class="token operator">/</span>free <span class="token operator">/</span> {sum <span class="token operator">+=</span> $<span class="token number">3</span>} END {print sum <span class="token operator">*</span> <span class="token number">4</span>}&#39; <span class="token operator">/</span>proc<span class="token operator">/</span>zoneinfo<span class="token punctuation">)</span> <span class="token operator">-</span> $<span class="token punctuation">(</span>paste <span class="token operator">&lt;</span><span class="token punctuation">(</span>paste <span class="token operator">&lt;</span><span class="token punctuation">(</span>awk &#39;<span class="token operator">/</span>protection<span class="token operator">/</span> {gsub<span class="token punctuation">(</span><span class="token operator">/</span>[\\<span class="token punctuation">(</span>\\<span class="token punctuation">)</span><span class="token punctuation">,</span>]<span class="token operator">/</span><span class="token punctuation">,</span>&quot; &quot;<span class="token punctuation">)</span><span class="token punctuation">;</span> print $<span class="token number">5</span>}&#39; <span class="token operator">/</span>proc<span class="token operator">/</span>zoneinfo<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>awk &#39;<span class="token operator">/</span>high <span class="token operator">/</span> {print $<span class="token number">2</span>}&#39; <span class="token operator">/</span>proc<span class="token operator">/</span>zoneinfo<span class="token punctuation">)</span> <span class="token operator">|</span> awk &#39;{print $<span class="token number">1</span><span class="token operator">+</span>$<span class="token number">2</span>}&#39;<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>awk &#39;<span class="token operator">/</span>managed<span class="token operator">/</span> {print $<span class="token number">2</span>}&#39; <span class="token operator">/</span>proc<span class="token operator">/</span>zoneinfo<span class="token punctuation">)</span> <span class="token operator">|</span> awk &#39;{total_reserved <span class="token operator">+=</span> <span class="token punctuation">(</span>$<span class="token number">1</span> <span class="token operator">&gt;</span> $<span class="token number">2</span> <span class="token operator">?</span> $<span class="token number">2</span> <span class="token operator">:</span> $<span class="token number">1</span><span class="token punctuation">)</span>} END {print total_reserved <span class="token operator">*</span> <span class="token number">4</span>}&#39;<span class="token punctuation">)</span> <span class="token operator">+</span> $<span class="token punctuation">(</span>echo $<span class="token punctuation">((</span>$<span class="token punctuation">(</span>echo $<span class="token punctuation">((</span>$<span class="token punctuation">(</span>awk &#39;<span class="token operator">/</span>nr_inactive_file<span class="token operator">/</span>{sum <span class="token operator">+=</span> $<span class="token number">2</span>} END {print sum <span class="token operator">*</span> <span class="token number">4</span>}&#39; <span class="token operator">/</span>proc<span class="token operator">/</span>zoneinfo<span class="token punctuation">)</span> <span class="token operator">+</span> $<span class="token punctuation">(</span>awk &#39;<span class="token operator">/</span>nr_active_file<span class="token operator">/</span>{sum <span class="token operator">+=</span> $<span class="token number">2</span>} END {print sum <span class="token operator">*</span> <span class="token number">4</span>}&#39; <span class="token operator">/</span>proc<span class="token operator">/</span>zoneinfo<span class="token variable">))</span></span><span class="token punctuation">))</span> - <span class="token variable"><span class="token variable">$(</span><span class="token function">paste</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">awk</span> <span class="token string">&#39;/min/ {sum += $2} END {print sum * 4}&#39;</span> /proc/zoneinfo<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token builtin class-name">echo</span> <span class="token punctuation">$((</span><span class="token punctuation">$(</span>awk <span class="token string">&#39;/nr_inactive_file/{sum += $2} END {print sum * 4}&#39;</span> /proc/zoneinfo<span class="token punctuation">)</span> + <span class="token punctuation">$(</span>awk <span class="token string">&#39;/nr_active_file/{sum += $2} END {print sum * 4}&#39;</span> /proc/zoneinfo<span class="token punctuation">)</span><span class="token variable">)</span></span><span class="token punctuation">))</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{min =  ($1 &gt; $2/2 ? $2 : $1); print min}&#39;</span><span class="token punctuation">))</span><span class="token punctuation">))</span> + <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token punctuation">$((</span><span class="token punctuation">$(</span>awk <span class="token string">&#39;/nr_slab_reclaimable/ {sum += $2} END {print sum * 4}&#39;</span> /proc/zoneinfo<span class="token punctuation">)</span> - <span class="token punctuation">$(</span>paste <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">awk</span> <span class="token string">&#39;/nr_slab_reclaimable/ {sum += $2} END {print sum * 4}&#39;</span> /proc/zoneinfo<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">awk</span> <span class="token string">&#39;/min/ {sum += $2} END {print sum * 4}&#39;</span> /proc/zoneinfo<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{min =  ($1 &gt; $2/2 ? $2 : $1); print min}&#39;</span><span class="token variable">)</span></span><span class="token punctuation">))</span><span class="token punctuation">))</span>/1024<span class="token punctuation">))</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),k={href:"https://blog.csdn.net/ichen820/article/details/115349836",target:"_blank",rel:"noopener noreferrer"},u={href:"https://lotabout.me/2021/Linux-Available-Memory/",target:"_blank",rel:"noopener noreferrer"};function m(b,f){const a=e("ExternalLinkIcon");return t(),c("div",null,[i,n("p",null,[s("参考链接： "),n("a",k,[s("Centos7 内存使用率计算_linux内存指标"),p(a)])]),n("p",null,[n("a",u,[s("我的内存呢？Linux MemAvailable 如何计算"),p(a)])])])}const $=o(r,[["render",m],["__file","mem.html.vue"]]);export{$ as default};
