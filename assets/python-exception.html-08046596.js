import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-10bfa633.js";const p={},t=e(`<h1 id="_8-1-异常处理" tabindex="-1"><a class="header-anchor" href="#_8-1-异常处理" aria-hidden="true">#</a> 8.1 异常处理</h1><p><strong>错误 Error</strong></p><p>逻辑错误：算法写错了，例如加法写成了减法</p><p>笔误：例如变量名写错了，语法错误</p><p>函数或类使用错误，其实这也属于逻辑错误</p><p>总之，错误是可以避免的</p><p><strong>异常 Exception</strong></p><p>本意就是意外情况</p><p>这有个前提，没有出现上面说的错误，也就是说程序写的没有问题，但是在某些情况下，会出现一些意外，导致程序无法正常的执行下去。</p><p>例如open函数操作一个文件，文件不存在，或者创建一个文件时已经存在了，或者访问一个网络文件，突然断网了，这就是异常，是个意外的情况。</p><p>异常不可能避免</p><p><strong>错误和异常</strong></p><p>在高级编程语言中，一般都有错误和异常的概念，异常是可以捕获，并被处理的，但是错误是不能被捕获的。 举例 对比异常和错误</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;testabc&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token comment"># 异常</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;C:/Users/user/PycharmProjects/pr1/test1.py&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;testabc&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
FileNotFoundError<span class="token punctuation">:</span> <span class="token punctuation">[</span>Errno <span class="token number">2</span><span class="token punctuation">]</span> No such <span class="token builtin">file</span> <span class="token keyword">or</span> directory<span class="token punctuation">:</span> <span class="token string">&#39;testabc&#39;</span>
        
<span class="token keyword">def</span> 0A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token comment"># 错误</span>
  File <span class="token string">&quot;test1.py&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span>
    <span class="token keyword">def</span> 0A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token operator">^</span>
SyntaxError<span class="token punctuation">:</span> invalid syntax
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个健壮的程序</p><ul><li>尽可能的避免错误</li><li>尽可能的捕获、处理各种异常</li></ul><h2 id="产生异常" tabindex="-1"><a class="header-anchor" href="#产生异常" aria-hidden="true">#</a> 产生异常</h2><p>产生：</p><ul><li>raise 语句显式的抛出异常</li><li>Python解释器自己检测到异常并引发它</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;before&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 除零异常</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;after&#39;</span><span class="token punctuation">)</span>

foo<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;before&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;my exception&#39;</span><span class="token punctuation">)</span> <span class="token comment"># raise主动抛出异常</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;after&#39;</span><span class="token punctuation">)</span>
bar<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序会在异常抛出的地方中断执行，如果不捕获，就会提前结束程序（其实是终止当前线程的执行）</p><h2 id="异常的捕获" tabindex="-1"><a class="header-anchor" href="#异常的捕获" aria-hidden="true">#</a> 异常的捕获</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
	待捕获异常的代码块
<span class="token keyword">except</span> <span class="token punctuation">[</span>异常类型<span class="token punctuation">]</span><span class="token punctuation">:</span>
	异常的处理代码块
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;before&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 除零异常</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;after&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;catch u&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;finished&#39;</span><span class="token punctuation">)</span>

foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;==== end ====&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例执行到 <code>c = 1/0</code> 时产生异常并抛出，由于使用了 try...except 语句块则捕捉到了这个异常，异常生成位置之后语句将不再执行，转而执行对应的 except 部分的语句，最后执行 try...except 语句块之外的语句。</p><p><strong>捕获指定类型的异常</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;before&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 除零异常</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;after&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> ArithmeticError<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;catch u&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;finished&#39;</span><span class="token punctuation">)</span>

foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;==== end ====&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常类及继承层次" tabindex="-1"><a class="header-anchor" href="#异常类及继承层次" aria-hidden="true">#</a> 异常类及继承层次</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Python异常的继承</span>
BaseException
    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> SystemExit
    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> KeyboardInterrupt
    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> GeneratorExit
    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> Exception
    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> RuntimeError
    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> RecursionError
    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> MemoryError
    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> NameError
    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> StopIteration
    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> StopAsyncIteration
    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ArithmeticError
    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> FloatingPointError
    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> OverflowError
    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ZeroDivisionError
    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> LookupError
    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> IndexError
    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> KeyError
    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> SyntaxError
    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> OSError
    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> BlockingIOError
    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ChildProcessError
    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ConnectionError
    <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> BrokenPipeError
    <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ConnectionAbortedError
    <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ConnectionRefusedError
    <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ConnectionResetError
    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> FileExistsError
    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> FileNotFoundError
    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> InterruptedError
    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> IsADirectoryError
    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> NotADirectoryError
    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> PermissionError
    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ProcessLookupError
    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> TimeoutError
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="baseexception-及子类" tabindex="-1"><a class="header-anchor" href="#baseexception-及子类" aria-hidden="true">#</a> BaseException 及子类</h2><h3 id="baseexception" tabindex="-1"><a class="header-anchor" href="#baseexception" aria-hidden="true">#</a> BaseException</h3><p>所有内建异常类的基类是BaseException</p><h3 id="systemexit" tabindex="-1"><a class="header-anchor" href="#systemexit" aria-hidden="true">#</a> SystemExit</h3><p>sys.exit()函数引发的异常，异常不捕获处理，就直接交给Python解释器，解释器退出。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> sys
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;before&#39;</span><span class="token punctuation">)</span>
sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;SysExit&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;after&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 是否执行？ 不执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 捕获这个异常</span>
<span class="token keyword">import</span> sys
<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;before&#39;</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;SysExit&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;after&#39;</span><span class="token punctuation">)</span> 
<span class="token keyword">except</span> SystemExit<span class="token punctuation">:</span> <span class="token comment"># 换成Exception能否捕获 ,能</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;SysExit&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;outer&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 是否执行？ 执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果except语句捕获了该异常，则继续向后面执行，如果没有捕获住该异常SystemExit，解释器直接退出程序。</p><p>注意捕获前后程序退出状态码的变化。（捕获后状态码变为0）</p><h3 id="keyboardinterrupt" tabindex="-1"><a class="header-anchor" href="#keyboardinterrupt" aria-hidden="true">#</a> KeyboardInterrupt</h3><p>对应的捕获用户中断行为Ctrl + C</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time
<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;running&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Ctrl + c&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exception及子类" tabindex="-1"><a class="header-anchor" href="#exception及子类" aria-hidden="true">#</a> Exception及子类</h2><p>Exception是所有内建的、非系统退出的异常的基类，自定义异常类应该继承自它</p><p><strong>SyntaxError 语法错误</strong></p><p>Python将这种错误也归到异常类下面的Exception下的子类，但是这种错误是不可捕获的</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        0a <span class="token operator">=</span> <span class="token number">5</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
a<span class="token punctuation">(</span><span class="token punctuation">)</span>
  File <span class="token string">&quot;test1.py&quot;</span><span class="token punctuation">,</span> line <span class="token number">3</span>
    0a <span class="token operator">=</span> <span class="token number">5</span>
     <span class="token operator">^</span>
SyntaxError<span class="token punctuation">:</span> invalid syntax
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ArithmeticError</strong></p><p>所有算术计算引发的异常，其子类有除零异常等</p><p><strong>LookupError</strong></p><p>使用映射的键或序列的索引无效时引发的异常的基类：IndexError, KeyError</p><p><strong>自定义异常类</strong></p><p>从 Exception 继承的类</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">raise</span> MyException<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> MyException<span class="token punctuation">:</span> <span class="token comment"># 捕获自定义异常</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;catch u&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多种捕获" tabindex="-1"><a class="header-anchor" href="#多种捕获" aria-hidden="true">#</a> 多种捕获</h2><p>except 可以指定捕获的类型，捕获多种异常</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> sys
<span class="token keyword">class</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span>
    <span class="token keyword">raise</span> MyException<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;t&#39;</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;zero&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> ArithmeticError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;arith&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> MyException<span class="token punctuation">:</span> <span class="token comment"># 捕获自定义异常</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;catch u&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;exception&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span><span class="token punctuation">:</span> <span class="token comment"># 写在最后，缺省捕获</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;====end====&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>捕获规则</p><ul><li>捕获是从上到下依次比较，如果匹配，则执行匹配的except语句块</li><li>如果被一个except语句捕获，其他except语句就不会再次捕获了</li><li>如果没有任何一个except语句捕获到这个异常，则该异常向外抛出</li><li><code>except:</code> 称为缺省捕获，缺省捕获必须是最后一个捕获语句</li></ul><p>捕获的原则</p><ul><li>从小到大，从具体到宽泛</li></ul><h2 id="as-子句" tabindex="-1"><a class="header-anchor" href="#as-子句" aria-hidden="true">#</a> as 子句</h2><p>先看一个例子</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># raise 能抛出什么样的异常？</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span> <span class="token keyword">pass</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token comment"># 1/0</span>
    <span class="token keyword">raise</span> <span class="token number">1</span>
    <span class="token comment"># raise &quot;abc&quot;</span>
    <span class="token comment"># raise A</span>
    <span class="token comment"># raise A()</span>
    <span class="token comment"># raise {}</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>  <span class="token comment"># 写在最后，缺省捕获</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;catch u&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;====end====&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>raise 真的什么类型都能抛出吗？</p><p>被抛出的异常，应该是异常类的实例，如何获得这个对象呢？使用 as 子句</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># raise 能抛出什么样的异常？</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span> <span class="token keyword">pass</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token comment"># 1/0</span>
    <span class="token comment"># raise 1</span>
    <span class="token keyword">raise</span> <span class="token string">&quot;abc&quot;</span>
    <span class="token comment"># raise A</span>
    <span class="token comment"># raise A()</span>
    <span class="token comment"># raise {}</span>
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>  <span class="token comment"># 写在最后，缺省捕获</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>  <span class="token comment"># 抛出TypeError类型异常实例</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;====end====&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>raise语句</p><ul><li><p>raise后要求应该是BaseException类的子类或实例，如果是类，将被无参实例化。自定义应该是Exception子类</p></li><li><p>raise后什么都没有，表示抛出最近一个被激活的异常，如果没有被激活的异常，则抛类型异常。</p><p>这种方式较少用，它用在except中</p></li></ul><h2 id="finally子句" tabindex="-1"><a class="header-anchor" href="#finally子句" aria-hidden="true">#</a> finally子句</h2><p>finally 最终，即最后一定要执行的，try...finally 语句块中，不管是否发生了异常，都要执行finally的部分</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.tt&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{} {} {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>__class__<span class="token punctuation">,</span> e<span class="token punctuation">.</span>errno<span class="token punctuation">,</span> e<span class="token punctuation">.</span>strerror<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;清理工作&#39;</span><span class="token punctuation">)</span>
	f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上例中的f的作用域，解决的办法是在外部定义 f</p><p>finally 中一般放置资源的清理、释放工作的语句</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.tt&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;清理工作&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在 finally 中再次捕捉异常</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.tt&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{} {} {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>__class__<span class="token punctuation">,</span> e<span class="token punctuation">.</span>errno<span class="token punctuation">,</span> e<span class="token punctuation">.</span>strerror<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;清理工作&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
	    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>语句嵌套和捕获</p><ul><li>异常语句内部可以嵌入到try块、except块、finally块中</li><li>异常在内部产生后，如果没有捕获到，就会继续向外部抛出</li><li>如果外部也没能捕获，将继续再向外部抛出，直至异常代码所在线程，导致线程崩溃</li><li>finally中有return、break语句，则异常就不会继续向外抛出</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span>
    <span class="token keyword">except</span> KeyError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;inner fin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;outer fin&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="else-子句" tabindex="-1"><a class="header-anchor" href="#else-子句" aria-hidden="true">#</a> else 子句</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    ret <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">0</span>
<span class="token keyword">except</span> ArithmeticError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;OK&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;fin&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>else 子句，<strong>没有任何异常发生</strong>，则执行</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token operator">&lt;</span>语句<span class="token operator">&gt;</span> <span class="token comment">#运行别的代码</span>
<span class="token keyword">except</span> <span class="token operator">&lt;</span>异常类<span class="token operator">&gt;</span>：
    <span class="token operator">&lt;</span>语句<span class="token operator">&gt;</span> <span class="token comment"># 捕获某种类型的异常</span>
<span class="token keyword">except</span> <span class="token operator">&lt;</span>异常类<span class="token operator">&gt;</span> <span class="token keyword">as</span> <span class="token operator">&lt;</span>变量名<span class="token operator">&gt;</span><span class="token punctuation">:</span>
    <span class="token operator">&lt;</span>语句<span class="token operator">&gt;</span> <span class="token comment"># 捕获某种类型的异常并获得对象</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token operator">&lt;</span>语句<span class="token operator">&gt;</span> <span class="token comment">#如果没有异常发生</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    <span class="token operator">&lt;</span>语句<span class="token operator">&gt;</span> <span class="token comment">#退出try时总会执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>如果try中语句执行时发生异常，搜索except子句，并执行第一个匹配该异常的except子句</li><li>如果try中语句执行时发生异常，却没有匹配的except子句，异常将被递交到外层的try，如果外层不处理这个异常，异常将继续向外层传递。如果都不处理该异常，则会传递到最外层，如果还没有处理，就终止异常所在的线程</li><li>如果在try执行时没有发生异常，如有else子句，可执行else子句中的语句</li><li>无论try中是否发生异常，finally子句最终都会执行</li></ol>`,85),o=[t];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","python-exception.html.vue"]]);export{d as default};
