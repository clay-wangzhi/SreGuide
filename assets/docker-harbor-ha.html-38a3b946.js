import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as t,c as d,b as s,d as a,e as i,a as n}from"./app-52a338cc.js";const o={},p=s("h1",{id:"harbor-高可用搭建-docker-compose",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#harbor-高可用搭建-docker-compose","aria-hidden":"true"},"#"),a(" Harbor 高可用搭建(docker-compose)")],-1),c=s("h2",{id:"harbor简介",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#harbor简介","aria-hidden":"true"},"#"),a(" Harbor简介")],-1),v={href:"https://goharbor.io/",target:"_blank",rel:"noopener noreferrer"},u=s("code",null,"Docker镜像",-1),b=s("code",null,"Registry",-1),m=n('<p>作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。</p><p>提升用户使用Registry构建和运行环境传输镜像的效率。</p><p>Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。</p><p>另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。</p><h2 id="高可用架构-双主复制" tabindex="-1"><a class="header-anchor" href="#高可用架构-双主复制" aria-hidden="true">#</a> 高可用架构：双主复制</h2><h3 id="主从同步" tabindex="-1"><a class="header-anchor" href="#主从同步" aria-hidden="true">#</a> 主从同步</h3><p>harbor官方默认提供主从复制的方案来解决镜像同步问题，通过复制的方式，我们可以实时将测试环境harbor仓库的镜像同步到生产环境harbor，类似于如下流程：</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/harbor_CI.png" alt="img"></p><p>在实际生产运维的中，往往需要把镜像发布到几十或上百台集群节点上。这时，单个Registry已经无法满足大量节点的下载需求，因此要配置多个Registry实例做负载均衡。手工维护多个Registry实例上的镜像，将是十分繁琐的事情。Harbor可以支持一主多从的镜像发布模式，可以解决大规模镜像发布的难题：</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/harbor_ab.png" alt="img"></p><p>只要往一台Harbor上发布，镜像就会像&quot;仙女散花&quot;般地同步到多个Registry中，高效可靠。</p><p>如果是地域分布较广的集群，还可以采用层次型发布方式，比如从集团总部机房同步到分公司1机房，再从分公司1机房同步到分公司2机房：</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/harbor_cl.png" alt="img"></p><p>然而单靠主从同步，仍然解决不了harbor主节点的单点问题。</p><h3 id="双主复制说明" tabindex="-1"><a class="header-anchor" href="#双主复制说明" aria-hidden="true">#</a> 双主复制说明</h3><p>所谓的双主复制其实就是复用主从同步实现两个harbor节点之间的双向同步，来保证数据的一致性，然后在两台harbor前端顶一个负载均衡器将进来的请求分流到不同的实例中去，只要有一个实例中有了新的镜像，就是自动的同步复制到另外的的实例中去，这样实现了负载均衡，也避免了单点故障，在一定程度上实现了Harbor的高可用性：</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/harbor_st-20221220221014983.png" alt="img"></p><p>这个方案有一个问题就是有可能两个Harbor实例中的数据不一致。假设如果一个实例A挂掉了，这个时候有新的镜像进来，那么新的镜像就会在另外一个实例B中，后面即使恢复了挂掉的A实例，Harbor实例B也不会自动去同步镜像，这样只能手动的先关掉Harbor实例B的复制策略，然后再开启复制策略，才能让实例B数据同步，让两个实例的数据一致。另外，这里还需要多吐槽一句：<strong>在实际生产使用中，主从复制十分的不靠谱！！<strong>所以这里</strong>推荐使用下面要说的这种方案</strong>。</p><h2 id="高可用架构-多实例共享后端存储" tabindex="-1"><a class="header-anchor" href="#高可用架构-多实例共享后端存储" aria-hidden="true">#</a> 高可用架构：多实例共享后端存储</h2><h3 id="方案说明" tabindex="-1"><a class="header-anchor" href="#方案说明" aria-hidden="true">#</a> 方案说明</h3><p>共享后端存储算是一种比较标准的方案，就是多个Harbor实例共享同一个后端存储，任何一个实例持久化到存储的镜像，都可被其他实例中读取。通过前置LB进来的请求，可以分流到不同的实例中去处理，这样就实现了负载均衡，也避免了单点故障。</p><p>本次搭建以NFS作为共享存储存放Harbor相关data，并分离PostgreSQL与Redis为多个Harbor共同连接使用，使用Nginx做负载均衡。</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/harbor_ha_r.png" alt="img"></p><p>如果最终生产环境集群中服务器较多，依赖做完LB的Harbor也无法完全达到需求时，可以使用如下架构，部署下级Harbor节点从主节点同步镜像，然后再分发给生产服务器。</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/harbor_ha_l.png" alt="img"></p><p>这个方案在实际生产环境中部署需要考虑三个问题：</p><p><strong>1.</strong> 共享存储的选取，Harbor的后端存储目前支持AWS S3、Openstack Swift, Ceph等，在下面的实验环境里，暂且直接使用nfs。</p><p><strong>2.</strong> Session在不同的实例上共享，这个现在其实已经不是问题了，在最新的harbor中，默认session会存放在redis中，只需要将redis独立出来即可。可以通过redis sentinel或者redis cluster等方式来保证redis的可用性。在下面的实验环境里，暂且使用单台redis。</p><p><strong>3.</strong> Harbor多实例数据库问题，这个也只需要将harbor中的数据库拆出来独立部署即可。让多实例共用一个外部数据库，数据库的高可用也可以通过数据库的高可用方案保证。</p><h3 id="环境说明" tabindex="-1"><a class="header-anchor" href="#环境说明" aria-hidden="true">#</a> 环境说明</h3><ul><li>操作系统：<code>CentOS 7.6</code></li><li>演示环境软件版本</li></ul><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>Docker</td><td>20.10.7</td></tr><tr><td>docker-compose</td><td>1.27.4</td></tr><tr><td>Harbor</td><td>2.2.3</td></tr><tr><td>Nginx</td><td>1.14.0</td></tr><tr><td>PostgreSQL</td><td>9.6.22</td></tr><tr><td>Redis</td><td>3.2.12</td></tr></tbody></table><ul><li>演示环境网络</li></ul><p>这里主要做Harbor高可用演示，真实生产环境请按需分离NFS与DB单独部署。</p><table><thead><tr><th>IP</th><th>主机名</th></tr></thead><tbody><tr><td>192.168.16.141</td><td>Nginx</td></tr><tr><td>192.168.166.122</td><td>NFS</td></tr><tr><td>192.168.166.203</td><td>postgresql</td></tr><tr><td>192.168.166.245</td><td>Redis</td></tr><tr><td>192.168.166.81</td><td>Harbor-01</td></tr><tr><td>192.168.166.212</td><td>Harbor-02</td></tr></tbody></table><h2 id="多实例共享后端存储-部署" tabindex="-1"><a class="header-anchor" href="#多实例共享后端存储-部署" aria-hidden="true">#</a> 多实例共享后端存储 部署</h2><h3 id="安装docker和docker-compose" tabindex="-1"><a class="header-anchor" href="#安装docker和docker-compose" aria-hidden="true">#</a> 安装Docker和Docker Compose</h3>',37),h=n(`<li><p>安装配置Docker</p><p>使用官方脚本安装 Docker</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> <span class="token string">&quot;https://get.docker.com/&quot;</span> <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> -- <span class="token parameter variable">--mirror</span> Aliyun
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>加载br_netfilter</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>modprobe br_netfilter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置下系统内核参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cat<span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;</span> /etc/sysctl.d/docker.conf</span>
# 要求iptables不对bridge的数据进行处理
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-arptables = 1
# 开启转发
net.ipv4.ip_forward = 1
EOF</span>
<span class="token function">sysctl</span> <span class="token parameter variable">-p</span> /etc/sysctl.d/docker.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>⚠️ 慎用<code>sysctl --system</code>命令，如果参数在不同文件中设置，会有优先级问题，目前看来<code>/etc/sysctl.conf</code>的优先级最高</p></blockquote><p>配置docker镜像站</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-sSL</span> https://get.daocloud.io/daotools/set_mirror.sh <span class="token operator">|</span> <span class="token function">sh</span> <span class="token parameter variable">-s</span> http://f1361db2.m.daocloud.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动docker服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span> <span class="token operator">&amp;&amp;</span> systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,1),k=s("p",null,"安装配置Docker Compose",-1),g={href:"https://github.com/docker/compose/releases",target:"_blank",rel:"noopener noreferrer"},_=n(`<p>二进制方式 安装Docker Compose</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> https://github.com/docker/compose/releases/download/1.27.4/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span> <span class="token operator">&gt;</span> /usr/local/bin/docker-compose
<span class="token function">chmod</span> +x /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置bash补全命令，重新连接终端即生效</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> https://raw.githubusercontent.com/docker/compose/1.27.4/contrib/completion/bash/docker-compose <span class="token operator">&gt;</span> /etc/bash_completion.d/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>如果网络不可达，可先下载到本地，然后上传到内网ftp服务器上，进行下载，以下是笔者自己的内网ftp下载地址</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> ftp://192.168.166.21/docker-compose <span class="token operator">&gt;</span> /etc/bash_completion.d/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),f=n(`<h3 id="nfs" tabindex="-1"><a class="header-anchor" href="#nfs" aria-hidden="true">#</a> NFS</h3><h4 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端" aria-hidden="true">#</a> 服务端</h4><p>1）安装必需的RPM包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> nfs-utils rpcbind   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2）创建NFS共享目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/harbor_data
<span class="token function">chown</span> nobody:nobody /data/harbor_data/ 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3）修改NFS服务配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;/data/harbor_data 192.168.166.0/24(rw,sync,no_root_squash)&quot;</span>  <span class="token operator">&gt;&gt;</span> /etc/exports
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4）启动NFS服务器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl <span class="token builtin class-name">enable</span> rpcbind <span class="token operator">&amp;&amp;</span> systemctl restart rpcbind
systemctl <span class="token builtin class-name">enable</span> nfs <span class="token operator">&amp;&amp;</span> systemctl restart nfs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端" aria-hidden="true">#</a> 客户端</h4><p>1）安装nfs-utils</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> nfs-utils
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2）在NFS客户端上查看NFS的连通性</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># showmount -e 192.168.166.122</span>
Export list <span class="token keyword">for</span> <span class="token number">192.168</span>.166.122:
/data/harbor_data <span class="token number">192.168</span>.166.0/24
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）挂载NFS共享存储</p><p>创建挂载目录</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mkdir /data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改/etc/fstab配置文件加入以下内容</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>192.168.166.122:/data/harbor_data  /data  nfs defaults 0 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>mount挂载</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mount -a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="postgresql" tabindex="-1"><a class="header-anchor" href="#postgresql" aria-hidden="true">#</a> PostgreSQL</h3><p>1）下载PostgreSQL官方YUM源配置文件包并安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
<span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> pgdg-redhat-repo-latest.noarch.rpm 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2）安装PostgreSQL</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum  <span class="token parameter variable">-y</span> <span class="token function">install</span> postgresql96-server postgresql96-contrib 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3）初始化数据库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/usr/pgsql-9.6/bin/postgresql96-setup initdb  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4）启动数据库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl <span class="token builtin class-name">enable</span> postgresql-9.6 <span class="token operator">&amp;&amp;</span> systemctl restart postgresql-9.6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5）PostgreSQL数据库配置</p><ol><li><p>修改密码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># su - postgres</span>
-bash-4.2$ psql
psql <span class="token punctuation">(</span><span class="token number">9.6</span>.17<span class="token punctuation">)</span>
Type <span class="token string">&quot;help&quot;</span> <span class="token keyword">for</span> help.
<span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment"># ALTER USER postgres WITH PASSWORD &#39;postgres&#39;;</span>
ALTER ROLE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>开启远程访问</p><p><code>vi /var/lib/pgsql/9.6/data/postgresql.conf</code></p><p># listen_addresses = &#39;localhost&#39; 改为 listen_addresses=&#39;*&#39;</p></li><li><p>信任远程连接</p><p><code>vim /var/lib/pgsql/9.6/data/pg_hba.conf</code></p><p>加入:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">host</span>    all  all  <span class="token number">192.168</span>.166.203/32 trust
<span class="token function">host</span>    all  all  <span class="token number">192.168</span>.166.81/32 trust
<span class="token function">host</span>    all  all  <span class="token number">192.168</span>.166.212/32 trust
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>6）重启PostgreSQL服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart postgresql-9.6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>7）验证服务</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>psql -h 192.168.166.203 -p 5432 -U postgres
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>8）迁移数据库</p><ol><li><p>在postgresql所在服务器，先启动一套harbor环境</p><p>简要步骤如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> <span class="token string">&quot;https://get.docker.com/&quot;</span> <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> -- <span class="token parameter variable">--mirror</span> Aliyun
systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span> <span class="token operator">&amp;&amp;</span> systemctl start <span class="token function">docker</span>
<span class="token function">curl</span> <span class="token parameter variable">-L</span> https://github.com/docker/compose/releases/download/1.27.4/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span> <span class="token operator">&gt;</span> /usr/local/bin/docker-compose
<span class="token function">chmod</span> +x /usr/local/bin/docker-compose
<span class="token function">wget</span> https://github.com/goharbor/harbor/releases/download/v2.2.3/harbor-offline-installer-v2.2.3.tgz
<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> harbor-offline-installer-v2.2.3.tgz <span class="token parameter variable">-C</span> /usr/local/
<span class="token builtin class-name">cd</span> /usr/local/harbor/
<span class="token function">cp</span> harbor.yml.tmpl harbor.yml
<span class="token function">vim</span> harbor.yml <span class="token comment">###修改hostname: 192.168.166.203  ####注释掉https段即可</span>
./prepare
./install.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>进入harbor-db容器导出相关表及数据</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># docker container exec -it harbor-db /bin/bash</span>
pg_dump <span class="token parameter variable">-U</span> postgres registry <span class="token operator">&gt;</span> /tmp/registry.sql 
pg_dump <span class="token parameter variable">-U</span> postgres notarysigner <span class="token operator">&gt;</span> /tmp/notarysigner.sql  
pg_dump <span class="token parameter variable">-U</span> postgres notaryserver <span class="token operator">&gt;</span> /tmp/notaryserver.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>导出数据库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> container <span class="token function">cp</span> harbor-db:/tmp/registry.sql /tmp
<span class="token function">docker</span> container <span class="token function">cp</span> harbor-db:/tmp/notarysigner.sql /tmp
<span class="token function">docker</span> container <span class="token function">cp</span> harbor-db:/tmp/notaryserver.sql /tmp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将数据导入至外部PostgreSQL数据库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># psql -h 192.168.166.203 -U postgres</span>
<span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment"># create database registry;</span>
CREATE DATABASE
<span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment"># create database notarysigner;</span>
CREATE DATABASE
<span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment"># create database notaryserver;</span>
CREATE DATABASE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>psql <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.166.203 <span class="token parameter variable">-U</span> postgres registry <span class="token operator">&lt;</span> /tmp/registry.sql
psql <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.166.203 <span class="token parameter variable">-U</span> postgres notarysigner  <span class="token operator">&lt;</span> /tmp/notarysigner.sql
psql <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.166.203 <span class="token parameter variable">-U</span> postgres notaryserver <span class="token operator">&lt;</span> /tmp/notaryserver.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h3><p>1）安装redis</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2） 修改配置参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/bind 127.0.0.1/bind 0.0.0.0/g&#39;</span> /etc/redis.conf   
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/daemonize no/daemonize yes/g&#39;</span> /etc/redis.conf   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3）启动并测试redis连接</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl <span class="token builtin class-name">enable</span> redis <span class="token operator">&amp;&amp;</span> systemctl restart redis
redis-cli 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="harbor" tabindex="-1"><a class="header-anchor" href="#harbor" aria-hidden="true">#</a> Harbor</h3>`,47),y={href:"https://github.com/goharbor/harbor/releases",target:"_blank",rel:"noopener noreferrer"},x=n(`<p>1）下载</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://github.com/goharbor/harbor/releases/download/v2.2.3/harbor-offline-installer-v2.2.3.tgz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2）解压</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> harbor-offline-installer-v2.2.3.tgz <span class="token parameter variable">-C</span> /usr/local/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3）修改配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/local/harbor/
<span class="token function">cp</span> harbor.yml.tmpl harbor.yml
<span class="token function">vim</span> harbor.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改的内容有</p><ul><li><code>hostname</code>修改为本机ip</li><li>注释掉https</li><li>修改harbor默认的admin账号密码</li><li>数据存储位置，改为nfs挂载目录，因为我们本来就挂载到了<code>/data</code>目录下，所以不用动</li><li>注释掉<code>database</code></li><li>注释掉<code>clair</code></li><li>打开<code>external_database</code>和<code>external_redis</code>块的注释，并改为刚刚部署的地址</li></ul><p>修改完的样例文件，如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hostname: 192.168.166.81
http:
  port: 80
harbor_admin_password: Harbor12345
data_volume: /data
jobservice:
  max_job_workers: 10
notification:
  webhook_job_max_retry: 10
chart:
  absolute_url: disabled
log:
  level: info
  local:
    rotate_count: 50
    rotate_size: 200M
    location: /var/log/harbor
_version: 1.10.0
external_database:
  harbor:
    host: 192.168.166.203
    port: 5432
    db_name: registry
    username: postgres
    password: postgres
    ssl_mode: disable
    max_idle_conns: 2
    max_open_conns: 0
  notary_signer:
    host: 192.168.166.203
    port: 5432
    db_name: notarysigner
    username: postgres
    password: postgres
    ssl_mode: disable
  notary_server:
    host: 192.168.166.203
    port: 5432
    db_name: notaryserver
    username: postgres
    password: postgres
    ssl_mode: disable
external_redis:
  host: 192.168.166.245:6379
  password:
  registry_db_index: 1
  jobservice_db_index: 2
  chartmuseum_db_index: 3
  trivy_db_index: 5
  idle_timeout_seconds: 30

proxy:
  http_proxy:
  https_proxy:
  no_proxy:
  components:
    - core
    - jobservice
    - trivy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4）生成harbor运行的必要文件（环境）以及<code>docker-compose.yml</code>文件；执行后会通过网络获取Docker Image，建议提前修改好国内镜像站加速。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./prepare 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5）安装Harbor</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./install.sh 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>⚠️ 初识密码已存在 PostgreSQL 中，记得登录先 更改为复杂密码</p></blockquote><h3 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx" aria-hidden="true">#</a> Nginx</h3><p>1）安装nginx（略）</p><p>2）编写配置文件</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> harbor</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">ip_hash</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> 192.168.166.81:80</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> 192.168.166.212:80</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span>  harbor.***.com</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">rewrite</span> ^(.*) https://<span class="token variable">$server_name</span><span class="token variable">$1</span> permanent</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span>  <span class="token number">443</span> ssl</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> xxx.xxx.com</span><span class="token punctuation">;</span>
    
    <span class="token directive"><span class="token keyword">ssl_certificate</span> ***.crt</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_certificate_key</span> ***.key</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">client_max_body_size</span> <span class="token number">0</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">chunked_transfer_encoding</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Proto https</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_redirect</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_ssl_verify</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_ssl_session_reuse</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> http://harbor</span><span class="token punctuation">;</span>
		<span class="token directive"><span class="token keyword">proxy_redirect</span> default</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_http_version</span> 1.1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
    <span class="token directive"><span class="token keyword">location</span> /v2/</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> http://harbor/v2/</span><span class="token punctuation">;</span>
		<span class="token directive"><span class="token keyword">proxy_redirect</span> default</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Proto <span class="token variable">$scheme</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_ssl_verify</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_ssl_session_reuse</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_buffering</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_request_buffering</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）平滑重启nginx</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nginx <span class="token parameter variable">-s</span> reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2><blockquote><p>https://www.cnblogs.com/kevingrace/p/11422710.html</p><p>https://juejin.im/post/5d973e246fb9a04dfa0963fb#heading-18</p><p>https://mp.weixin.qq.com/s/h2fXmKeQeAkKLjUhd8sUBg</p></blockquote>`,23);function w(q,S){const e=l("ExternalLinkIcon");return t(),d("div",null,[p,c,s("p",null,[s("a",v,[a("Harbor"),i(e)]),a("是一个用于存储和分发"),u,a("的企业级"),b,a("服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。")]),m,s("ol",null,[h,s("li",null,[k,s("p",null,[s("a",g,[a("compose"),i(e)]),a("是Docker提供的一个命令行工具，用来定义和运行由多个容器组成的应用。使用compose，我们可以通过YAML文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动。")]),_])]),f,s("p",null,[a("下载"),s("a",y,[a("Harbor"),i(e)]),a("离线安装包，离线安装包文件较大（约为：590M），建议在本地使用多线程工具下载后上传服务器使用。")]),x])}const R=r(o,[["render",w],["__file","docker-harbor-ha.html.vue"]]);export{R as default};
