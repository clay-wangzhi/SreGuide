const s=JSON.parse('{"key":"v-5f6eadd7","path":"/code/shell/part2/04_3_bash_variables_are_untyped.html","title":"4.3 Bash变量是弱类型的","lang":"zh-CN","frontmatter":{"author":"LinuxStory","category":"Linux","tag":["Bash"],"description":"4.3 Bash变量是弱类型的 不同于许多其他编程语言，Bash 并不区分变量的类型。本质上说，Bash 变量是字符串，但在某些情况下，Bash 允许对变量进行算术运算和比较。决定因素则是变量值是否只含有数字。 样例 4-4. 整数还是字符串？ #!/bin/bash # int-or-string.sh a=2334 # 整数。 let \\"a += 1\\" echo \\"a = $a \\" # a = 2335 echo # 依旧是整数。 b=${a/23/BB} # 将 \\"23\\" 替换为 \\"BB\\"。 # $b 变成了字符串。 echo \\"b = $b\\" # b = BB35 declare -i b # 将其声明为整数并没有什么卵用。 echo \\"b = $b\\" # b = BB35 let \\"b += 1\\" # BB35 + 1 echo \\"b = $b\\" # b = 1 echo # Bash 认为字符串的\\"整数值\\"为0。 c=BB34 echo \\"c = $c\\" # c = BB34 d=${c/BB/23} # 将 \\"BB\\" 替换为 \\"23\\"。 # $d 变为了一个整数。 echo \\"d = $d\\" # d = 2334 let \\"d += 1\\" # 2334 + 1 echo \\"d = $d\\" # d = 2335 echo # 如果是空值会怎样呢？ e=\'\' # ...也可以是 e=\\"\\" 或 e= echo \\"e = $e\\" # e = let \\"e += 1\\" # 空值是否允许进行算术运算？ echo \\"e = $e\\" # e = 1 echo # 空值变为了一个整数。 # 如果时未声明的变量呢？ echo \\"f = $f\\" # f = let \\"f += 1\\" # 是否允许进行算术运算？ echo \\"f = $f\\" # f = 1 echo # 未声明变量变为了一个整数。 # # 然而…… let \\"f /= $undecl_var\\" # 可以除以0么？ # let: f /= : syntax error: operand expected (error token is \\" \\") # 语法错误！在这里 $undecl_var 并没有被设置为0！ # # 但是，仍旧…… let \\"f /= 0\\" # let: f /= 0: division by 0 (error token is \\"0\\") # 预期之中。 # 在执行算术运算时，Bash 通常将其空值的整数值设为0。 # 但是不要做这种事情！ # 因为这可能会导致一些意外的后果。 # 结论：上面的结果都表明 Bash 中的变量是弱类型的。 exit $?","head":[["meta",{"property":"og:url","content":"https://clay-wangzhi.com/code/shell/part2/04_3_bash_variables_are_untyped.html"}],["meta",{"property":"og:site_name","content":"SRE运维进阶之路"}],["meta",{"property":"og:title","content":"4.3 Bash变量是弱类型的"}],["meta",{"property":"og:description","content":"4.3 Bash变量是弱类型的 不同于许多其他编程语言，Bash 并不区分变量的类型。本质上说，Bash 变量是字符串，但在某些情况下，Bash 允许对变量进行算术运算和比较。决定因素则是变量值是否只含有数字。 样例 4-4. 整数还是字符串？ #!/bin/bash # int-or-string.sh a=2334 # 整数。 let \\"a += 1\\" echo \\"a = $a \\" # a = 2335 echo # 依旧是整数。 b=${a/23/BB} # 将 \\"23\\" 替换为 \\"BB\\"。 # $b 变成了字符串。 echo \\"b = $b\\" # b = BB35 declare -i b # 将其声明为整数并没有什么卵用。 echo \\"b = $b\\" # b = BB35 let \\"b += 1\\" # BB35 + 1 echo \\"b = $b\\" # b = 1 echo # Bash 认为字符串的\\"整数值\\"为0。 c=BB34 echo \\"c = $c\\" # c = BB34 d=${c/BB/23} # 将 \\"BB\\" 替换为 \\"23\\"。 # $d 变为了一个整数。 echo \\"d = $d\\" # d = 2334 let \\"d += 1\\" # 2334 + 1 echo \\"d = $d\\" # d = 2335 echo # 如果是空值会怎样呢？ e=\'\' # ...也可以是 e=\\"\\" 或 e= echo \\"e = $e\\" # e = let \\"e += 1\\" # 空值是否允许进行算术运算？ echo \\"e = $e\\" # e = 1 echo # 空值变为了一个整数。 # 如果时未声明的变量呢？ echo \\"f = $f\\" # f = let \\"f += 1\\" # 是否允许进行算术运算？ echo \\"f = $f\\" # f = 1 echo # 未声明变量变为了一个整数。 # # 然而…… let \\"f /= $undecl_var\\" # 可以除以0么？ # let: f /= : syntax error: operand expected (error token is \\" \\") # 语法错误！在这里 $undecl_var 并没有被设置为0！ # # 但是，仍旧…… let \\"f /= 0\\" # let: f /= 0: division by 0 (error token is \\"0\\") # 预期之中。 # 在执行算术运算时，Bash 通常将其空值的整数值设为0。 # 但是不要做这种事情！ # 因为这可能会导致一些意外的后果。 # 结论：上面的结果都表明 Bash 中的变量是弱类型的。 exit $?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-19T13:08:31.000Z"}],["meta",{"property":"article:author","content":"LinuxStory"}],["meta",{"property":"article:tag","content":"Bash"}],["meta",{"property":"article:modified_time","content":"2023-04-19T13:08:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.3 Bash变量是弱类型的\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-19T13:08:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LinuxStory\\"}]}"]]},"headers":[],"git":{"createdTime":1681909711000,"updatedTime":1681909711000,"contributors":[{"name":"clay-wangzhi","email":"clay.wangzhi@gmail.com","commits":1}]},"readingTime":{"minutes":1.78,"words":534},"filePathRelative":"code/shell/part2/04_3_bash_variables_are_untyped.md","localizedDate":"2023年4月19日","excerpt":"<h1> 4.3 Bash变量是弱类型的</h1>\\n<p>不同于许多其他编程语言，Bash 并不区分变量的类型。本质上说，<em>Bash 变量是字符串</em>，但在某些情况下，Bash 允许对变量进行算术运算和比较。决定因素则是变量值是否只含有数字。</p>\\n<p>样例 4-4. 整数还是字符串？</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token shebang important\\">#!/bin/bash</span>\\n<span class=\\"token comment\\"># int-or-string.sh</span>\\n\\n<span class=\\"token assign-left variable\\">a</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">2334</span>                   <span class=\\"token comment\\"># 整数。</span>\\n<span class=\\"token builtin class-name\\">let</span> <span class=\\"token string\\">\\"a += 1\\"</span>\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token string\\">\\"a = <span class=\\"token variable\\">$a</span> \\"</span>           <span class=\\"token comment\\"># a = 2335</span>\\n<span class=\\"token builtin class-name\\">echo</span>                     <span class=\\"token comment\\"># 依旧是整数。</span>\\n\\n\\n<span class=\\"token assign-left variable\\">b</span><span class=\\"token operator\\">=</span><span class=\\"token variable\\">${a<span class=\\"token operator\\">/</span>23<span class=\\"token operator\\">/</span>BB}</span>             <span class=\\"token comment\\"># 将 \\"23\\" 替换为 \\"BB\\"。</span>\\n                         <span class=\\"token comment\\"># $b 变成了字符串。</span>\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token string\\">\\"b = <span class=\\"token variable\\">$b</span>\\"</span>            <span class=\\"token comment\\"># b = BB35</span>\\n<span class=\\"token builtin class-name\\">declare</span> <span class=\\"token parameter variable\\">-i</span> b             <span class=\\"token comment\\"># 将其声明为整数并没有什么卵用。</span>\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token string\\">\\"b = <span class=\\"token variable\\">$b</span>\\"</span>            <span class=\\"token comment\\"># b = BB35</span>\\n\\n<span class=\\"token builtin class-name\\">let</span> <span class=\\"token string\\">\\"b += 1\\"</span>             <span class=\\"token comment\\"># BB35 + 1</span>\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token string\\">\\"b = <span class=\\"token variable\\">$b</span>\\"</span>            <span class=\\"token comment\\"># b = 1</span>\\n<span class=\\"token builtin class-name\\">echo</span>                     <span class=\\"token comment\\"># Bash 认为字符串的\\"整数值\\"为0。</span>\\n\\n<span class=\\"token assign-left variable\\">c</span><span class=\\"token operator\\">=</span>BB34\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token string\\">\\"c = <span class=\\"token variable\\">$c</span>\\"</span>            <span class=\\"token comment\\"># c = BB34</span>\\n<span class=\\"token assign-left variable\\">d</span><span class=\\"token operator\\">=</span><span class=\\"token variable\\">${c<span class=\\"token operator\\">/</span>BB<span class=\\"token operator\\">/</span>23}</span>             <span class=\\"token comment\\"># 将 \\"BB\\" 替换为 \\"23\\"。</span>\\n                         <span class=\\"token comment\\"># $d 变为了一个整数。</span>\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token string\\">\\"d = <span class=\\"token variable\\">$d</span>\\"</span>            <span class=\\"token comment\\"># d = 2334</span>\\n<span class=\\"token builtin class-name\\">let</span> <span class=\\"token string\\">\\"d += 1\\"</span>             <span class=\\"token comment\\"># 2334 + 1</span>\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token string\\">\\"d = <span class=\\"token variable\\">$d</span>\\"</span>            <span class=\\"token comment\\"># d = 2335</span>\\n<span class=\\"token builtin class-name\\">echo</span>\\n\\n\\n<span class=\\"token comment\\"># 如果是空值会怎样呢？</span>\\n<span class=\\"token assign-left variable\\">e</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\'\'</span>                     <span class=\\"token comment\\"># ...也可以是 e=\\"\\" 或 e=</span>\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token string\\">\\"e = <span class=\\"token variable\\">$e</span>\\"</span>            <span class=\\"token comment\\"># e =</span>\\n<span class=\\"token builtin class-name\\">let</span> <span class=\\"token string\\">\\"e += 1\\"</span>             <span class=\\"token comment\\"># 空值是否允许进行算术运算？</span>\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token string\\">\\"e = <span class=\\"token variable\\">$e</span>\\"</span>            <span class=\\"token comment\\"># e = 1</span>\\n<span class=\\"token builtin class-name\\">echo</span>                     <span class=\\"token comment\\"># 空值变为了一个整数。</span>\\n\\n<span class=\\"token comment\\"># 如果时未声明的变量呢？</span>\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token string\\">\\"f = <span class=\\"token variable\\">$f</span>\\"</span>            <span class=\\"token comment\\"># f =</span>\\n<span class=\\"token builtin class-name\\">let</span> <span class=\\"token string\\">\\"f += 1\\"</span>             <span class=\\"token comment\\"># 是否允许进行算术运算？</span>\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token string\\">\\"f = <span class=\\"token variable\\">$f</span>\\"</span>            <span class=\\"token comment\\"># f = 1</span>\\n<span class=\\"token builtin class-name\\">echo</span>                     <span class=\\"token comment\\"># 未声明变量变为了一个整数。</span>\\n<span class=\\"token comment\\">#</span>\\n<span class=\\"token comment\\"># 然而……</span>\\n<span class=\\"token builtin class-name\\">let</span> <span class=\\"token string\\">\\"f /= <span class=\\"token variable\\">$undecl_var</span>\\"</span>   <span class=\\"token comment\\"># 可以除以0么？</span>\\n<span class=\\"token comment\\">#   let: f /= : syntax error: operand expected (error token is \\" \\")</span>\\n<span class=\\"token comment\\"># 语法错误！在这里 $undecl_var 并没有被设置为0！</span>\\n<span class=\\"token comment\\">#</span>\\n<span class=\\"token comment\\"># 但是，仍旧……</span>\\n<span class=\\"token builtin class-name\\">let</span> <span class=\\"token string\\">\\"f /= 0\\"</span>\\n<span class=\\"token comment\\">#   let: f /= 0: division by 0 (error token is \\"0\\")</span>\\n<span class=\\"token comment\\"># 预期之中。</span>\\n\\n\\n<span class=\\"token comment\\"># 在执行算术运算时，Bash 通常将其空值的整数值设为0。</span>\\n<span class=\\"token comment\\"># 但是不要做这种事情！</span>\\n<span class=\\"token comment\\"># 因为这可能会导致一些意外的后果。</span>\\n\\n\\n<span class=\\"token comment\\"># 结论：上面的结果都表明 Bash 中的变量是弱类型的。</span>\\n\\n<span class=\\"token builtin class-name\\">exit</span> <span class=\\"token variable\\">$?</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"LinuxStory"},"autoDesc":true}');export{s as data};
