const e=JSON.parse('{"key":"v-cfe8b6c8","path":"/cloudnative/","title":"云原生实践总结","lang":"zh-CN","frontmatter":{"isOriginal":true,"category":"云原生","tag":["Kubernetes"],"description":"云原生实践总结 👉 作为一名SRE，在运维云原生过程中的实践总结、沉淀，以便自己回顾和他人查阅，希望能帮助你在云原生领域的平稳落地。 企业落地云原生的目的 一句话概括：在保证稳定性的前提下，降本增效 目标拆解： 保障稳定性 建设高可用性：基础组件（Master三大件/Etcd等）高可用、多机房、多集群、Pod 高可用 持续进行风险治理：耦合度、故障发现、容量、容灾、变更及可运维性、安全性 建设可观测性：Metrics、Logging、Tracing、Events、Chaos、Dashboard、Inspection 故障演练：Apiserver 高可用故障演练、Etcd 高可用故障演练、双机房切换故障演练 预案建设：Etcd 备份恢复、Velero 备份恢复、Master 节点紧急扩容、Etcd 节点紧急扩容、多集群故障迁移 性能/容量评估：物理机性能压测、Master 组件性能压测、Etcd 性能压测、应用性能压测 节约成本 推进无状态应用容器化 推进无状态应用接入弹性伸缩 K8s 调度能力增强：预选、优选、重调度（使资源分配均匀、提高装箱率、提高资源使用率） 持续进行应用容量治理：横向缩容（降副本数）、纵向缩容（降规格 CPU/MEM） 建立资源画像：调度和容量治理依赖资源画像 提高效率（平台能力建设） 自动化运维平台（面向开发）：容器生命周期管理、Ingress 生命周期管理、HPA 生命周期管理、扩缩容&amp;升降配、容器资源预留、Java Dump &amp; GCLog、屏蔽/恢复告警 发布系统（面向开发）：Java/Nodejs/静态资源模版、自定义镜像、自定义模版、滚动发布、灰度发布、启动日志查看 堡垒机（面向开发）：Web 终端、文件管理、日志审计 SRE 平台（面向运维）：集群安装、集群扩缩容、集群升级、插件安装、Ingress 节点扩缩容、Web Kubectl、集群自动化巡检、多集群迁移 总结为下图，拿走不谢😏","head":[["meta",{"property":"og:url","content":"https://clay-wangzhi.com/cloudnative/"}],["meta",{"property":"og:site_name","content":"SRE运维进阶之路"}],["meta",{"property":"og:title","content":"云原生实践总结"}],["meta",{"property":"og:description","content":"云原生实践总结 👉 作为一名SRE，在运维云原生过程中的实践总结、沉淀，以便自己回顾和他人查阅，希望能帮助你在云原生领域的平稳落地。 企业落地云原生的目的 一句话概括：在保证稳定性的前提下，降本增效 目标拆解： 保障稳定性 建设高可用性：基础组件（Master三大件/Etcd等）高可用、多机房、多集群、Pod 高可用 持续进行风险治理：耦合度、故障发现、容量、容灾、变更及可运维性、安全性 建设可观测性：Metrics、Logging、Tracing、Events、Chaos、Dashboard、Inspection 故障演练：Apiserver 高可用故障演练、Etcd 高可用故障演练、双机房切换故障演练 预案建设：Etcd 备份恢复、Velero 备份恢复、Master 节点紧急扩容、Etcd 节点紧急扩容、多集群故障迁移 性能/容量评估：物理机性能压测、Master 组件性能压测、Etcd 性能压测、应用性能压测 节约成本 推进无状态应用容器化 推进无状态应用接入弹性伸缩 K8s 调度能力增强：预选、优选、重调度（使资源分配均匀、提高装箱率、提高资源使用率） 持续进行应用容量治理：横向缩容（降副本数）、纵向缩容（降规格 CPU/MEM） 建立资源画像：调度和容量治理依赖资源画像 提高效率（平台能力建设） 自动化运维平台（面向开发）：容器生命周期管理、Ingress 生命周期管理、HPA 生命周期管理、扩缩容&amp;升降配、容器资源预留、Java Dump &amp; GCLog、屏蔽/恢复告警 发布系统（面向开发）：Java/Nodejs/静态资源模版、自定义镜像、自定义模版、滚动发布、灰度发布、启动日志查看 堡垒机（面向开发）：Web 终端、文件管理、日志审计 SRE 平台（面向运维）：集群安装、集群扩缩容、集群升级、插件安装、Ingress 节点扩缩容、Web Kubectl、集群自动化巡检、多集群迁移 总结为下图，拿走不谢😏"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-13T12:49:57.000Z"}],["meta",{"property":"article:author","content":"Clay"}],["meta",{"property":"article:tag","content":"Kubernetes"}],["meta",{"property":"article:modified_time","content":"2024-03-13T12:49:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"云原生实践总结\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-13T12:49:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Clay\\",\\"url\\":\\"https://clay-wangzhi.com\\"}]}"]]},"headers":[{"level":2,"title":"企业落地云原生的目的","slug":"企业落地云原生的目的","link":"#企业落地云原生的目的","children":[]},{"level":2,"title":"实践中使用到的 CNCF LANDSCAPE 项目","slug":"实践中使用到的-cncf-landscape-项目","link":"#实践中使用到的-cncf-landscape-项目","children":[]},{"level":2,"title":"实践中遇到的问题&故障","slug":"实践中遇到的问题-故障","link":"#实践中遇到的问题-故障","children":[]},{"level":2,"title":"文章更新预告","slug":"文章更新预告","link":"#文章更新预告","children":[]}],"git":{"createdTime":1704636948000,"updatedTime":1710334197000,"contributors":[{"name":"clay-wangzhi","email":"clay.wangzhi@gmail.com","commits":4}]},"readingTime":{"minutes":4.74,"words":1423},"filePathRelative":"cloudnative/readme.md","localizedDate":"2024年1月7日","excerpt":"<h1> 云原生实践总结</h1>\\n<blockquote>\\n<p>👉 作为一名SRE，在运维云原生过程中的实践总结、沉淀，以便自己回顾和他人查阅，希望能帮助你在云原生领域的平稳落地。</p>\\n</blockquote>\\n<h2> 企业落地云原生的目的</h2>\\n<p>一句话概括：<strong>在保证稳定性的前提下，降本增效</strong></p>\\n<p>目标拆解：</p>\\n<ul>\\n<li>\\n<p>保障稳定性</p>\\n<ul>\\n<li>建设高可用性：基础组件（Master三大件/Etcd等）高可用、多机房、多集群、Pod 高可用</li>\\n<li>持续进行风险治理：耦合度、故障发现、容量、容灾、变更及可运维性、安全性</li>\\n<li>建设可观测性：Metrics、Logging、Tracing、Events、Chaos、Dashboard、Inspection</li>\\n<li>故障演练：Apiserver 高可用故障演练、Etcd 高可用故障演练、双机房切换故障演练</li>\\n<li>预案建设：Etcd 备份恢复、Velero 备份恢复、Master 节点紧急扩容、Etcd 节点紧急扩容、多集群故障迁移</li>\\n<li>性能/容量评估：物理机性能压测、Master 组件性能压测、Etcd 性能压测、应用性能压测</li>\\n</ul>\\n</li>\\n<li>\\n<p>节约成本</p>\\n<ul>\\n<li>推进无状态应用容器化</li>\\n<li>推进无状态应用接入弹性伸缩</li>\\n<li>K8s 调度能力增强：预选、优选、重调度（使资源分配均匀、提高装箱率、提高资源使用率）</li>\\n<li>持续进行应用容量治理：横向缩容（降副本数）、纵向缩容（降规格 CPU/MEM）</li>\\n<li>建立资源画像：调度和容量治理依赖资源画像</li>\\n</ul>\\n</li>\\n<li>\\n<p>提高效率（平台能力建设）</p>\\n<ul>\\n<li>自动化运维平台（面向开发）：容器生命周期管理、Ingress 生命周期管理、HPA 生命周期管理、扩缩容&amp;升降配、容器资源预留、Java Dump &amp; GCLog、屏蔽/恢复告警</li>\\n<li>发布系统（面向开发）：Java/Nodejs/静态资源模版、自定义镜像、自定义模版、滚动发布、灰度发布、启动日志查看</li>\\n<li>堡垒机（面向开发）：Web 终端、文件管理、日志审计</li>\\n<li>SRE 平台（面向运维）：集群安装、集群扩缩容、集群升级、插件安装、Ingress 节点扩缩容、Web Kubectl、集群自动化巡检、多集群迁移</li>\\n</ul>\\n<p>总结为下图，拿走不谢😏</p>\\n<p><img src=\\"https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/sre-k8s (2).png\\" alt=\\"sre-k8s (2)\\"></p>\\n</li>\\n</ul>","copyright":{"author":"Clay"},"autoDesc":true}');export{e as data};
