import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as t,a as i}from"./app-679550bc.js";const n={},o=i(`<h1 id="生产环境中的tomcat配置" tabindex="-1"><a class="header-anchor" href="#生产环境中的tomcat配置" aria-hidden="true">#</a> 生产环境中的tomcat配置</h1><h2 id="tomcat安全配置" tabindex="-1"><a class="header-anchor" href="#tomcat安全配置" aria-hidden="true">#</a> tomcat安全配置</h2><h3 id="版本安全" tabindex="-1"><a class="header-anchor" href="#版本安全" aria-hidden="true">#</a> 版本安全</h3><p>升级当前tomcat版本为最新稳定版本。</p><p>在升级版本中，需要注意两点：</p><ul><li><p>尽量避免跨大版本的升级</p></li><li><p>将当前老版本的server.xml , catalina.sh, web.xml和tomcat-users.xml进行备份，然后部署完新的tomcat</p><p>后，将这些配置文件覆盖过去。</p></li></ul><h3 id="隐藏版本信息" tabindex="-1"><a class="header-anchor" href="#隐藏版本信息" aria-hidden="true">#</a> 隐藏版本信息</h3><p>当tomcat出现404或其它错误时，就会显示当前版本信息，为避免针对某一版本的攻击，我们应该将其隐藏或伪装</p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/883007-20170309115431516-1104120437.png" alt="image"></p><p>版本信息的显示是由一个jar包控制的，该jar包存放在tomcat安装目录下的lib目录下，名称为catalina.jar.</p><ol><li>通过jar xf命令解压这个jar包会得到两个目录META-INF和org, 通过修改</li></ol><p><code>org/apache/catalina/util/ServerInfo.properties</code>文件中的<code>serverinfo</code>字段来实现更改tomcat版本信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@localhost ~]# cat org/apache/catalina/util/SererInfo.properties | grep -v &#39;^$|#&#39;
server.info=Apache Tomcat/7.0.53
server.number=7.0.53.0
serer.built=Mar 25 2014 06:20:16
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>当然还有另外一种方法来隐藏或伪装版本信息，这两种方法本质是一样的：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@localhost ~]# cd /usr/local/apache-tomcat-7.0.53/lib
[root@localhost lib]# mkdir -p org/apache/catalina/util
[root@localhost lib]# cd org/apache/catalina/util
[root@localhost util]# vim ServerInfo.properties
server.info=nolinux        # 如果想修改成其它版本号，把这个地方的值改成其它值就行了
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改完成之后，重启tomcat即可看到效果！</p><h2 id="tomcat的配置优化" tabindex="-1"><a class="header-anchor" href="#tomcat的配置优化" aria-hidden="true">#</a> tomcat的配置优化</h2><h3 id="优化web-xml" tabindex="-1"><a class="header-anchor" href="#优化web-xml" aria-hidden="true">#</a> 优化web.xml</h3><p>servlet与其它适用于整个Web应用程序设置的配置文件，必须符合servlet规范的标准格式。通过它可以配置你</p><p>web应用的相关选项，tomcat在启动的时候会读取这个文件，完成你开发的系统的一些初始化操作。</p><p>它可以做如下事情：</p><ul><li>提供基于servlet的相关配置</li><li>增加监听器，监控session或在tomcat启动时，加载一些你希望加载的资源。比如创建数据库连接池等</li><li>设置session过期时间，tomcat默认是30分钟</li><li>更改应用的默认页面，通常为index.html/index.jsp等</li><li>增加过滤器， 做一些你希望的过滤操作，比如敏感词汇的过滤</li><li>增加一些jstl（标准标签库）的定义，方便在jsp中直接include进来</li><li>struts, spring或hibernate的一些配置等</li></ul><p>由于在生产环境中，tomcat不会直接对公网提供服务，前端肯定有apache或nginx，因此，默认主页或自定义错</p><p>误页，我们都在前端的apache或nginx中完成；另外也有可能是由程序员在项目内的WEB-INF/web.xml中去做定</p><p>义。</p><p>在tomcat新版本中，默认已经禁止列目录功能。</p><p>下面是几种觉的功能，在web.xml中的表现形式：</p><p><strong>站点默认主页：</strong></p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/883007-20170309115432875-139916481.png" alt="image"></p><p><strong>自定义错误页：</strong></p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/883007-20170309115433984-443260669.png" alt="image"></p><p><strong>定义会话超时时间：</strong></p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/883007-20170309115435516-1709051054.png" alt="image"></p><p><strong>禁止列目录：</strong></p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/883007-20170309115437047-1295899737.png" alt="image"></p><h3 id="优化-tomcat-user-xml" tabindex="-1"><a class="header-anchor" href="#优化-tomcat-user-xml" aria-hidden="true">#</a> 优化 tomcat-user.xml</h3><p>该文件中包含用户名，角色及密码。 负责提供webapps下manager项目的登录认证管理。</p><p>在生产环境中，我们需要将该文件全部注释。</p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/883007-20170309115438797-1710834528.png" alt="image"></p><h3 id="优化server-xml" tabindex="-1"><a class="header-anchor" href="#优化server-xml" aria-hidden="true">#</a> 优化server.xml</h3><ul><li><p>maxThreads连接数限制：</p><p>maxThreads是tomcat所能接受的最大连接数。 一般设置不要超过8000， 如果你的网站访问量非常大可使用</p><p>多个tomcat实例的方法，即在一个服务器上启动多个tomcat，然后做负载均衡。</p></li><li><p>tomcat和php不同，php可以按照cpu和内存的情况去配置连接数，所以上万很正常。 但java还需要注意jvm</p></li><li><p>的参数配置。如果不注意就会因为jvm参数过小而崩溃。</p></li><li><p>不要多个虚拟主机：</p><p>强烈建议不要使用tomcat的虚拟主机功能，推荐一个tomcat实例启动一个站点。即，可以启动多个tomcat，而不是一个tomcat里包含多个虚拟主机。 因为tomcat是多线程，共享内存，任何一个虚拟主机中的应用崩溃，都会影响到所有的应用程序。</p></li><li><p>压缩传输：</p><p>tomcat也支持gzip压缩功能。 可以在server.xml配置文件中的Connector节点中配置如下参数，来实现对指定资源类型进行压缩。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>compression=&quot;on&quot;             # 打开压缩功能 
compressionMinSize=&quot;50&quot;      # 启用压缩的输出内容大小，默认为2KB 
noCompressionUserAgents=&quot;gozilla, traviata&quot;      # 对于以下的浏览器，不启用压缩 
compressableMimeType=&quot;text/html,text/xml,text/javascript,text/css,text/plain&quot;　# 哪些资源类型需要压缩
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意的是，对于文本信息比如txt, html, css,javascript进行压缩，效果非常好。而对文件，图片，视频不要压缩。</p></li><li><p>Connector 连接器的配置</p><p>bio、nio 和 apr，三种方式性能差别很大，apr 的性能最优， bio 的性能最差。而 Tomcat 7 使用的 Connector 默认就启用的 Apr 协议，但需要系统安装 Apr 库，否则就会使用 bio 方式。</p></li></ul><p>配置文件样例，connector连接器设置为bio</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>   &lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot;
        maxThreads=&quot;2000&quot; minSpareThreads=&quot;4&quot;/&gt;
        
    &lt;Connector executor=&quot;tomcatThreadPool&quot;
         port=&quot;8080&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot; 
               connectionTimeout=&quot;20000&quot; 
               redirectPort=&quot;8443&quot;
         	   maxHeaderCount=&quot;64&quot;  
               maxParameterCount=&quot;64&quot;  
               maxHttpHeaderSize=&quot;8192&quot;  
               URIEncoding=&quot;UTF-8&quot;  
               useBodyEncodingForURI=&quot;false&quot;  
               maxThreads=&quot;2048&quot;  
               minSpareThreads=&quot;12&quot;  
               acceptCount=&quot;2048&quot;  
               connectionLinger=&quot;-1&quot;  
               keepAliveTimeout=&quot;60&quot;  
               maxKeepAliveRequests=&quot;32&quot;  
               maxConnections=&quot;1000&quot;  
               acceptorThreadCount=&quot;1&quot;  
               pollerThreadCount=&quot;2&quot;  
               selectorTimeout=&quot;1000&quot;  
               enableLookups=&quot;false&quot;
               useSendfile=&quot;true&quot;  
               selectorPool.maxSelectors=&quot;128&quot;  /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="管理ajp端口" tabindex="-1"><a class="header-anchor" href="#管理ajp端口" aria-hidden="true">#</a> 管理AJP端口</h3><p>AJP是为tomcat与HTTP服务器之间通信而定制的协议，能提供较高的通信速度和效率。如果前端是apache的话，</p><p>会使用到AJP这个连接器，如果是nginx，就用不上了，因此需要注销掉：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!--
    &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;
--&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更改关闭tomcat实例的指令" tabindex="-1"><a class="header-anchor" href="#更改关闭tomcat实例的指令" aria-hidden="true">#</a> 更改关闭tomcat实例的指令</h3><p>server.xml中定义了可以直接关闭tomcat实例的管理端口。 我们通过 telnet连接上该端口之后，输入shutdown</p><p>即可关闭。值得注意的是，虽然实例关闭了，但是进程还是存在的。由于默认的端口和指令都很简单，默认端口是</p><p>8005， 指令为SHUTDOWN. 因此我们要改得复杂一点（当然，新版本的tomcat管理端口监听在127.0.0.1）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;Server port=&quot;8005&quot; shutdown=&quot;9SDKJ29jksjf23sjf0LSDF92JKS9DKkjsd&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="更改tomcat服务监听端口" tabindex="-1"><a class="header-anchor" href="#更改tomcat服务监听端口" aria-hidden="true">#</a> 更改tomcat服务监听端口</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;Connector port=&quot;8080&quot; address=&quot;172.16.100.1&quot; /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="关闭war自动部署" tabindex="-1"><a class="header-anchor" href="#关闭war自动部署" aria-hidden="true">#</a> 关闭war自动部署</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;Host name=&quot;localhost&quot;  appBase=&quot;&quot;
      unpackWARs=&quot;false&quot; autoDeploy=&quot;false&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="禁用tomcat管理页面" tabindex="-1"><a class="header-anchor" href="#禁用tomcat管理页面" aria-hidden="true">#</a> 禁用tomcat管理页面</h3><p>删除webapps目录下的所有文件，还涉及到管理页面的2个配置文件host-manager.xml和manager.xml也要删</p><p>除，这两个文件在tomcat安装 目录下的conf/Catalina/localhost目录下。</p><h3 id="使用普通用户启动tomcat" tabindex="-1"><a class="header-anchor" href="#使用普通用户启动tomcat" aria-hidden="true">#</a> 使用普通用户启动tomcat</h3><p>在启动之前需要将tomcat安装目录下所有文件的属主和属组都设置为指定的用户。</p><h2 id="tomcat生产服务器性能优化" tabindex="-1"><a class="header-anchor" href="#tomcat生产服务器性能优化" aria-hidden="true">#</a> tomcat生产服务器性能优化</h2><h3 id="tomcat内存优化" tabindex="-1"><a class="header-anchor" href="#tomcat内存优化" aria-hidden="true">#</a> tomcat内存优化</h3><p>tomcat内存优化主要是对tomcat启动参数优化，我们可以在tomcat启动脚本catalina.sh中设置JAVA——OPTS参</p><p>数。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>JAVA_OPTS=&#39;-server -Xms2048m -Xmx2048m -XX:PermSize=256M -XX:MaxNewSize=256m -XX:MaxPermSize=256m&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-server  启用jdk 的 server 版；  
-Xms    java虚拟机初始化时的最小内存；  
-Xmx   java虚拟机可使用的最大内存；  
-XX:PermSize    内存永久保留区域  
-XX:MaxPermSize   内存最大永久保留区域
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>-Xmx 默认为物理内存的1/4， 实际建议不大于4GB；一般建议设置-Xms = -Xmx</p><p>-server 一定要作为第一个参数，在多个cpu时性能 佳</p><p>-Xms 初始heap大小，使用的最小内存，cpu性能 高时可以设置的大一些</p><blockquote><p>参考链接:</p><p>https://www.cnblogs.com/huangxm/p/6524968.html</p><p>https://blog.csdn.net/ljj_9/article/details/79145324</p><p>https://blog.csdn.net/loyachen/article/details/47280237</p></blockquote>`,72),r=[o];function l(s,d){return a(),t("div",null,r)}const u=e(n,[["render",l],["__file","prd.html.vue"]]);export{u as default};
