const e=JSON.parse(`{"key":"v-0698c03c","path":"/code/shell/part2/08_3_the_double_parentheses_construct.html","title":"8.3 双圆括号结构","lang":"zh-CN","frontmatter":{"author":"LinuxStory","category":"Linux","tag":["Bash"],"description":"8.3 双圆括号结构 与let命令类似，(( ... )) 结构允许对算术表达式的扩展和求值。它是let命令的简化形式。例如，a=$(( 5 + 3 )) 会将变量a赋值成 5 + 3，也就是8。在Bash中，双圆括号结构也允许以C风格的方式操作变量。例如，(( var++ ))。 样例 8-5. 以C风格的方式操作变量 #!/bin/bash # c-vars.sh # 以C风格的方式操作变量，使用(( ... ))结构 echo (( a = 23 )) # C风格的变量赋值，注意\\"=\\"等号前后都有空格 echo \\"a (initial value) = $a\\" # 23 (( a++ )) # 后缀自增'a'，C-style. echo \\"a (after a++) = $a\\" # 24 (( a-- )) # 后缀自减'a', C-style. echo \\"a (after a--) = $a\\" # 23 (( ++a )) # 前缀自增'a', C-style. echo \\"a (after ++a) = $a\\" # 24 (( --a )) # 前缀自减'a', C-style. echo \\"a (after --a) = $a\\" # 23 echo ######################################################## # 注意，C风格的++，--运算符，前缀形式与后缀形式有不同的 #+ 副作用。 n=1; let --n &amp;&amp; echo \\"True\\" || echo \\"False\\" # False n=1; let n-- &amp;&amp; echo \\"True\\" || echo \\"False\\" # True # 感谢 Jeroen Domburg。 ######################################################## echo (( t = a&lt;45?7:11 )) # C风格三目运算符。 # ^ ^ ^ echo \\"If a &lt; 45, then t = 7, else t = 11.\\" # a = 23 echo \\"t = $t \\" # t = 7 echo # ----------- # 复活节彩蛋! # ----------- # Chet Ramey 偷偷往Bash里加入了C风格的语句结构， # 还没写文档说明 (实际上很多是从ksh中继承过来的)。 # 在Bash 文档中，Ramey把 (( ... ))结构称为shell 算术运算， # 但是这种表述并不准确... # 抱歉啊，Chet，把你的秘密抖出来了。 # 参看 \\"for\\" 和 \\"while\\" 循环章节关于 (( ... )) 结构的部分。 # (( ... )) 结构在Bash 2.04版本之后才能正常工作。 exit","head":[["meta",{"property":"og:url","content":"https://clay-wangzhi.com/code/shell/part2/08_3_the_double_parentheses_construct.html"}],["meta",{"property":"og:site_name","content":"SRE运维进阶之路"}],["meta",{"property":"og:title","content":"8.3 双圆括号结构"}],["meta",{"property":"og:description","content":"8.3 双圆括号结构 与let命令类似，(( ... )) 结构允许对算术表达式的扩展和求值。它是let命令的简化形式。例如，a=$(( 5 + 3 )) 会将变量a赋值成 5 + 3，也就是8。在Bash中，双圆括号结构也允许以C风格的方式操作变量。例如，(( var++ ))。 样例 8-5. 以C风格的方式操作变量 #!/bin/bash # c-vars.sh # 以C风格的方式操作变量，使用(( ... ))结构 echo (( a = 23 )) # C风格的变量赋值，注意\\"=\\"等号前后都有空格 echo \\"a (initial value) = $a\\" # 23 (( a++ )) # 后缀自增'a'，C-style. echo \\"a (after a++) = $a\\" # 24 (( a-- )) # 后缀自减'a', C-style. echo \\"a (after a--) = $a\\" # 23 (( ++a )) # 前缀自增'a', C-style. echo \\"a (after ++a) = $a\\" # 24 (( --a )) # 前缀自减'a', C-style. echo \\"a (after --a) = $a\\" # 23 echo ######################################################## # 注意，C风格的++，--运算符，前缀形式与后缀形式有不同的 #+ 副作用。 n=1; let --n &amp;&amp; echo \\"True\\" || echo \\"False\\" # False n=1; let n-- &amp;&amp; echo \\"True\\" || echo \\"False\\" # True # 感谢 Jeroen Domburg。 ######################################################## echo (( t = a&lt;45?7:11 )) # C风格三目运算符。 # ^ ^ ^ echo \\"If a &lt; 45, then t = 7, else t = 11.\\" # a = 23 echo \\"t = $t \\" # t = 7 echo # ----------- # 复活节彩蛋! # ----------- # Chet Ramey 偷偷往Bash里加入了C风格的语句结构， # 还没写文档说明 (实际上很多是从ksh中继承过来的)。 # 在Bash 文档中，Ramey把 (( ... ))结构称为shell 算术运算， # 但是这种表述并不准确... # 抱歉啊，Chet，把你的秘密抖出来了。 # 参看 \\"for\\" 和 \\"while\\" 循环章节关于 (( ... )) 结构的部分。 # (( ... )) 结构在Bash 2.04版本之后才能正常工作。 exit"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-19T13:08:31.000Z"}],["meta",{"property":"article:author","content":"LinuxStory"}],["meta",{"property":"article:tag","content":"Bash"}],["meta",{"property":"article:modified_time","content":"2023-04-19T13:08:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8.3 双圆括号结构\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-19T13:08:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LinuxStory\\"}]}"]]},"headers":[],"git":{"createdTime":1681909711000,"updatedTime":1681909711000,"contributors":[{"name":"clay-wangzhi","email":"clay.wangzhi@gmail.com","commits":1}]},"readingTime":{"minutes":1.4,"words":421},"filePathRelative":"code/shell/part2/08_3_the_double_parentheses_construct.md","localizedDate":"2023年4月19日","excerpt":"<h1> 8.3 双圆括号结构</h1>\\n<p>与<code>let</code>命令类似，<code>(( ... ))</code> 结构允许对算术表达式的扩展和求值。它是<code>let</code>命令的简化形式。例如，a=$(( 5 + 3 )) 会将变量a赋值成 5 + 3，也就是8。在Bash中，双圆括号结构也允许以C风格的方式操作变量。例如，(( var++ ))。</p>\\n<p><strong>样例 8-5. 以C风格的方式操作变量</strong></p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>#!/bin/bash\\n# c-vars.sh\\n# 以C风格的方式操作变量，使用(( ... ))结构\\n\\n\\necho\\n\\n(( a = 23 ))  #  C风格的变量赋值，注意\\"=\\"等号前后都有空格\\n\\necho \\"a (initial value) = $a\\"   # 23\\n\\n(( a++ ))     #  后缀自增'a'，C-style.\\necho \\"a (after a++) = $a\\"       # 24\\n\\n(( a-- ))     #  后缀自减'a', C-style.\\necho \\"a (after a--) = $a\\"       # 23\\n\\n\\n(( ++a ))     #  前缀自增'a', C-style.\\necho \\"a (after ++a) = $a\\"       # 24\\n\\n(( --a ))     #  前缀自减'a', C-style.\\necho \\"a (after --a) = $a\\"       # 23\\n\\necho\\n\\n########################################################\\n#  注意，C风格的++，--运算符，前缀形式与后缀形式有不同的\\n#+ 副作用。\\n\\nn=1; let --n &amp;&amp; echo \\"True\\" || echo \\"False\\"  # False\\nn=1; let n-- &amp;&amp; echo \\"True\\" || echo \\"False\\"  # True\\n\\n#  感谢 Jeroen Domburg。\\n########################################################\\n\\necho\\n\\n(( t = a&lt;45?7:11 ))   # C风格三目运算符。\\n#       ^  ^ ^\\necho \\"If a &lt; 45, then t = 7, else t = 11.\\"  # a = 23\\necho \\"t = $t \\"                              # t = 7\\n\\necho\\n\\n\\n# -----------\\n# 复活节彩蛋!\\n# -----------\\n#  Chet Ramey 偷偷往Bash里加入了C风格的语句结构，\\n#  还没写文档说明 (实际上很多是从ksh中继承过来的)。\\n#  在Bash 文档中，Ramey把 (( ... ))结构称为shell 算术运算，\\n#  但是这种表述并不准确...\\n#  抱歉啊，Chet，把你的秘密抖出来了。\\n\\n#  参看 \\"for\\" 和 \\"while\\" 循环章节关于 (( ... )) 结构的部分。\\n\\n#  (( ... )) 结构在Bash 2.04版本之后才能正常工作。\\n\\nexit\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"LinuxStory"},"autoDesc":true}`);export{e as data};
