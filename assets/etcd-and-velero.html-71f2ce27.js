import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,e}from"./app-3644928f.js";const t={},p=e(`<h1 id="k8s-无备份-不运维" tabindex="-1"><a class="header-anchor" href="#k8s-无备份-不运维" aria-hidden="true">#</a> K8s 无备份，不运维</h1><p>出故障时，就知道是谁在裸泳 🙃</p><p>K8s 投产使用，备份是保命手段，必须要上，建议做一个 checklist，巡检通过，集群才能对外提供服务，比如，这样👇</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240320195757171.png" alt="image-20240320195757171"></p><h2 id="备份方案制定" tabindex="-1"><a class="header-anchor" href="#备份方案制定" aria-hidden="true">#</a> 备份方案制定</h2><ol><li>物理备份：etcd 备份，保存某一个时刻的快照，快捷方便。</li><li>逻辑备份：velero 备份 ，允许用户自己选择备份的内容，比如单个 namespace、指定资源类型等。</li></ol><p>物理备份的优点是速度快，无论是备份还是回恢复，但缺点是元数据不可读，只能全部恢复。而逻辑备份正好相反，因此两者可以结合使用，既能快，又能有细粒度控制的能力。</p><h2 id="etcd-备份" tabindex="-1"><a class="header-anchor" href="#etcd-备份" aria-hidden="true">#</a> Etcd 备份</h2><p>1、创建备份脚本<code>/opt/etcd_backup.sh</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env bash</span>
<span class="token comment">#</span>
<span class="token comment"># Etcd backup</span>
 
<span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>
 
<span class="token assign-left variable">ETCD_CA_CERT</span><span class="token operator">=</span><span class="token string">&quot;/etc/kubernetes/pki/etcd/ca.crt&quot;</span>
<span class="token assign-left variable">ETCD_CERT</span><span class="token operator">=</span><span class="token string">&quot;/etc/kubernetes/pki/etcd/server.crt&quot;</span>
<span class="token assign-left variable">ETCD_KEY</span><span class="token operator">=</span><span class="token string">&quot;/etc/kubernetes/pki/etcd/server.key&quot;</span>
<span class="token assign-left variable">BACKUP_DIR</span><span class="token operator">=</span><span class="token string">&quot;/var/lib/docker/etcd_backup&quot;</span>
<span class="token assign-left variable">DT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y%m%d.%H%M%S<span class="token variable">)</span></span>
 
<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token variable">\${BACKUP_DIR}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">\${BACKUP_DIR}</span>
<span class="token function">find</span> <span class="token variable">\${BACKUP_DIR}</span> <span class="token parameter variable">-name</span> <span class="token string">&quot;*.db&quot;</span> <span class="token parameter variable">-mtime</span> +7 <span class="token parameter variable">-exec</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">\\</span><span class="token punctuation">;</span>
 
<span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span> /usr/local/bin/etcdctl <span class="token parameter variable">--endpoints</span><span class="token operator">=</span>https://127.0.0.1:2379 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--cacert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CA_CERT}</span>&quot;</span> <span class="token parameter variable">--cert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CERT}</span>&quot;</span> <span class="token parameter variable">--key</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_KEY}</span>&quot;</span> <span class="token punctuation">\\</span>
  snapshot save <span class="token string">&quot;<span class="token variable">\${BACKUP_DIR}</span>/etcd-snapshot-<span class="token variable">\${DT}</span>.db&quot;</span>
 
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Etcd backup success, backup file: <span class="token variable">\${BACKUP_DIR}</span>/etcd-snapshot-<span class="token variable">\${DT}</span>.db, \\
  file size: <span class="token variable"><span class="token variable">$(</span><span class="token function">du</span> <span class="token parameter variable">-sh</span> $<span class="token punctuation">{</span>BACKUP_DIR<span class="token punctuation">}</span>/etcd-snapshot-$<span class="token punctuation">{</span>DT<span class="token punctuation">}</span>.db <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">&#39;{print $1}&#39;</span><span class="token variable">)</span></span>&quot;</span>
<span class="token builtin class-name">echo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、添加cron定时任务 <code>crontab -e</code></p><blockquote><p>只需要备份一个etcd就行，恢复时，拿同一份备份数据恢复</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">0</span> */1 * * * /bin/bash /opt/etcd_backup.sh <span class="token operator">&gt;&gt;</span>/opt/log-backup-etcd.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="velero-备份" tabindex="-1"><a class="header-anchor" href="#velero-备份" aria-hidden="true">#</a> velero 备份</h2><p>1、安装配置 velero</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 下载版本：https://github.com/vmware-tanzu/velero/releases 最新稳定版，注意k8s版本兼容性，1.8.1版本要求k8s版本至少1.16</span>
<span class="token function">wget</span> https://github.com/vmware-tanzu/velero/releases/download/v1.8.1/velero-v1.8.1-linux-amd64.tar.gz
<span class="token comment"># 解压</span>
<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> velero-v1.8.1-linux-amd64.tar.gz
<span class="token comment"># 加入环境变量</span>
<span class="token function">cp</span> velero-v1.8.1-linux-amd64/velero /usr/bin/
<span class="token comment"># 设置补全命令</span>
velero completion <span class="token function">bash</span> <span class="token operator">&gt;</span> /etc/bash_completion.d/velero.sh
<span class="token builtin class-name">source</span> /etc/bash_completion.d/velero.sh
<span class="token comment"># 创建凭证文件 cat credentials-velero</span>
<span class="token assign-left variable">aws_access_key_id</span><span class="token operator">=</span>xxx
<span class="token assign-left variable">aws_secret_access_key</span><span class="token operator">=</span>xxx
<span class="token comment"># 安装</span>
velero <span class="token function">install</span>  <span class="token parameter variable">--provider</span> aws <span class="token parameter variable">--plugins</span> velero/velero-plugin-for-aws:v1.1.0 <span class="token parameter variable">--bucket</span>  velero-xxx --secret-file ./credentials-velero --use-volume-snapshots<span class="token operator">=</span>false --use-restic --default-volumes-to-restic --backup-location-config <span class="token assign-left variable">region</span><span class="token operator">=</span>ap-shanghai,s3ForcePathStyle<span class="token operator">=</span><span class="token string">&quot;true&quot;</span>,s3Url<span class="token operator">=</span>https://cos.ap-shanghai.myqcloud.com --restic-pod-cpu-request<span class="token operator">=</span>1000m --restic-pod-cpu-limit<span class="token operator">=</span>2000m --restic-pod-mem-request<span class="token operator">=</span>1024Mi --restic-pod-mem-limit<span class="token operator">=</span>4096Mi  --velero-pod-cpu-request<span class="token operator">=</span>1000m --velero-pod-cpu-limit<span class="token operator">=</span>2000m --velero-pod-mem-request<span class="token operator">=</span>1024Mi --velero-pod-mem-limit<span class="token operator">=</span>4096Mi
<span class="token comment"># 查看配置的存储位置是否可用</span>
velero backup-location get
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、根据实际情况备份指定 namespace 或 指定资源类型</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>velero create schedule xxx <span class="token parameter variable">--schedule</span><span class="token operator">=</span><span class="token string">&quot;0 1 * * *&quot;</span> --include-namespaces<span class="token operator">=</span>prod --snapshot-volumes<span class="token operator">=</span>false --default-volumes-to-restic<span class="token operator">=</span>false <span class="token parameter variable">--ttl</span><span class="token operator">=</span>168h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="etcd-恢复" tabindex="-1"><a class="header-anchor" href="#etcd-恢复" aria-hidden="true">#</a> Etcd 恢复</h2><p>1、创建备份目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/k8s_manifests_backup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、停止所有 Master 上 kube-apiserver 服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> /etc/kubernetes/manifests/kube-apiserver.yaml /opt/k8s_manifests_backup/
<span class="token comment"># 检查服务是否已停止</span>
kubectl get pod <span class="token parameter variable">-n</span> kube-system <span class="token operator">|</span> <span class="token function">grep</span> kube-apiserver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、停止集群中所有 etcd 服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 记录 etcd --name、--initial-advertise-peer-urls、--data-dir 值</span>
<span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> etcd
<span class="token comment"># 停止服务</span>
<span class="token function">mv</span> /etc/kubernetes/manifests/etcd.yaml /opt/k8s_manifests_backup/
<span class="token comment"># 检查服务是否已停止</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> etcd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、移除所有 etcd 存储目录下数据，不同环境下，存储目录可能不一样，样例存储目录为 <code>/data/etcd</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> /data/etcd<span class="token punctuation">{</span>,.bak<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5、拷贝要恢复的快照到所有 etcd 节点，进行快照恢复 所有 etcd 节点操作，不同节点，传入不同的 <code>--name、--initial-advertise-peer-urls、--data-dir</code>值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span> /usr/local/bin/etcdctl snapshot restore /tmp/xxx.db <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span> hostname1 <span class="token punctuation">\\</span>
  --initial-cluster <span class="token string">&quot;hostname1=https://ip1:2380,hostname2=https://ip2:2380,hostname3=https://ip3:2380&quot;</span> <span class="token punctuation">\\</span>
  --initial-cluster-token k8s_etcd <span class="token punctuation">\\</span>
  --initial-advertise-peer-urls https://ip1:2380 <span class="token punctuation">\\</span>
  --data-dir<span class="token operator">=</span>/data/etcd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、启动集群中所有 etcd</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> /opt/k8s_manifests_backup/etcd.yaml /etc/kubernetes/manifests/
<span class="token comment"># 检查集群状态</span>
<span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span> /usr/local/bin/etcdctl  <span class="token parameter variable">--cacert</span><span class="token operator">=</span>/etc/kubernetes/pki/etcd/ca.crt <span class="token punctuation">\\</span>
  <span class="token parameter variable">--cert</span><span class="token operator">=</span>/etc/kubernetes/pki/etcd/server.crt <span class="token punctuation">\\</span>
  <span class="token parameter variable">--key</span><span class="token operator">=</span>/etc/kubernetes/pki/etcd/server.key <span class="token punctuation">\\</span>
  <span class="token parameter variable">--endpoints</span><span class="token operator">=</span>https://ip1:2379,https://ip2:2379,https://ip3:2379 <span class="token punctuation">\\</span>
  endpoint health
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>7、启动所有 Master 上 kube-apiserver 服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> /opt/k8s_manifests_backup/kube-apiserver.yaml /etc/kubernetes/manifests/
<span class="token comment"># 检查服务状态</span>
kubectl get pod <span class="token parameter variable">-n</span> kube-system <span class="token operator">|</span> <span class="token function">grep</span> kube-apiserver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>8、检查是否如期恢复</p><p><strong>总结</strong></p><p>Kubernetes 集群备份主要是备份etcd集群。而恢复时，主要考虑恢复整个顺序：</p><p>停止Kube-apiserver --&gt; 停止etcd --&gt; 恢复数据 --&gt; 启动etcd --&gt; 启动kube-apiserver</p><h2 id="velero-恢复" tabindex="-1"><a class="header-anchor" href="#velero-恢复" aria-hidden="true">#</a> velero 恢复</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查询备份信息</span>
velero backup get
<span class="token comment"># 按需下载备份文件</span>
velero backup download filename
<span class="token comment"># 解压</span>
<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> xxx.tar.gz
<span class="token comment"># 根据需要进行 yaml 文件恢复</span>
kubectl apply <span class="token parameter variable">-f</span> filename/dirname
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上线前，除了要做好必要的备份外，还有做好 容量规划、网络规划、架构规划、组件基准测试等，后续继续分享~</p><p>我是 Clay，下期见 👋</p><hr><blockquote><ul><li><p>欢迎订阅我的公众号「SRE运维进阶之路」或关注我的 Github https://github.com/clay-wangzhi/wiki 查看最新文章</p></li><li><p>欢迎加我微信<code>sre-k8s-ai</code>，与我讨论云原生、稳定性相关内容</p></li></ul></blockquote><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/weixin.png" alt="weixin" style="zoom:50%;">`,44),l=[p];function i(c,o){return a(),n("div",null,l)}const u=s(t,[["render",i],["__file","etcd-and-velero.html.vue"]]);export{u as default};
