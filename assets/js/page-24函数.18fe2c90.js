(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{1129:function(n,s,a){"use strict";a.r(s);var e=a(1),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"_24-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-函数"}},[n._v("#")]),n._v(" 24 函数")]),n._v(" "),a("h3",{attrs:{id:"本章目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本章目录"}},[n._v("#")]),n._v(" 本章目录")]),n._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/code/shell/part5/24_1_complex_functions_and_function_complexities.html"}},[n._v("24.1 复杂函数和函数复杂性")])],1),n._v(" "),a("li",[a("RouterLink",{attrs:{to:"/code/shell/part5/24_2_local_variables.html"}},[n._v("24.2 局部变量")])],1),n._v(" "),a("li",[a("RouterLink",{attrs:{to:"/code/shell/part5/24_3_recursion_without_local_variables.html"}},[n._v("24.3 不使用局部变量的递归")])],1)]),n._v(" "),a("p",[n._v("和其它“真正”的编程语言一样，Bash也有函数，尽管它在实现方面有一些限制。一个函数就是一个子程序，实现一系列操作的"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/special-chars.html#CODEBLOCKREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("代码块"),a("OutboundLink")],1),n._v("，执行一个特定任务的“黑盒子”。有重复代码的地方，当一个过程只需要轻微修改任务就会重复执行的时候，那么你就需要考虑使用函数了。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function function_name {\ncommand...\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[n._v("或者")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function_name () { \ncommand...\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[n._v("第二种形式可能会更受C程序员的喜爱（并且它更具有"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/portabilityissues.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("可移植性"),a("OutboundLink")],1),n._v("）。\n在C语言里面，函数的圆括号可以出现在第二行。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function_name () {\ncommand...\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://tldp.org/LDP/abs/images/note.gif",alt:"extra"}}),n._v(" 一个函数可能被“压缩”到一个单独行里。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('￼fun () { echo "This is a function"; echo; } \n#                                 ^     ^\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("p",[n._v("然而，在这种情况下，函数里的最后一个命令必须跟有一个分号。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('fun () { echo "This is a function"; echo } # Error! \n#                                       ^\nfun2 () { echo "Even a single-command function? Yes!"; } \n#                                                    ^\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("p",[n._v("只需要引用函数名字就可以调用或者触发函数。一个函数调用相当于一个命令。")]),n._v(" "),a("p",[n._v("例子 24-1. 简单的函数")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n# ex59.sh: 练习函数(简单的).\n\nJUST_A_SECOND=1\n\nfunky ()\n{ # 这是一个简单的函数\n    echo "This is a funky function."\n    echo "Now exiting funky function."\n} # 函数必须在调用前声明.\n\n\nfun ()\n{   # 一个稍微复杂点的函数.\n    i=0\n    REPEATS=30\n\n    echo\n    echo "And now the fun really begins."\n    echo\n\n    sleep $JUST_A_SECOND    # Hey, 等一秒钟!\n    while [ $i -lt $REPEATS ]\n    do\n        echo "----------FUNCTIONS----------\x3e"\n        echo "<------------ARE-------------"\n        echo "<------------FUN------------\x3e"\n        echo\n        let "i+=1"\n    done\n}\n\n# 现在，调用这些函数.\n\nfunky\nfun\n\nexit $?\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br")])]),a("p",[n._v("函数定义必须在第一次函数调用之前。没有声明函数的方法，比如像C语言中一样。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('f1\n# 将会产生一个错误消息，因为“f1”函数还没有定义。\n\ndeclare -f f1      # 这样也不会有帮助。\nf1                 # 仍然会产生一个错误消息。\n\n# 然而...\n\n\nf1 () {\n    echo "Calling function \\"f2\\" from within function \\"f1\\"."\n    f2 \n}\n\nf2 () {\n    echo "Function \\"f2\\"."\n}\n\nf1  #  在此之前，事实上函数“f2”是没有被调用的，\n    #+ 尽管在它定义之前被引用了。\n    #  这是可以的。\n    # 感谢, S.C.\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://tldp.org/LDP/abs/images/note.gif",alt:"extra"}}),n._v("  函数不能为空！")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("#!/bin/bash\n# empty-functionn.sh\n\nempty () \n{\n}\n\nexit 0  # 这里将不会退出!\n\n\n# $ sh empty-function.sh\n# empty-function.sh: line 6: syntax error near unexpected token `}'\n# empty-function.sh: line 6: `}'\n\n# $ echo $? \n# 2\n\n# 请注意，只包含注释的函数也是空函数。\n\nfunc () \n{\n    # 注释 1.\n    # 注释 2.\n    # 这仍然是一个空函数。\n    # 感谢, Mark Bova将这一点指出来。\n}\n# 结果会出现和上面一样的错误信息。\n\n# 然而 ...\n\nnot_quite_empty ()\n{\n    illegal_command\n} #  一个包含这个函数的脚本将不会出错\n    #+ 只要这个函数没有被调用。\nnot_empty ()\n{\n    :\n} # 包含一个 : (空命令符），这样是可以的。\n\n# 感谢, Dominick Geyer 和 Thiemo Kellner.\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br")])]),a("p",[n._v("甚至，把一个函数嵌套在另外一个函数里也是可行的，尽管这并没有什么用。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('f1 () \n{\n    f2 () # 嵌套函数\n    {\n        echo "Function \\"f2\\", inside \\"f1\\"."\n    }\n}\n\nf2  #  将会产生一个错误消息。\n    #  即使有一个前置的 "declare -f f2" 也不会有什么作用。\n\necho\n\nf1  #  不会做任何事情，因为调用“f1”的时候，并不会自动调用“f2”。\n    #  现在，调用“f2”是可以的，\n    #+ 因为通过调用“f1”，它的定义现在已是可见的。\n\n    # 感谢, S.C.\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br")])]),a("p",[n._v("函数定义可能出现在不太可能出现的地方，甚至出现在本应该是命令出现的地方。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('ls -l | foo() { echo "foo"; }  # 可行的，尽管没有什么作用。\n\n\nif [ "$USER" = bozo ]\nthen\n    bozo_greet ()   # 函数定义嵌套在if/then的结构体中。\n    {\n        echo "Hello, Bozo."\n    }\nfi\n\nbozo_greet        # 只有Bozo用户工作，其它用户会得到一个错误消息。\n\n\n# 在某些场景中，像下面这些东西可能会很有用。\nNO_EXIT=1   # 将会激活下面的函数定义。\n\n[[ $NO_EXIT -eq 1 ]] && exit() { true; }     # 函数定义出现在“与列表”中。\n# 如果 $NO_EXIT 等于 1, 定义 "exit ()".\n# 通过把exit函数别名为“true”，这样把内置的exit命令给禁用了。\n\nexit  # 调用 "exit ()" 函数, 而不是内置的 "exit" 命令。\n\n\n# 或者，类似地:\nfilename=file1\n\n[ -f "$filename" ] &&\nfoo () { rm -f "$filename"; echo "File "$filename" deleted."; } ||\nfoo () { echo "File "$filename" not found."; touch bar; }\n\nfoo\n\n# 感谢, S.C. 和 Christopher Head\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br")])]),a("p",[n._v("函数名字可以呈现各种奇怪的形式。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('_(){ for i in {1..10}; do echo -n "$FUNCNAME"; done; echo; }\n# ^^^         函数名字和圆括号之间没有空格。\n#             这并不会总是会正常工作。为什么呢？\n\n# 现在，我们来调用函数。\n_         # __________\n#           ^^^^^^^^^^   10 个下划线（10 倍的函数名字）！\n# 一个“假”的下划线也是一个可以接受的函数名字。\n\n# 事实上，一个分号也是一个可以接受的函数名字。\n\n:(){ echo ":"; }; :\n\n# 这有什么作用呢？\n# 这是一个狡诈的方式去混淆脚本中的代码。\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br")])]),a("p",[n._v("也可以参见 "),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/contributed-scripts.html#GRONSFELD",target:"_blank",rel:"noopener noreferrer"}},[n._v("Example A-56"),a("OutboundLink")],1)]),n._v(" "),a("p",[n._v("小提示：当一个函数的不同版本出现在一个脚本中，会发生什么事情呢？")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#  正如Yan Chen 指出的那样,\n#  当一个函数被多次定义的时候，\n#  最后一个函数是被调用的那个。\n#  然而这并不是特别有用。\n\nfunc () \n{\n    echo "First version of func ()."\n}\n\nfunc () \n{\n    echo "Second version of func ()."\n}\n\nfunc   # 调用的是第二个 func () 函数版本。\n\nexit $?\n\n#  甚至，可能用函数去覆盖\n#+ 或者占用系统命令。\n#  当然，这并不是可取的。\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);