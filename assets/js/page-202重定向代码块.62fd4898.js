(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{1104:function(n,s,a){"use strict";a.r(s);var e=a(1),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"_20-2-重定向代码块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-2-重定向代码块"}},[n._v("#")]),n._v(" 20.2 重定向代码块")]),n._v(" "),a("p",[n._v("有如 "),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/loops1.html#WHILELOOPREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("while"),a("OutboundLink")],1),n._v(", "),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/loops1.html#FORLOOPREF1",target:"_blank",rel:"noopener noreferrer"}},[n._v("until"),a("OutboundLink")],1),n._v(", 和 "),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/loops1.html#UNTILLOOPREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("for"),a("OutboundLink")],1),n._v(" 循环, 甚至 "),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/tests.html#IFTHEN",target:"_blank",rel:"noopener noreferrer"}},[n._v("if/then"),a("OutboundLink")],1),n._v(" 也可以重定向 标准输入 测试代码块. 甚至连一个函数都可以用这个方法进行重定向 (见 "),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/complexfunct.html#REALNAME",target:"_blank",rel:"noopener noreferrer"}},[n._v("样例 24-11"),a("OutboundLink")],1),n._v(').  代码块的末尾部分的 "<" 就是用来完成这个的.')]),n._v(" "),a("p",[n._v("样例 20-5. while 循环的重定向")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n# redir2.sh\n\nif [ -z "$1" ]\nthen\n  Filename=names.data       # 如果不指定文件名的默认值.\nelse\n  Filename=$1\nfi  \n#+ Filename=${1:-names.data}\n#  can replace the above test (parameter substitution).\n\ncount=0\n\necho\n\nwhile [ "$name" != Smith ]  # 为什么变量 "$name" 加引号?\ndo\n  read name                 # 从 $Filename 读取值, 而不是 标准输入.\n  echo $name\n  let "count += 1"\ndone <"$Filename"           # 重定向标准输入到文件 $Filename. \n#    ^^^^^^^^^^^^\n\necho; echo "$count names read"; echo\n\nexit 0\n\n#  注意在一些老的脚本语言中,\n#+ 循环的重定向会跑在子 shell 的环境中.\n#  因此, $count 返回 0, 在循环外已经初始化过值.\n#  Bash 和 ksh *只要可能* 会避免启动子 shell ,\n#+ 所以这个脚本作为样例运行成功.\n#  (感谢 Heiner Steven 指出这点.)\n\n#  然而 . . .\n#  Bash 有时候 *能* 在 "只读的 while" 循环启动子进程 ,\n#+ 不同于 "while" 循环的重定向.\n\nabc=hi\necho -e "1\\n2\\n3" | while read l\n     do abc="$l"\n        echo $abc\n     done\necho $abc\n\n#  感谢, Bruno de Oliveira Schneider 上面的演示代码.\n#  也感谢 Brian Onn 纠正了注释的错误.\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br")])]),a("p",[n._v("样例 20-6. 另一种形式的 while 循环重定向")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n\n# 这是之前的另一种形式的脚本.\n\n#  Heiner Steven 提议在重定向循环时候运行在子 shell 可以作为一个变通方案\n#+ 因此直到循环终止时循环内部的变量不需要保证他们的值\n\n\nif [ -z "$1" ]\nthen\n  Filename=names.data     # 如果不指定文件名的默认值.\nelse\n  Filename=$1\nfi  \n\n\nexec 3<&0                 # 保存标准输入到文件描述符 3.\nexec 0<"$Filename"        # 重定向标准输入.\n\ncount=0\necho\n\n\nwhile [ "$name" != Smith ]\ndo\n  read name               # 从重定向的标准输入($Filename)读取值.\n  echo $name\n  let "count += 1"\ndone                      #  从 $Filename 循环读\n                          #+ 因为第 20 行.\n\n#  这个脚本的早期版本在 "while" 循环 done <"$Filename" 终止\n#  练习:\n#  为什么这个没必要?\n\n\nexec 0<&3                 # 恢复早前的标准输入.\nexec 3<&-                 # 关闭临时的文件描述符 3.\n\necho; echo "$count names read"; echo\n\nexit 0\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br")])]),a("p",[n._v("样例 20-7. until 循环的重定向")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n# 同先前的脚本一样, 不过用的是 "until" 循环.\n\nif [ -z "$1" ]\nthen\n  Filename=names.data         # 如果不指定文件的默认值.\nelse\n  Filename=$1\nfi  \n\n# while [ "$name" != Smith ]\nuntil [ "$name" = Smith ]     # 变  !=  为 =.\ndo\n  read name                   # 从 $Filename 读取值, 而不是标准输入.\n  echo $name\ndone <"$Filename"             # 重定向标准输入到文件 "$Filename". \n#    ^^^^^^^^^^^^\n\n# 和之前的 "while" 循环样例相同的结果.\n\nexit 0\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br")])]),a("p",[n._v("样例 20-8. for 循环的重定向")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\n#!/bin/bash\n\nif [ -z "$1" ]\nthen\n  Filename=names.data          # 如果不指定文件的默认值.\nelse\n  Filename=$1\nfi  \n\nline_count=`wc $Filename | awk \'{ print $1 }\'`\n#           目标文件的行数.\n#\n#  非常作和不完善, 然而这只是证明 "for" 循环中的重定向标准输入是可行的\n#+ 如果你足够聪明的话.\n#\n# 简介的做法是     line_count=$(wc -l < "$Filename")\n\n\nfor name in `seq $line_count`  # 回忆下 "seq" 可以输入数组序列.\n# while [ "$name" != Smith ]   --   比 "while" 循环更复杂的循环   --\ndo\n  read name                    # 从 $Filename 读取值, 而不是标准输入.\n  echo $name\n  if [ "$name" = Smith ]       # 这需要所有这些额外的设置.\n  then\n    break\n  fi  \ndone <"$Filename"              # 重定向标准输入到文件 "$Filename". \n#    ^^^^^^^^^^^^\n\nexit 0\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br")])]),a("p",[n._v("我们可以修改先前的样例也可以重定向循环的输出.")]),n._v(" "),a("p",[n._v("样例 20-9. for 循环的重定向 (同时重定向标准输入和标准输出)")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n\nif [ -z "$1" ]\nthen\n  Filename=names.data          # 如果不指定文件的默认值.\nelse\n  Filename=$1\nfi  \n\nSavefile=$Filename.new         # 报错的结果的文件名.\nFinalName=Jonah                # 停止 "read" 的终止字符.\n\nline_count=`wc $Filename | awk \'{ print $1 }\'`  # 目标文件行数.\n\n\nfor name in `seq $line_count`\ndo\n  read name\n  echo "$name"\n  if [ "$name" = "$FinalName" ]\n  then\n    break\n  fi  \ndone < "$Filename" > "$Savefile"     # 重定向标准输入到文件 $Filename,\n#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^       并且报错结果到备份文件.\n\nexit 0\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br")])]),a("p",[n._v("样例 20-10. if/then test的重定向")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n\nif [ -z "$1" ]\nthen\n  Filename=names.data   # 如果不指定文件的默认值.\nelse\n  Filename=$1\nfi  \n\nTRUE=1\n\nif [ "$TRUE" ]          # if true    和   if :   都可以工作.\nthen\n read name\n echo $name\nfi <"$Filename"\n#  ^^^^^^^^^^^^\n\n# 只读取文件的首行.\n# "if/then" test 除非嵌入在循环内部否则没办法迭代.\n\nexit 0\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br")])]),a("p",[n._v("样例 20-11. 上述样例的数据文件 names.data")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\nAristotle\nArrhenius\nBelisarius\nCapablanca\nDickens\nEuler\nGoethe\nHegel\nJonah\nLaplace\nMaroczy\nPurcell\nSchmidt\nSchopenhauer\nSemmelweiss\nSmith\nSteinmetz\nTukhashevsky\nTuring\nVenn\nWarshawski\nZnosko-Borowski\n\n#+ 这是 "redir2.sh", "redir3.sh", "redir4.sh", "redir4a.sh", "redir5.sh" 的数据文件.\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br")])]),a("p",[n._v("代码块的标准输出的重定向影响了保存到文件的输出. 见样例 "),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/special-chars.html#RPMCHECK",target:"_blank",rel:"noopener noreferrer"}},[n._v("样例 3-2"),a("OutboundLink")],1),n._v(".")]),n._v(" "),a("p",[a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/here-docs.html#HEREDOCREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("嵌入文档"),a("OutboundLink")],1),n._v(" 是种特别的重定向代码块的方法. 既然如此,它使得在 while 循环的标准输入里传入嵌入文档的输出变得可能.")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("# 这个样例来自 Albert Siersema\n# 得到了使用许可 (感谢!).\n\nfunction doesOutput()\n # 当然这也是个外部命令.\n # 这里用函数进行演示会更好一点.\n{\n  ls -al *.jpg | awk '{print $5,$9}'\n}\n\n\nnr=0          #  我们希望在 'while' 循环里可以操作这些\ntotalSize=0   #+ 并且在 'while' 循环结束时看到改变.\n\nwhile read fileSize fileName ; do\n  echo \"$fileName is $fileSize bytes\"\n  let nr++\n  totalSize=$((totalSize+fileSize))   # Or: \"let totalSize+=fileSize\"\ndone<<EOF\n$(doesOutput)\nEOF\n\necho \"$nr files totaling $totalSize bytes\"\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);