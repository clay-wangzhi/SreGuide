(window.webpackJsonp=window.webpackJsonp||[]).push([[252],{1306:function(t,a,e){"use strict";e.r(a);var s=e(1),o=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"tomcat-缓存-清理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-缓存-清理"}},[t._v("#")]),t._v(" Tomcat “缓存”清理")]),t._v(" "),e("blockquote",[e("p",[t._v("转载自："),e("a",{attrs:{href:"https://blog.51cto.com/ycgit/1692886",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tomcat “缓存”清理"),e("OutboundLink")],1)])]),t._v(" "),e("p",[e("strong",[t._v("一、关于Tomcat“缓存”的介绍")])]),t._v(" "),e("p",[t._v("很多时候大家喜欢把tomcat的work目录里的东西叫做缓存，其实那不是很恰当，work目录只是tomcat的工作目录，也就是tomcat把jsp转换为class文件的工作目录，这也正是为什么它叫work目录而不是cache目录的原因。 　　jsp，tomcat的工作原理是当浏览器访问某个jsp页面时，tomcat会在work目录里把这个jsp页面转换成.java文件，比如将index.jsp转换为index_jsp.java文件，而后编译为index_jsp.class文件，最后tomcat容器通过ClassLoader类把这个index_jsp.class类装载入内存，进行响应客户端的工作。\n　　tomcat会定时稍描容器内的jsp文件，读取每个文件的属性，当发现某个jsp文件发生改变时（文件的最后修改时间与上次稍描时不相同时），tomcat会重新转换、编译这个jsp文件。但是tomcat的稍描是定时的不是实时的，这也正是为什么jsp文件修改后需要几分钟的时间来等修改过的jsp生效。当然为了即刻生效，很多老前辈都会建议在修改jsp页面后立即清除work目录里的文件。\n　　另外，tomcat容器中，对转换后的java文件（比如：index_jsp.java）的编译最大只支持64k，所以在其他容器中的jsp移植到tomcat容器中时会遇到大jsp文件会发生无法编译的情况，所以建议把jsp中的业务逻辑写入单独的类，在jsp中通过调用这个类的静态方法来执行，并将jsp页面中的js提取出来放到单独的js文件内。")]),t._v(" "),e("p",[e("strong",[t._v("二、Tomcat“缓存”的清理")])]),t._v(" "),e("p",[t._v("由于很多时候我们在修改jsp的内容后，希望能立即生效，自然就不愿意等几分钟让tomcat自动刷新了（根据本人以往的经验，大部分情况下还是能马上生效的）。那么下面还是来介绍三种清理的方法：")]),t._v(" "),e("p",[t._v("方法1：")]),t._v(" "),e("p",[t._v("conf/server.xml文件")]),t._v(" "),e("p",[t._v('Context path中间加上reloadable="true"')]),t._v(" "),e("p",[t._v("例如："),e("code",[t._v('<Context path="" docBase="" reloadable="true">')])]),t._v(" "),e("p",[t._v("path、docBase、reloadable属性举例说明： "),e("a",{attrs:{href:"http://ycgit.blog.51cto.com/8590215/1688579",target:"_blank",rel:"noopener noreferrer"}},[t._v(" http://ycgit.blog.51cto.com/8590215/1688579"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("方法2：")]),t._v(" "),e("p",[t._v("删除work目录下的缓存文件")]),t._v(" "),e("p",[t._v("可以把Catalina目录删除；")]),t._v(" "),e("p",[t._v("注意：不能把work整个目录删除，不然重启tomcat 时，会把conf/web.xml删除掉，这样在启动时，日志 会提示：No Default web .xml，且访问页面会显示404错误；")]),t._v(" "),e("p",[t._v("方法3：")]),t._v(" "),e("p",[t._v("在jsp页面上方加上如下代码，这样的也可以使该jsp能实时加载，每次访问都会重新把这个jsp页面转换成.java文件")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<meta http-equiv="Expires" content="0">  \n<meta http-equiv="kiben" content="no-cache">   \n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p")])}),[],!1,null,null,null);a.default=o.exports}}]);