(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{1134:function(s,n,a){"use strict";a.r(n);var e=a(1),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_32-调试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_32-调试"}},[s._v("#")]),s._v(" 32 调试")]),s._v(" "),a("blockquote",{staticClass:"blockquote-center"},[s._v("\n调试代码要比写代码困难两倍。因此，你写代码时越多的使用奇技淫巧（自做聪明），顾名思义，你越难以调试它。    --Brian Kernighan\n")]),s._v(" "),a("p",[s._v("Bash shell中不包含内置的debug工具，甚至没有调试专用的命令和结构。当调试非功能脚本，产生语法错误或者有错别字时，往往是无用的错误提示消息。")]),s._v(" "),a("p",[s._v("例子 32-1. 一个错误脚本")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#!/bin/bash\n# ex74.sh\n\n# 这是一个错误脚本，但是它错在哪？\n\na=37\n\nif [$a -gt 27 ]\nthen\n  echo $a\nfi  \n\nexit $?   # 0! 为什么?\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("脚本的输出:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("./ex74.sh: [37: command not found\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上边的脚本究竟哪错了(提示: 注意if的后边)")]),s._v(" "),a("p",[s._v("例子 32-2. 缺少关键字")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#!/bin/bash\n# missing-keyword.sh\n# 这个脚本会提示什么错误信息？\n\nfor a in 1 2 3\ndo\n  echo \"$a\"\n# done     #所需关键字'done'在第8行被注释掉.\n\nexit 0     # 将不会在这退出!\n\n#在命令行执行完此脚本后\n输入：echo $?    \n输出：2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("脚本的输出:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("missing-keyword.sh: line 10: syntax error: unexpected end of file\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("注意, 其实不必参考错误信息中指出的错误行号. 这行只不过是Bash解释器最终认定错误的地方.\n出错信息在报告产生语法错误的行号时, 可能会忽略脚本的注释行.\n如果脚本可以执行, 但并不如你所期望的那样工作, 怎么办? 通常情况下, 这都是由常见的逻辑错误所\n产生的.")]),s._v(" "),a("p",[s._v("例子 32-3.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n\n#  这个脚本应该删除在当前目录下所有文件名中含有空格的文件\n#  它不能正常运行，为什么？\n\nbadname=`ls | grep \' \'`\n\n# Try this:\n# echo "$badname"\n\nrm "$badname"\n\nexit 0\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v('可以通过把echo "$badname"行的注释符去掉，找出例子 29-3中的错误， 看一下echo出来的信息，是否按你期望的方式运行.')]),s._v(" "),a("p",[s._v('在这种特殊的情况下，rm "'),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("b")]),a("mi",[s._v("a")]),a("mi",[s._v("d")]),a("mi",[s._v("n")]),a("mi",[s._v("a")]),a("mi",[s._v("m")]),a("mi",[s._v("e")]),a("mi",{attrs:{mathvariant:"normal"}},[s._v('"')]),a("mtext",[s._v("不能得到预期的结果，因为")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v('badname"不能得到预期的结果，因为')])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.69444em","vertical-align":"0em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("ba")]),a("span",{staticClass:"mord mathnormal"},[s._v("d")]),a("span",{staticClass:"mord mathnormal"},[s._v("nam")]),a("span",{staticClass:"mord mathnormal"},[s._v("e")]),a("span",{staticClass:"mord"},[s._v('"')]),a("span",{staticClass:"mord cjk_fallback"},[s._v("不能得到预期的结果，因为")])])])]),s._v("badname不应该加双引号。加上双引号会让rm只有一个参数(这就只能匹配一个文件名).一种不完善的解决办法是去掉"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("b")]),a("mi",[s._v("a")]),a("mi",[s._v("d")]),a("mi",[s._v("n")]),a("mi",[s._v("a")]),a("mi",[s._v("m")]),a("mi",[s._v("e")]),a("mtext",[s._v("外面的引号")]),a("mo",{attrs:{separator:"true"}},[s._v(",")]),a("mtext",[s._v("并且重新设置")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("badname外 面的引号, 并且重新设置")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("ba")]),a("span",{staticClass:"mord mathnormal"},[s._v("d")]),a("span",{staticClass:"mord mathnormal"},[s._v("nam")]),a("span",{staticClass:"mord mathnormal"},[s._v("e")]),a("span",{staticClass:"mord cjk_fallback"},[s._v("外面的引号")]),a("span",{staticClass:"mpunct"},[s._v(",")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),a("span",{staticClass:"mord cjk_fallback"},[s._v("并且重新设置")])])])]),s._v("IFS, 让"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("I")]),a("mi",[s._v("F")]),a("mi",[s._v("S")]),a("mtext",[s._v("只包含一个换行符")]),a("mo",{attrs:{separator:"true"}},[s._v(",")]),a("mi",[s._v("I")]),a("mi",[s._v("F")]),a("mi",[s._v("S")]),a("mo",[s._v("=")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("IFS只包含一个换行符, IFS=")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.8777699999999999em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.07847em"}},[s._v("I")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.05764em"}},[s._v("FS")]),a("span",{staticClass:"mord cjk_fallback"},[s._v("只包含一个换行符")]),a("span",{staticClass:"mpunct"},[s._v(",")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.07847em"}},[s._v("I")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.05764em"}},[s._v("FS")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),a("span",{staticClass:"mrel"},[s._v("=")])])])]),s._v("'\\n'. 但是, 下面这个方法更简单.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 删除包含空格的文件的正确方法.\nrm *\\ *\nrm *\" \"*\nrm *' '*\n# 感谢. S.C.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("总结一下这个问题脚本的症状:")]),s._v(" "),a("blockquote"),s._v(" "),a("ol",[a("li",[s._v('由于"syntax error"(语法错误)使得脚本停止运行,')]),s._v(" "),a("li",[s._v("或者脚本能够运行, 但是并不是按照我们所期望的那样运行(逻辑错误).")]),s._v(" "),a("li",[s._v("脚本能够按照我们所期望的那样运行, 但是有烦人的副作用(逻辑炸弹).")])]),s._v(" "),a("p",[s._v("如果想调试脚本, 可以用以下方式:")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("echo语句可以放在脚本中存在疑问的位置上, 观察变量的值, 来了解脚本运行时的情况.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('### debecho (debug-echo), by Stefano Falsetto ###\n### Will echo passed parameters only if DEBUG is set to a value. ###\ndebecho () {\n\tif [ ! -z "$DEBUG" ]; then\n \t\techo "$1" >&2\n \t\t# ^^^ to stderr\n\tfi\n}\n\nDEBUG=on\nWhatever=whatnot\ndebecho $Whatever   # whatnot\n\nDEBUG=\nWhatever=notwhat\ndebecho $Whatever   # (Will not echo.)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("使用过滤器tee来检查临界点上的进程或数据流.")])]),s._v(" "),a("li",[a("p",[s._v("设置选项-n -v -x")]),s._v(" "),a("p",[s._v("sh -n scriptname不会运行脚本, 只会检查脚本的语法错误. 这等价于把set -n或set -o noexec插入脚本中. 注意, 某些类型的语法错误不会被这种方式检查出来.")]),s._v(" "),a("p",[s._v("sh -v scriptname将会在运行脚本之前, 打印出每一个命令. 这等价于把set -v或set -o verbose插入到脚本中.")]),s._v(" "),a("p",[s._v("选项-n和-v可以同时使用. sh -nv scriptname将会给出详细的语法检查.")]),s._v(" "),a("p",[s._v("sh -x scriptname会打印出每个命令执行的结果, 但只使用缩写形式. 这等价于在脚本中插入set\n-x或set -o xtrace.")]),s._v(" "),a("p",[s._v("把set -u或set -o nounset插入到脚本中, 并运行它, 就会在每个试图使用未声明变量的地方给出一个unbound variable错误信息.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('set -u   # Or   set -o nounset\n\n# Setting a variable to null will not trigger the error/abort.\n# unset_var=\n\necho $unset_var   # Unset (and undeclared) variable.\necho "Should not echo!"\n\n#sh t2.sh\n#t2.sh: line 6: unset_var: unbound variable\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("使用“断言”功能在脚本的关键点进行测试的变量或条件。 （这是从C借来的一个想法）")]),s._v(" "),a("p",[s._v("Example 32-4. Testing a condition with an assert")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# assert.sh\n\n#######################################################################\nassert ()                 #  If condition false,\n{                         #+ exit from script\n                          #+ with appropriate error message.\n  E_PARAM_ERR=98\n  E_ASSERT_FAILED=99\n\n\n  if [ -z "$2" ]          #  Not enough parameters passed\n  then                    #+ to assert() function.\n    return $E_PARAM_ERR   #  No damage done.\n  fi\n\n  lineno=$2\n\n  if [ ! $1 ] \n  then\n    echo "Assertion failed:  \\"$1\\""\n    echo "File \\"$0\\", line $lineno"    # Give name of file and line number.\n    exit $E_ASSERT_FAILED\n  # else\n  #   return\n  #   and continue executing the script.\n  fi  \n} # Insert a similar assert() function into a script you need to debug.    \n#######################################################################\n\n\na=5\nb=4\ncondition="$a -lt $b"     #  Error message and exit from script.\n                          #  Try setting "condition" to something else\n                          #+ and see what happens.\n\nassert "$condition" $LINENO\n# The remainder of the script executes only if the "assert" does not fail.\n\n\n# Some commands.\n# Some more commands . . .\necho "This statement echoes only if the \\"assert\\" does not fail."\n# . . .\n# More commands . . .\n\nexit $?\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("使用变量$LINENO和内建命令caller.")])]),s._v(" "),a("li",[a("p",[s._v("捕获exit返回值.")]),s._v(" "),a("p",[s._v('The exit command in a script triggers a signal 0, terminating the process, \tthat is, the script itself. [1] It is often useful to trap the exit, forcing \ta "printout" of variables, for example. The trap must be the first command \tin the script.')])])]),s._v(" "),a("p",[s._v("捕获信号")]),s._v(" "),a("p",[s._v("trap\nSpecifies an action on receipt of a signal; also useful for debugging.")]),s._v(" "),a("p",[s._v("A signal is a message sent to a process, either by the kernel or another \tprocess, telling it to take some specified action (usually to terminate). \tFor example, hitting a Control-C sends a user interrupt, an INT signal, to a \trunning program.")]),s._v(" "),a("p",[s._v("A simple instance:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("trap '' 2\n# Ignore interrupt 2 (Control-C), with no action specified. \n\t\ntrap 'echo \"Control-C disabled.\"' 2\n# Message when Control-C pressed.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("Example 32-5. Trapping at exit")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# Hunting variables with a trap.\n\ntrap \'echo Variable Listing --- a = $a  b = $b\' EXIT\n#  EXIT is the name of the signal generated upon exit from a script.\n#\n#  The command specified by the "trap" doesn\'t execute until\n#+ the appropriate signal is sent.\n\necho "This prints before the \\"trap\\" --"\necho "even though the script sees the \\"trap\\" first."\necho\n\na=39\nb=36\n\nexit 0\n\n\n#  Note that commenting out the \'exit\' command makes no difference,\n#+ since the script exits in any case after running out of commands.\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("Example 32-6. Cleaning up after Control-C")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# logon.sh: A quick \'n dirty script to check whether you are on-line yet.\n\numask 177  # Make sure temp files are not world readable.\n\n\nTRUE=1\nLOGFILE=/var/log/messages\n#  Note that $LOGFILE must be readable\n#+ (as root, chmod 644 /var/log/messages).\nTEMPFILE=temp.$$\n#  Create a "unique" temp file name, using process id of the script.\n#     Using \'mktemp\' is an alternative.\n#     For example:\n#     TEMPFILE=`mktemp temp.XXXXXX`\nKEYWORD=address\n#  At logon, the line "remote IP address xxx.xxx.xxx.xxx"\n#                      appended to /var/log/messages.\nONLINE=22\nUSER_INTERRUPT=13\nCHECK_LINES=100\n#  How many lines in log file to check.\n\ntrap \'rm -f $TEMPFILE; exit $USER_INTERRUPT\' TERM INT\n#  Cleans up the temp file if script interrupted by control-c.\n\necho\n\nwhile [ $TRUE ]  #Endless loop.\ndo\n  tail -n $CHECK_LINES $LOGFILE> $TEMPFILE\n  #  Saves last 100 lines of system log file as temp file.\n  #  Necessary, since newer kernels generate many log messages at log on.\n  search=`grep $KEYWORD $TEMPFILE`\n  #  Checks for presence of the "IP address" phrase,\n  #+ indicating a successful logon.\n\n  if [ ! -z "$search" ] #  Quotes necessary because of possible spaces.\n  then\n     echo "On-line"\n     rm -f $TEMPFILE    #  Clean up temp file.\n     exit $ONLINE\n  else\n     echo -n "."        #  The -n option to echo suppresses newline,\n                        #+ so you get continuous rows of dots.\n  fi\n\n  sleep 1  \ndone  \n\n\n#  Note: if you change the KEYWORD variable to "Exit",\n#+ this script can be used while on-line\n#+ to check for an unexpected logoff.\n\n# Exercise: Change the script, per the above note,\n#           and prettify it.\n\nexit 0\n\n\n# Nick Drage suggests an alternate method:\n\nwhile true\n  do ifconfig ppp0 | grep UP 1> /dev/null && echo "connected" && exit 0\n  echo -n "."   # Prints dots (.....) until connected.\n  sleep 2\ndone\n\n# Problem: Hitting Control-C to terminate this process may be insufficient.\n#+         (Dots may keep on echoing.)\n# Exercise: Fix this.\n\n\n\n# Stephane Chazelas has yet another alternative:\n\nCHECK_INTERVAL=1\n\nwhile ! tail -n 1 "$LOGFILE" | grep -q "$KEYWORD"\ndo echo -n .\n   sleep $CHECK_INTERVAL\ndone\necho "On-line"\n\n# Exercise: Discuss the relative strengths and weaknesses\n#           of each of these various approaches.\nExample 32-7. A Simple Implementation of a Progress Bar\n\n#! /bin/bash\n# progress-bar2.sh\n# Author: Graham Ewart (with reformatting by ABS Guide author).\n# Used in ABS Guide with permission (thanks!).\n\n# Invoke this script with bash. It doesn\'t work with sh.\n\ninterval=1\nlong_interval=10\n\n{\n     trap "exit" SIGUSR1\n     sleep $interval; sleep $interval\n     while true\n     do\n       echo -n \'.\'     # Use dots.\n       sleep $interval\n     done; } &         # Start a progress bar as a background process.\n\npid=$!\ntrap "echo !; kill -USR1 $pid; wait $pid"  EXIT        # To handle ^C.\n\necho -n \'Long-running process \'\nsleep $long_interval\necho \' Finished!\'\n\nkill -USR1 $pid\nwait $pid              # Stop the progress bar.\ntrap EXIT\n\nexit $?\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br"),a("span",{staticClass:"line-number"},[s._v("119")]),a("br"),a("span",{staticClass:"line-number"},[s._v("120")]),a("br"),a("span",{staticClass:"line-number"},[s._v("121")]),a("br")])]),a("p",[s._v("Note\t\nThe DEBUG argument to trap causes a specified action to execute after every command in a script. This permits tracing variables, for example.")]),s._v(" "),a("p",[s._v("Example 32-8. Tracing a variable")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('\n#!/bin/bash\n\ntrap \'echo "VARIABLE-TRACE> \\$variable = \\"$variable\\""\' DEBUG\n# Echoes the value of $variable after every command.\n\nvariable=29; line=$LINENO\n\necho "  Just initialized \\$variable to $variable in line number $line."\n\nlet "variable *= 3"; line=$LINENO\necho "  Just multiplied \\$variable by 3 in line number $line."\n\nexit 0\n\n#  The "trap \'command1 . . . command2 . . .\' DEBUG" construct is\n#+ more appropriate in the context of a complex script,\n#+ where inserting multiple "echo $variable" statements might be\n#+ awkward and time-consuming.\n\n# Thanks, Stephane Chazelas for the pointer.\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("Output of script:")]),s._v(" "),a("p",[s._v('VARIABLE-TRACE> $variable = ""\nVARIABLE-TRACE> $variable = "29"\nJust initialized $variable to 29.\nVARIABLE-TRACE> $variable = "29"\nVARIABLE-TRACE> $variable = "87"\nJust multiplied $variable by 3.\nVARIABLE-TRACE> $variable = "87"\nOf course, the trap command has other uses aside from debugging, such as disabling certain keystrokes within a script (see Example A-43).')]),s._v(" "),a("p",[s._v("Example 32-9. Running multiple processes (on an SMP box)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('\n#!/bin/bash\n# parent.sh\n# Running multiple processes on an SMP box.\n# Author: Tedman Eng\n\n#  This is the first of two scripts,\n#+ both of which must be present in the current working directory.\n\n\n\n\nLIMIT=$1         # Total number of process to start\nNUMPROC=4        # Number of concurrent threads (forks?)\nPROCID=1         # Starting Process ID\necho "My PID is $$"\n\nfunction start_thread() {\n        if [ $PROCID -le $LIMIT ] ; then\n                ./child.sh $PROCID&\n                let "PROCID++"\n        else\n           echo "Limit reached."\n           wait\n           exit\n        fi\n}\n\nwhile [ "$NUMPROC" -gt 0 ]; do\n        start_thread;\n        let "NUMPROC--"\ndone\n\n\nwhile true\ndo\n\ntrap "start_thread" SIGRTMIN\n\ndone\n\nexit 0\n\n\n\n# ======== Second script follows ========\n\n\n#!/bin/bash\n# child.sh\n# Running multiple processes on an SMP box.\n# This script is called by parent.sh.\n# Author: Tedman Eng\n\ntemp=$RANDOM\nindex=$1\nshift\nlet "temp %= 5"\nlet "temp += 4"\necho "Starting $index  Time:$temp" "$@"\nsleep ${temp}\necho "Ending $index"\nkill -s SIGRTMIN $PPID\n\nexit 0\n\n\n# ======================= SCRIPT AUTHOR\'S NOTES ======================= #\n#  It\'s not completely bug free.\n#  I ran it with limit = 500 and after the first few hundred iterations,\n#+ one of the concurrent threads disappeared!\n#  Not sure if this is collisions from trap signals or something else.\n#  Once the trap is received, there\'s a brief moment while executing the\n#+ trap handler but before the next trap is set.  During this time, it may\n#+ be possible to miss a trap signal, thus miss spawning a child process.\n\n#  No doubt someone may spot the bug and will be writing \n#+ . . . in the future.\n\n\n\n# ===================================================================== #\n\n\n\n# ----------------------------------------------------------------------#\n\n\n\n#################################################################\n# The following is the original script written by Vernia Damiano.\n# Unfortunately, it doesn\'t work properly.\n#################################################################\n\n#!/bin/bash\n\n#  Must call script with at least one integer parameter\n#+ (number of concurrent processes).\n#  All other parameters are passed through to the processes started.\n\n\nINDICE=8        # Total number of process to start\nTEMPO=5         # Maximum sleep time per process\nE_BADARGS=65    # No arg(s) passed to script.\n\nif [ $# -eq 0 ] # Check for at least one argument passed to script.\nthen\n  echo "Usage: `basename $0` number_of_processes [passed params]"\n  exit $E_BADARGS\nfi\n\nNUMPROC=$1              # Number of concurrent process\nshift\nPARAMETRI=( "$@" )      # Parameters of each process\n\nfunction avvia() {\n         local temp\n         local index\n         temp=$RANDOM\n         index=$1\n         shift\n         let "temp %= $TEMPO"\n         let "temp += 1"\n         echo "Starting $index Time:$temp" "$@"\n         sleep ${temp}\n         echo "Ending $index"\n         kill -s SIGRTMIN $$\n}\n\nfunction parti() {\n         if [ $INDICE -gt 0 ] ; then\n              avvia $INDICE "${PARAMETRI[@]}" &\n                let "INDICE--"\n         else\n                trap : SIGRTMIN\n         fi\n}\n\ntrap parti SIGRTMIN\n\nwhile [ "$NUMPROC" -gt 0 ]; do\n         parti;\n         let "NUMPROC--"\ndone\n\nwait\ntrap - SIGRTMIN\n\nexit $?\n\n: <<SCRIPT_AUTHOR_COMMENTS\nI had the need to run a program, with specified options, on a number of\ndifferent files, using a SMP machine. So I thought [I\'d] keep running\na specified number of processes and start a new one each time . . . one\nof these terminates.\n\nThe "wait" instruction does not help, since it waits for a given process\nor *all* process started in background. So I wrote [this] bash script\nthat can do the job, using the "trap" instruction.\n  --Vernia Damiano\nSCRIPT_AUTHOR_COMMENTS\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br"),a("span",{staticClass:"line-number"},[s._v("119")]),a("br"),a("span",{staticClass:"line-number"},[s._v("120")]),a("br"),a("span",{staticClass:"line-number"},[s._v("121")]),a("br"),a("span",{staticClass:"line-number"},[s._v("122")]),a("br"),a("span",{staticClass:"line-number"},[s._v("123")]),a("br"),a("span",{staticClass:"line-number"},[s._v("124")]),a("br"),a("span",{staticClass:"line-number"},[s._v("125")]),a("br"),a("span",{staticClass:"line-number"},[s._v("126")]),a("br"),a("span",{staticClass:"line-number"},[s._v("127")]),a("br"),a("span",{staticClass:"line-number"},[s._v("128")]),a("br"),a("span",{staticClass:"line-number"},[s._v("129")]),a("br"),a("span",{staticClass:"line-number"},[s._v("130")]),a("br"),a("span",{staticClass:"line-number"},[s._v("131")]),a("br"),a("span",{staticClass:"line-number"},[s._v("132")]),a("br"),a("span",{staticClass:"line-number"},[s._v("133")]),a("br"),a("span",{staticClass:"line-number"},[s._v("134")]),a("br"),a("span",{staticClass:"line-number"},[s._v("135")]),a("br"),a("span",{staticClass:"line-number"},[s._v("136")]),a("br"),a("span",{staticClass:"line-number"},[s._v("137")]),a("br"),a("span",{staticClass:"line-number"},[s._v("138")]),a("br"),a("span",{staticClass:"line-number"},[s._v("139")]),a("br"),a("span",{staticClass:"line-number"},[s._v("140")]),a("br"),a("span",{staticClass:"line-number"},[s._v("141")]),a("br"),a("span",{staticClass:"line-number"},[s._v("142")]),a("br"),a("span",{staticClass:"line-number"},[s._v("143")]),a("br"),a("span",{staticClass:"line-number"},[s._v("144")]),a("br"),a("span",{staticClass:"line-number"},[s._v("145")]),a("br"),a("span",{staticClass:"line-number"},[s._v("146")]),a("br"),a("span",{staticClass:"line-number"},[s._v("147")]),a("br"),a("span",{staticClass:"line-number"},[s._v("148")]),a("br"),a("span",{staticClass:"line-number"},[s._v("149")]),a("br"),a("span",{staticClass:"line-number"},[s._v("150")]),a("br"),a("span",{staticClass:"line-number"},[s._v("151")]),a("br"),a("span",{staticClass:"line-number"},[s._v("152")]),a("br"),a("span",{staticClass:"line-number"},[s._v("153")]),a("br"),a("span",{staticClass:"line-number"},[s._v("154")]),a("br"),a("span",{staticClass:"line-number"},[s._v("155")]),a("br"),a("span",{staticClass:"line-number"},[s._v("156")]),a("br"),a("span",{staticClass:"line-number"},[s._v("157")]),a("br"),a("span",{staticClass:"line-number"},[s._v("158")]),a("br"),a("span",{staticClass:"line-number"},[s._v("159")]),a("br"),a("span",{staticClass:"line-number"},[s._v("160")]),a("br"),a("span",{staticClass:"line-number"},[s._v("161")]),a("br"),a("span",{staticClass:"line-number"},[s._v("162")]),a("br")])]),a("p",[s._v("Note\t\ntrap '' SIGNAL (two adjacent apostrophes) disables SIGNAL for the remainder of the script. trap SIGNAL restores the functioning of SIGNAL once more. This is useful to protect a critical portion of a script from an undesirable interrupt.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("trap '' 2  # Signal 2 is Control-C, now disabled.\ncommand\ncommand\ncommand\ntrap 2     # Reenables Control-C\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);