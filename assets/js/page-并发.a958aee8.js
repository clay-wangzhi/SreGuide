(window.webpackJsonp=window.webpackJsonp||[]).push([[319],{1024:function(t,v,_){"use strict";_.r(v);var n=_(1),s=Object(n.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"并发"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#并发"}},[t._v("#")]),t._v(" 并发")]),t._v(" "),_("p",[_("strong",[t._v("并发和并行区别")])]),t._v(" "),_("p",[t._v("并行，parallel\n同时做某些事，可以互不干扰的同一个时刻做几件事")]),t._v(" "),_("p",[t._v("并发，concurrency\n也是同时做某些事，但是强调，一个时段内有事情要处理。")]),t._v(" "),_("p",[t._v("举例\n高速公路的车道，双向4车道，所有车辆（数据）可以互不干扰的在自己的车道上奔跑（传输）。\n在同一个时刻，每条车道上可能同时有车辆在跑，是同时发生的概念，这是并行。\n在一段时间内，有这么多车要通过，这是并发。")]),t._v(" "),_("p",[t._v("并行不过是使用水平扩展方式解决并发的一种手段而已。")]),t._v(" "),_("h1",{attrs:{id:"进程和线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[t._v("#")]),t._v(" 进程和线程")]),t._v(" "),_("p",[t._v("进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。")]),t._v(" "),_("p",[t._v("进程和程序的关系：程序是源代码编译后的文件，而这些文件存放在磁盘上。当程序被操作系统加载到内存中，就是进程，进程中存放着指令和数据（资源）。一个程序的执行实例就是一个进程。它也是线程的容器。")]),t._v(" "),_("p",[t._v("Linux进程有父进程、子进程，Windows的进程是平等关系。")]),t._v(" "),_("p",[t._v("在实现了线程的操作系统中，线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。")]),t._v(" "),_("p",[t._v("线程，有时被称为轻量级进程(Lightweight Process，LWP），是程序执行流的最小单元。\n一个标准的线程由线程ID，当前指令指针(PC）、寄存器集合和堆、栈组成。")]),t._v(" "),_("p",[t._v("在许多系统中，创建一个线程比创建一个进程快10-100倍。")]),t._v(" "),_("p",[_("strong",[t._v("进程、线程的理解")])]),t._v(" "),_("p",[t._v("现代操作系统提出进程的概念，每一个进程都认为自己独占所有的计算机硬件资源。\n进程就是独立的王国，进程间不可以随便的共享数据。\n线程就是省份，同一个进程内的线程可以共享进程的资源，每一个线程拥有自己独立的堆栈。")]),t._v(" "),_("p",[_("strong",[t._v("python 中的进程和线程")])]),t._v(" "),_("p",[t._v("运行程序会启动一个解释器进程，线程共享一个解释器进程。")])])}),[],!1,null,null,null);v.default=s.exports}}]);