(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{961:function(s,a,n){"use strict";n.r(a);var t=n(1),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"_4-4-jenkins共享库应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-jenkins共享库应用"}},[s._v("#")]),s._v(" 4.4 Jenkins共享库应用")]),s._v(" "),n("h2",{attrs:{id:"由来与演进"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#由来与演进"}},[s._v("#")]),s._v(" 由来与演进")]),s._v(" "),n("p",[s._v("在Jenkins 1.x中，对于job的配置大多是基于图形界面的，也就是说，要在GUI页面手动设置相关的job参数。\n随着不同类型和用途的job越来越多，参数越来越复杂，难以有效地管理数量庞大的图形界面配置信息，也无法有效追踪和记录配置的更改。")]),s._v(" "),n("p",[s._v("在Jenkins 2.0中，基于Pipeline，用户可以在一个 JenkinsFile 中快速实现一个项目的从构建、测试以到发布的完整流程，灵活方便地实现持续交付。\n并且通过“pipeline script from SCM”方式，可以保存这个流水线的定义，进行版本化管理。")]),s._v(" "),n("p",[s._v("在实际使用中，一开始大都会制作一个尽可能通用的pipeline脚本样例，让搭建者只需要修改几个赋值参数就可以在项目中应用。\n但不可避免的是，不同的项目往往有不同的需求，随着定制化需求越来越多，加入了不同的功能实现代码，导致pipeline也会越来越复杂，可读性差，也不利于维护。\n而且随着pipeline数目不断的增多，将会发现同一类型和用途的pipeline，它们的很多功能其实是相同的，这时如果对某个功能做改动，往往需要更新数量众多的JenkinsFile。")]),s._v(" "),n("p",[s._v("针对pipeline的扩展和管理问题，共享库功能（Shared Libraries）应运而生。\n共享库可以将整个pipeline脚本的实现和复杂度封装到Shared Library中，在各种项目之间共享pipeline核心实现，减少冗余代码。\n也就是说，Shared Libraries的方式抽象了各种项目之间共享的代码（甚至整条完整的pipeline），有效降低了使用pipeline的复杂度。\n而且通过外部源代码控制（SCM）的方式，保证所有job在构建的时候会调用最新的共享库代码。")]),s._v(" "),n("h2",{attrs:{id:"共享库是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#共享库是什么"}},[s._v("#")]),s._v(" 共享库是什么？")]),s._v(" "),n("p",[s._v("共享库（shared library）是一些"),n("strong",[s._v("独立的 Groovy 脚本的集合")]),s._v("，我们可以在运行 Pipeline 的时候去获取这些共享库代码。使用共享库最好的方式同样是把代码使用 Git 仓库进行托管，这样我们就可以进行版本化管理了。当然我们也需要一些 Groovy 语言的基础，不过并不需要多深入，基本的语法概念掌握即可，可以查看前面我们的 "),n("a",{attrs:{href:"https://www.qikqiak.com/post/groovy-simple-tutorial/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Groovy 简明教程"),n("OutboundLink")],1),s._v(" 。")]),s._v(" "),n("p",[s._v("使用共享库一般只需要3个步骤即可：")]),s._v(" "),n("ul",[n("li",[s._v("首先创建 Groovy 脚本，添加到 Git 仓库中")]),s._v(" "),n("li",[s._v("然后在 Jenkins 中配置将共享库添加到 Jenkins 中来")]),s._v(" "),n("li",[s._v("最后，在我们的流水线中导入需要使用的共享库："),n("code",[s._v("@Library('your-shared-library')")]),s._v("，这样就可以使用共享库中的代码了。")])]),s._v(" "),n("h2",{attrs:{id:"共享库内容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#共享库内容"}},[s._v("#")]),s._v(" 共享库内容")]),s._v(" "),n("p",[s._v("在共享库中一般会有两种通用的代码：")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("Steps")]),s._v("：这些 Steps 在 Jenkins 中被称为"),n("strong",[s._v("全局变量")]),s._v("，我们可以在所有的 Jenkins Pipeline 中使用这些自定义的 Steps。")])]),s._v(" "),n("p",[s._v("比如，我们可以编写一个标准的 Step 来部署应用或者发送消息通知等，我们就可以将代码添加到 "),n("code",[s._v("vars/YourStepName.groovy")]),s._v(" 文件中，然后实现一个 "),n("code",[s._v("call")]),s._v(" 函数即可：")]),s._v(" "),n("div",{staticClass:"language-groovy line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-groovy"}},[n("code",[n("span",{pre:!0,attrs:{class:"token shebang comment"}},[s._v("#!/usr/bin/env groovy")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// vars/YourStepName.groovy")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Do something here...")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[n("strong",[s._v("其他通用代码")]),s._v("：我们可以在这里面添加一些帮助类，还可以定义整个流水线中使用的静态常量等。")])]),s._v(" "),n("p",[s._v("这些代码需要放在 "),n("code",[s._v("src/your/package/name")]),s._v(" 目录下面，然后就可以使用常规的 Groovy 语法了，例如：")]),s._v(" "),n("div",{staticClass:"language-groovy line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-groovy"}},[n("code",[n("span",{pre:!0,attrs:{class:"token shebang comment"}},[s._v("#!/usr/bin/env groovy")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// com/qikqiak/GlobalVars.groovy")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("qikqiak\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GlobalVars")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" String foo "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string gstring"}},[s._v('"bar"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("我们可以在 Jenkins Pipeline 中使用 "),n("code",[s._v("import")]),s._v(" 导入上面的类，并引用其中的静态变量，比如 "),n("code",[s._v("GlobalVars.foo")]),s._v("。")]),s._v(" "),n("h2",{attrs:{id:"示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),n("p",[s._v("新建一个名为 "),n("code",[s._v("pipeline-library-demo")]),s._v(" 的文件夹，将该项目加入到 Git 仓库中。首先创建一个名为 "),n("code",[s._v("vars")]),s._v(" 的目录，自定义一个 step 就是在 "),n("code",[s._v("vars")]),s._v(" 目录下面的一个 "),n("code",[s._v(".groovy")]),s._v(" 文件，这些被称为全局变量，比如我们添加一个 "),n("code",[s._v("sayHi.groovy")]),s._v(" 的文件，代码如下所示：")]),s._v(" "),n("div",{staticClass:"language-groovy line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-groovy"}},[n("code",[n("span",{pre:!0,attrs:{class:"token shebang comment"}},[s._v("#!/usr/bin/env groovy")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("String name"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'QIKQIAK'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  echo "),n("span",{pre:!0,attrs:{class:"token string gstring"}},[s._v('"Hello, '),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("$")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),s._v('."')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("需要注意的是需要实现 call 方法，添加了一个名为 name 的参数，具有默认值 "),n("code",[s._v("QIKQIAK")]),s._v("，可以用 "),n("code",[s._v("${name}")]),s._v(" 来进行访问。")]),s._v(" "),n("p",[s._v("然后创建一个名为 "),n("code",[s._v("src/com/qikqiak/GlobalVars.groovy")]),s._v(" 的文件，文件内容如下所示：")]),s._v(" "),n("div",{staticClass:"language-groovy line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-groovy"}},[n("code",[n("span",{pre:!0,attrs:{class:"token shebang comment"}},[s._v("#!/usr/bin/env groovy")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("qikqiak\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GlobalVars")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" String foo "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string gstring"}},[s._v('"bar"')]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在 Pipeline 中可以引用这里的静态变量：")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// import com.qikqiak.GlobalVars")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// println GlobalVars.foo")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("完整的代码目录如下所示：")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[s._v("$ tree "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n├── README.md\n├── src\n│   └── com\n│       └── qikqiak\n│           └── GlobalVars.groovy\n└── vars\n    └── sayHi.groovy\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" directories, "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" files\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("完整的代码上传到了 GitHub 仓库 https://github.com/cnych/pipeline-library-demo 中。")]),s._v(" "),n("p",[s._v("共享库创建完成后，我们需要让 Jenkins 知道这个共享库，我们可以从 Jenkins 的 Web 页面进行添加。在 Jenkins 首页 -> 系统管理 -> 系统配置，在 "),n("code",[s._v("Global Pipeline Libraries")]),s._v(" 区域配置共享库：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://bxdc-static.oss-cn-beijing.aliyuncs.com/images/20200520174843.png",alt:"Global Pipeline Libraries"}}),s._v("Global Pipeline Libraries")]),s._v(" "),n("p",[s._v("保存后即可使用配置共享库。接下来新建一个名为 "),n("code",[s._v("share-lib-demo")]),s._v(" 的流水线项目，在 "),n("code",[s._v("Pipeline script")]),s._v(" 区域添加如下代码：")]),s._v(" "),n("div",{staticClass:"language-groovy line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-groovy"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Library")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'pipeline-library-demo'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("_")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("qikqiak"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("GlobalVars\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("stage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Demo'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    echo "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hello world'")]),s._v("\n    sayHi "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'阳明'")]),s._v("\n    println GlobalVars"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("foo\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[n("img",{attrs:{src:"https://bxdc-static.oss-cn-beijing.aliyuncs.com/images/20200520175022.png",alt:"img"}})]),s._v(" "),n("p",[s._v("需要注意的是 "),n("code",[s._v("@Library('pipeline-library-demo')_")]),s._v(" 最后有一个下划线 "),n("code",[s._v("_")]),s._v("，这个下划线并不是写错了，如果 "),n("code",[s._v("@Libray")]),s._v(" 后面紧接的一行不是 "),n("code",[s._v("import")]),s._v(" 语句的话，就需要这个下划线，我们这里后面就是一条 "),n("code",[s._v("import")]),s._v(" 语句，所以这里可以省略这个下划线。")]),s._v(" "),n("p",[s._v("配置完成后，构建这个 Pipeline，正常就可以看到如下所示的构建结果：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://bxdc-static.oss-cn-beijing.aliyuncs.com/images/20200520175509.png",alt:"img"}})]),s._v(" "),n("p",[s._v("这样我们就完成了一个共享库的编写。")]),s._v(" "),n("h2",{attrs:{id:"参考链接"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[s._v("#")]),s._v(" 参考链接")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://www.cnblogs.com/anliven/p/13693871.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Jenkins - 共享库（Shared Libraries）| anliven | 博客园"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("a",{attrs:{href:"https://www.qikqiak.com/post/jenkins-shared-library-demo/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Jenkins 共享库示例 | 阳明的博客"),n("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);