(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{1107:function(n,s,a){"use strict";a.r(s);var e=a(1),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"_24-1-复杂函数和函数复杂性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-1-复杂函数和函数复杂性"}},[n._v("#")]),n._v(" 24.1 复杂函数和函数复杂性")]),n._v(" "),a("p",[n._v("函数可以处理传递给它的参数，并且能返回它的"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("退出状态码"),a("OutboundLink")],1),n._v("给脚本，以便后续处理。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function_name $arg1 $arg2\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("函数通过位置来引用传递过来的参数（就好像它们是"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/internalvariables.html#POSPARAMREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("位置参数"),a("OutboundLink")],1),n._v("），例如，$1, $2，等等。")]),n._v(" "),a("p",[n._v("例子 24-2. 带参数的函数")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n# 函数和参数\n\nDEFAULT=default                 # 默认参数值。D\n\nfunc2 () {\n    if [ -z "$1" ]              # 第一个参数长度是否为零？\n    then\n        echo "-Parameter #1 is zero length.-"  # 或者没有参数传递进来。\n    else\n        echo "-Parameter #1 is \\"$1\\".-"\n    fi\n\n    variable=${1-$DEFAULT}\n    echo "variable = $variable"     #  这里的参数替换\n                                    #+ 表示什么？\n                                    #  ---------------------------\n                                    #  为了区分没有参数的情况\n                                    #+ 和只有一个null参数的情况。\n\n    if [ "$2" ]\n    then\n        echo "-Parameter #2 is \\"$2\\".-"\n    fi\n\n    return 0\n}\n\necho\n\necho "Nothing passed."\nfunc2                          # 不带参数调用\necho\n\n\necho "Zero-length parameter passed."\nfunc2 ""                        # 使用0长度的参数进行调用\necho\n\necho "Null parameter passed."\nfunc2 "$uninitialized_param"    # 使用未初始化的参数进行调用\necho\n\n\necho "One parameter passed."\nfunc2 first           # 带一个参数的调用\necho\n\necho "Two parameters passed."\nfunc2 first second    # 带两个参数的调用\necho\n\necho "\\"\\" \\"second\\" passed."\nfunc2 "" second       # 第一个调用参数为0长度参数，\necho                  # 第二个是ASCII码的字符串参数。\n\nexit 0\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://tldp.org/LDP/abs/images/caution.gif",alt:"notice"}}),n._v(" 也可以使用"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/othertypesv.html#SHIFTREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("shift"),a("OutboundLink")],1),n._v("命令来处理传递给函数的参数（请参考"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/assortedtips.html#MULTIPLICATION",target:"_blank",rel:"noopener noreferrer"}},[n._v("例子 33-18"),a("OutboundLink")],1),n._v(".\n但是，传递给脚本的命令行参数怎么办？在函数内部，可以看见这些命令行参数么？好，现在让我们弄清楚这个困惑。")]),n._v(" "),a("p",[n._v("例子 34-3. 函数以及传递给脚本的命令行参数。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n# func-cmdlinearg.sh\n#  带一个命令行参数来执行这个脚本，\n#+ 类似于 $0 arg1.\n\n\nfunc ()\n{\n    echo "$1"   # 显示传递给这个函数的第一个参数。\n}               # 命令行参数可以么？\n\necho "First call to function: no arg passed."\necho "See if command-line arg is seen."\nfunc\n# 不! 没有见到命令行参数.\n\necho "============================================================"\necho\necho "Second call to function: command-line arg passed explicitly."\n\nfunc $1\n# 现在，见到命令行参数了！\n\nexit 0\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br")])]),a("p",[n._v("和其它的编程语言相比，shell脚本一般只会传值给函数。如果把变量名（事实上就是指针）作为参数传递给函数的话，那将被解释为字面含义，也就是被看做字符串。 函数只会以字面含义来解释函数参数。")]),n._v(" "),a("p",[a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/ivr.html#IVRREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("变量的间接引用"),a("OutboundLink")],1),n._v("（请参考"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/bashver2.html#EX78",target:"_blank",rel:"noopener noreferrer"}},[n._v("例子 37-2"),a("OutboundLink")],1),n._v("）提供了一种笨拙的机制，来将变量指针传递给函数。")]),n._v(" "),a("p",[n._v("例子 24-4. 将一个间接引用传递给函数")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n# ind-func.sh: 将一个间接引用传递给函数。\n\necho_var ()\n{\n    echo "$1"\n}\n\nmessage=Hello\nHello=Goodbye\n\necho_var "$message"         # Hello\n# 现在，让我们传递一个间接引用给函数。\necho_var "${!message}"     # Goodbye\necho "-------------"\n\n# 如果我们改变“hello”的值会发生什么？\nHello="Hello, again!"\necho_var "$message"        # Hello\necho_var "${!message}"     # Hello, again!\n\nexit 0\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br")])]),a("p",[n._v("接下来的一个逻辑问题就是，将参数传递给函数之后，参数能否被解除引用。")]),n._v(" "),a("p",[n._v("例子 24-5. 对一个传递给函数的参数进行解除引用的操作")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n# dereference.sh\n# 对一个传递给函数的参数进行解除引用的操作。\n# 此脚本由Bruce W. Clare编写.\n\ndereference ()\n{\n    y=\\$"$1"   # 变量名（而不是值）.\n    echo $y    # $Junk\n\n    x=`eval "expr \\"$y\\" "`\n    echo $1=$x\n    eval "$1=\\"Some Different Text \\""  # 赋新值.\n}\n\nJunk="Some Text"\necho $Junk "before"         # Some Text before\n\ndereference Junk\necho $Junk "after"          # Some Different Text after\n\nexit 0\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br")])]),a("p",[n._v("例子 24-6. 再来一次，对一个传递给函数的参数进行解除引用的操作")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n# ref-params.sh: 解除传递给函数的参数引用。\n#                (复杂的例子C)\n\nITERATIONS=3  # 取得输入的次数。\nicount=1\n\nmy_read () {\n    #  用my_read varname这种形式来调用,\n    #+ 将之前用括号括起的值作为默认值输出,\n    #+ 然后要求输入一个新值.\n\n    local local_var\n\n    echo -n "Enter a value "\n    eval \'echo -n "[$\'$1\'] "\'  #  之前的值.\n# eval echo -n "[\\$$1] "     #  更容易理解,\n                             #+ 但会丢失用户在尾部输入的空格。\n    read local_var\n    [ -n "$local_var" ] && eval $1=\\$local_var\n\n    # "与列表": 如果 "local_var" 的测试结果为true，则把变量"$1"的值赋给它。\n}\n\necho\n\nwhile [ "$icount" -le "$ITERATIONS" ]\ndo\n    my_read var\n    echo "Entry #$icount = $var"\n    let "icount += 1"\n    echo\ndone\n\n# 感谢Stephane Chazelas 提供这个例子。\n\nexit 0\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br")])]),a("h2",{attrs:{id:"退出与返回码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#退出与返回码"}},[n._v("#")]),n._v(" 退出与返回码")]),n._v(" "),a("h3",{attrs:{id:"退出状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#退出状态码"}},[n._v("#")]),n._v(" 退出状态码")]),n._v(" "),a("p",[n._v("函数返回一个值，被称为退出状态码。这和一条命令返回的"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("退出状态码"),a("OutboundLink")],1),n._v("类似。退出状态码可以由"),a("strong",[n._v("return")]),n._v(" 命令明确指定，也可以由函数中最后一条命令的退出状态码来指定（如果成功，则返回0，否则返回非0值）。可以在脚本中使用"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/internalvariables.html#XSTATVARREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("$?"),a("OutboundLink")],1),n._v("来引用"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("退出状态码"),a("OutboundLink")],1),n._v("。 因为有了这种机制，所以脚本函数也可以像C函数一样有“返回值”。")]),n._v(" "),a("h3",{attrs:{id:"return"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#return"}},[n._v("#")]),n._v(" return")]),n._v(" "),a("p",[n._v("终止一个函数。一个return命令"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/complexfunct.html#FTN.AEN18474",target:"_blank",rel:"noopener noreferrer"}},[n._v("1"),a("OutboundLink")],1),n._v(" 可选的允许带一个整形参数，这个整形参数将作为函数的“退出状态码”返回给调用这个函数的脚本，并且这个证书也被赋值给变量"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/internalvariables.html#XSTATVARREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("$?"),a("OutboundLink")],1),n._v(".")]),n._v(" "),a("p",[n._v("例子 24-7. 取两个数中的最大值")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n# max.sh: 取两个Maximum of two integers.\nE_PARAM_ERR=250    # 如果传给函数的参数少于两个时，就返回这个值。\nEQUAL=251          # 如果两个参数相等时，就返回这个值。\n#  任意超出范围的\n#+ 参数值都可能传递到函数中。\n\nmax2 ()             # 返回两个数中的最大值。\n{                   # 注意：参与比较的数必须小于250.\n    if [ -z "$2" ]\n    then\n        return $E_PARAM_ERR\n    fi\n\n    if [ "$1" -eq "$2" ]\n    then\n        return $EQUAL\n    else\n        if [ "$1" -gt "$2" ]\n        then\n            return $1\n        else\n            return $2\n        fi\n    fi\n}\n\nmax2 33 34\nreturn_val=$?\n\nif [ "$return_val" -eq $E_PARAM_ERR ]\nthen\n    echo "Need to pass two parameters to the function."\nelif [ "$return_val" -eq $EQUAL ]\nthen\n    echo "The two numbers are equal."\nelse\n    echo "The larger of the two numbers is $return_val."\nfi\n\nexit 0\n#  练习 (easy):\n￼#  ---------------\n#  把这个脚本转化为交互脚本，\n#+ 也就是，修改这个脚本，让其要求调用者输入2个数。\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://tldp.org/LDP/abs/images/tip.gif",alt:"info"}}),n._v(" 为了让函数可以返回字符串或者是数组，可以使用一个在函数外可见的专用全局变量。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('count_lines_in_etc_passwd()\n{\n    [[ -r /etc/passwd ]] && REPLY=$(echo $(wc -l < /etc/passwd))\n    #  如果 /etc/passwd 可读，让 REPLY 等于 文件的行数.\n    #  这样就可以同时返回参数值与状态信息。\n    #  \'echo\' 看上去没什么用，可是...\n    #+ 它的作用是删除输出中的多余空白符。\n}\n\nif count_lines_in_etc_passwd\nthen\n    echo "There are $REPLY lines in /etc/passwd."\nelse\n    echo "Cannot count lines in /etc/passwd."\nfi\n\n# 感谢, S.C.\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br")])]),a("p",[n._v("例子 24-8. 将阿拉伯数字转化为罗马数字")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n# 将阿拉伯数字转化为罗马数字。\n# 范围：0 - 200\n# 比较粗糙，但可以正常工作。\n# 扩展范围, 并且完善这个脚本, 作为练习.\n# 用法: roman number-to-convert\n\nLIMIT=200\nE_ARG_ERR=65\nE_OUT_OF_RANGE=66\n\nif [ -z "$1" ]\nthen\n    echo "Usage: `basename $0` number-to-convert"\nexit $E_ARG_ERR\nfi\n\nnum=$1\nif [ "$num" -gt $LIMIT ]\nthen\n    echo "Out of range!"\n    exit $E_OUT_OF_RANGE\nfi\n\nto_roman ()             # 在第一次调用函数前必须先定义它。\n{\n    number=$1\n    factor=$2\n    rchar=$3\n    let "remainder = number - factor"\n    while [ "$remainder" -ge 0 ]\n    do\n        echo -n $rchar\n        let "number -= factor"\n        let "remainder = number - factor"\n    done\n\n    return $number\n        # 练习:\n        # ---------\n        # 1) 解释这个函数如何工作\n        #    提示: 依靠不断的除，来分割数字。\n        # 2) 扩展函数的范围：\n        #    提示: 使用echo和substitution命令.\n}\n\nto_roman $num 100 C\nnum=$?\nto_roman $num 90 LXXXX\nnum=$?\nto_roman $num 50 L\nnum=$?\nto_roman $num 40 XL\nnum=$?\nto_roman $num 10 X\nnum=$?\nto_roman $num 9 IX\nnum=$?\nto_roman $num 5 V\nnum=$?\nto_roman $num 4 IV\nnum=$?\nto_roman $num 1 I\n# 成功调用了转换函数。\n# 这真的是必须的么？ 这个可以简化么？\n\necho\n\nexit \n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br")])]),a("p",[n._v("也可以参见"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/testbranch.html#ISALPHA",target:"_blank",rel:"noopener noreferrer"}},[n._v("例子 11-29"),a("OutboundLink")],1)]),n._v(" "),a("p",[a("img",{attrs:{src:"http://tldp.org/LDP/abs/images/caution.gif",alt:"notice"}}),n._v(" 函数所能返回最大的正整数是255. return命令和"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("退出状态码"),a("OutboundLink")],1),n._v("的概念紧密联系在一起，并且退出状态码的值受此限制。 幸运的是，如果想让函数返回大整数的话，有好多种不同的"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/assortedtips.html#RVT",target:"_blank",rel:"noopener noreferrer"}},[n._v("变通方法"),a("OutboundLink")],1),n._v(" 能够应对这个情况。")]),n._v(" "),a("p",[n._v("例子24-9. 测试函数最大的返回值")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("#!/bin/bash\n# return-test.sh\n# 函数所能返回的最大正整数为255.\n\nreturn_test ()         # 传给函数什么值，就返回什么值。\n{\n    return $1\n}\n\nreturn_test 27          # o.k.\necho $?                 # 返回27.\n\nreturn_test 255         # Still o.k.\necho $?                 # 返回 255.\n\nreturn_test 257         # 错误!\necho $?                 # 返回 1 (对应各种错误的返回码).\n\n# =========================================================\nreturn_test -151896    # 能返回一个大负数么?\necho $?                # 能否返回 -151896?\n                        # 不行! 返回的是 168.\n\n#  Bash 2.05b 之前的版本\n#+ 允许返回大负数。\n#  这可能是个有用的特性。\n#  Bash之后的新版本修正了这个漏洞。\n#  这可能会影响以前所编写的脚本。\n#  一定要小心!\n# =========================================================\n\nexit 0\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br")])]),a("p",[n._v("如果你想获得大整数“返回值”的话，简单的方法就是将“要返回的值”保存到一个全局变量中。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('Return_Val=   # 用于保存函数特大返回值的全局变量。\n\nalt_return_test ()\n{\n    fvar=$1\n    Return_Val=$fvar\n    return   # 返回 0 (成功).\n}\n\nalt_return_test 1\necho $?             #0\necho "return value = $Return_Val"            #1\n\nalt_return_test 256\necho "return value = $Return_Val"           # 256\n\nalt_return_test 257\necho "return value = $Return_Val"           # 257\n\nalt_return_test 25701\necho "return value = $Return_Val"           #25701\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br")])]),a("p",[n._v('一种更优雅的做法是在函数中使用echo命令将"返回值输出到stdout“，然后用'),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/commandsub.html#COMMANDSUBREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("命令替换"),a("OutboundLink")],1),n._v("来捕捉此值。请参考"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/assortedtips.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("36.7小节"),a("OutboundLink")],1),n._v(" 中"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/assortedtips.html#RVT",target:"_blank",rel:"noopener noreferrer"}},[n._v("关于这种用法的讨论"),a("OutboundLink")],1),n._v("。")]),n._v(" "),a("p",[n._v("例子 24-10. 比较两个大整数")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n# max2.sh: 取两个大整数中的最大值。\n\n#  这是前一个例子 "max.sh" 的修改版,\n#+ 这个版本可以比较两个大整数。\n\nEQUAL=0             # 如果两个值相等，那就返回这个值。\nE_PARAM_ERR=-99999  # 没有足够多的参数，那就返回这个值。\n#           ^^^^^^    任意超出范围的参数都可以传递进来。\n\nmax2 ()             # "返回" 两个整数中最大的那个。\n{\n    if [ -z "$2" ]\n    then\n        echo $E_PARAM_ERR\n        return\n    fi\n\n    if [ "$1" -eq "$2" ]\n    then\n        echo $EQUAL\n        return\n    else\n        if [ "$1" -gt "$2" ]\n        then\n            retval=$1\n        else\n            retval=$2\n        fi\n    fi\n\n    echo $retval            # 输出 (到 stdout), 而没有用返回值。\n                            # 为什么?\n}\n\n\nreturn_val=$(max2 33001 33997)\n#            ^^^^             函数名\n#                 ^^^^^ ^^^^^ 传递进来的参数\n#  这其实是命令替换的一种形式：\n#+ 可以把函数看作一个命令，\n#+ 然后把函数的stdout赋值给变量“return_val".\n\n\n# ========================= OUTPUT ========================\nif [ "$return_val" -eq "$E_PARAM_ERR" ]\nthen\n    echo "Error in parameters passed to comparison function!"\nelif [ "$return_val" -eq "$EQUAL" ]\nthen\n    echo "The two numbers are equal."\nelse\n    echo "The larger of the two numbers is $return_val."\nfi\n# =========================================================\n\nexit 0\n\n#  练习:\n#  ---------\n#  1) 找到一种更优雅的方法，\n#+    去测试传递给函数的参数。\n#  2) 简化”输出“段的if/then结构。\n#  3) 重写这个脚本，使其能够从命令行参数中获得输入。\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br")])]),a("p",[n._v("这是另一个能够捕捉函数”返回值“的例子。要想搞明白这个例子，需要一些"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/awk.html#AWKREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("awk"),a("OutboundLink")],1),n._v("的知识。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('month_length ()  # 把月份作为参数。\n{                # 返回该月包含的天数。\n    monthD="31 28 31 30 31 30 31 31 30 31 30 31"  # 作为局部变量声明？\n    echo "$monthD" | awk \'{ print $\'"${1}"\' }\'    # 小技巧.\n#                             ^^^^^^^^^\n# 传递给函数的参数  ($1 -- 月份), 然后传给 awk.\n# Awk 把参数解释为"print $1 . . . print $12" (这依赖于月份号)\n# 这是一个模板，用于将参数传递给内嵌awk的脚本：\n#                                 $\'"${script_parameter}"\'\n#    这里是一个简单的awk结构：\n#    echo $monthD | awk -v month=$1 \'{print $(month)}\'\n#    使用awk的-v选项，可以把一个变量值赋给\n#+   awk程序块的执行体。\n#    感谢 Rich.\n#  需要做一些错误检查，来保证月份好正确，在范围（1-12）之间， \n#+ 别忘了检查闰年的二月。\n}\n# ----------------------------------------------\n# 用例：\nmonth=4        # 以四月为例。\ndays_in=$(month_length $month)\necho $days_in  # 30\n# ----------------------------------------------\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br")])]),a("p",[n._v("也请参考"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/contributed-scripts.html#DAYSBETWEEN",target:"_blank",rel:"noopener noreferrer"}},[n._v("例子 A-7"),a("OutboundLink")],1),n._v(" 和"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/contributed-scripts.html#STDDEV",target:"_blank",rel:"noopener noreferrer"}},[n._v("例子A-37"),a("OutboundLink")],1),n._v(".")]),n._v(" "),a("p",[n._v("练习:使用目前我们已经学到的知识，来扩展之前的例子 "),a("a",{attrs:{href:""}},[n._v("将阿拉伯数字转化为罗马数字")]),n._v("，让它能够接受任意大的输入。")]),n._v(" "),a("p",[n._v("重定向\n重定向函数的stdin\n函数本质上其实就是一个"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/special-chars.html#CODEBLOCKREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("代码块"),a("OutboundLink")],1),n._v(",这就意味着它的stdin可以被重定向（比如"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/special-chars.html#EX8",target:"_blank",rel:"noopener noreferrer"}},[n._v("例子3-1"),a("OutboundLink")],1),n._v(")。")]),n._v(" "),a("p",[n._v("例子 24-11. 从username中取得用户的真名")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n# realname.sh\n#\n# 依靠username，从/etc/passwd 中获得“真名”.\n\n\nARGCOUNT=1       # 需要一个参数.\nE_WRONGARGS=85\n\nfile=/etc/passwd\npattern=$1\n\nif [ $# -ne "$ARGCOUNT" ]\nthen\n    echo "Usage: `basename $0` USERNAME"\n    exit $E_WRONGARGS\nfi\n\nfile_excerpt ()    # 按照要求的模式来扫描文件,\n{                  #+ 然后打印文件的相关部分。\n    while read line  # "while" 并不一定非得有 [ 条件 ] 不可。\n    do\n        echo "$line" | grep $1 | awk -F":" \'{ print $5 }\'\n        # awk用":" 作为界定符。\n    done\n    } <$file  # 重定向到函数的stdin。\n\nfile_excerpt $pattern\n# 是的，整个脚本其实可以被缩减为\n#       grep PATTERN /etc/passwd | awk -F":" \'{ print $5 }\'\n# or\n#       awk -F: \'/PATTERN/ {print $5}\'\n# or\n#       awk -F: \'($1 == "username") { print $5 }\' # 从username中获取真名\n# 但是，这些起不到示例的作用。\n\nexit 0\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br")])]),a("p",[n._v("还有一个办法，或许能够更好的理解重定向函数的stdin。 它在函数内添加了一对大括号，并且将重定向stdin的行为放在这对添加的大括号上。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("# 用下面的方法来代替它:\nFunction ()\n{\n    ...\n} < file\n\n# 试试这个:\nFunction ()\n{\n    { \n        ...\n    } < file \n}\n\n# 同样的,\n\nFunction ()  # 没问题.\n{\n    {\n        echo $*\n    } | tr a b \n}\n\nFunction ()  # 不行.\n{\n    echo $*\n} | tr a b   # 这儿的内嵌代码块是被强制的。\n# 感谢, S.C.\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://tldp.org/LDP/abs/images/note.gif",alt:"extra"}}),n._v(" Emmanuel Rouat的 "),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/sample-bashrc.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("sample bash"),a("OutboundLink")],1),n._v(" 文件包含了一些很有指导性意义的函数例子。")]),n._v(" "),a("h3",{attrs:{id:"echo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#echo"}},[n._v("#")]),n._v(" echo")]),n._v(" "),a("p",[n._v("shell中函数返回值，个人觉得可以用"),a("code",[n._v("echo")])])])}),[],!1,null,null,null);s.default=t.exports}}]);