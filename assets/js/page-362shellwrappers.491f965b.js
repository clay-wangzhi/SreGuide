(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{1125:function(s,n,a){"use strict";a.r(n);var e=a(1),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_36-2-shell-wrappers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_36-2-shell-wrappers"}},[s._v("#")]),s._v(" 36.2 shell wrappers")]),s._v(" "),a("p",[s._v("wrapper是一个包含系统命令和工具的脚本，脚本会把一些参数传递给这些（脚本内的）命令。将一个复杂的命令封装成一个wrapper是为了调用它时比较简单好记，特别在使用sed和awk命令时会这么做。")]),s._v(" "),a("p",[s._v("sed或awk脚本通常在命令行下调用时是sed -e '命令'或者awk '命令'。在Bash脚本中嵌入这些命令会让它们在调用时很简单，并且能够被重用。使用这种方法可以将sed和awk的优势统一起来，比如将sed命令处理的结果通过管道传递给awk继续处理。将这些保存成为一个可执行文件，你可以重复调用它的原始版本或者修改版本，而不用在命令行里反复敲冗长的命令。")]),s._v(" "),a("h2",{attrs:{id:"example-36-1-shell-wrapper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-36-1-shell-wrapper"}},[s._v("#")]),s._v(" Example 36-1. shell wrapper")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#!/bin/bash\n\n# 这个脚本功能是去除文件中的空白行\n# 没有做参数检查\n#\n# 也许你想添加下面的内容：\n#\n# E_NOARGS=85\n# if [ -z \"$1\" ]\n# then\n#  echo \"Usage: `basename $0` target-file\"\n#  exit $E_NOARGS\n# fi\n\nsed -e /^$/d \"$1\"\n# 就像这个命令\n#    sed -e '/^$/d' filename\n# 通过命令行调用\n\n# '-e'意思是后面为编辑命令（这个选项可省略）。\n# '^'代表行首，'$'代表行尾。\n# 这个正则表达式表示要匹配出所有行首位没有内容的行，就是空白行。\n# 是删除命令（译注：就是把刚才选出来的空白行删掉）\n\n# 将文件名中的特殊字符和空白进行转译\n\n# 这个脚本并不会真正的修改目标文件，如果想对目标文件真正的修改，请将输出重定向\n\nexit\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("h2",{attrs:{id:"example-36-2-稍微复杂一点的-shell-wrapper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-36-2-稍微复杂一点的-shell-wrapper"}},[s._v("#")]),s._v(" Example 36-2. 稍微复杂一点的 shell wrapper")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n\n#  subst.sh: 在文件中进行替换字符串的脚本\n#  例如 "sh subst.sh Smith Jones letter.txt"\n#  letter.txt 中的所有 Jones 都被替换为 Smith。\n\nARGS=3         # 这个脚本需要三个参数\nE_BADARGS=85   # 传给脚本的参数数量不正确\n\nif [ $# -ne "$ARGS" ]\nthen\n    echo "Usage: `basename $0` old-pattern new-pattern filename"\n    exit $E_BADARGS\nfi\n\nold_pattern=$1\nnew_pattern=$2\n\nif [ -f "$3" ]\nthen\n    file_name=$3\nelse\n    echo "File \\"$3\\" does not exist."\n    exit $E_BADARGS\nfi\n\n# -----------------------------------------------\n# 这里是最核心的部分\nsed -e "s/$old_pattern/$new_pattern/g" $file_name\n# -----------------------------------------------\n\n# \'s\' 是sed中的替换命令\n# /pattern/调用地址匹配\n# \'g\' 表示要对文件中的所有匹配项目都进行替换操作，而不是仅对第一个这样干。\n# 如果需要深入了解，请阅读sed命令的相关文档。\n\nexit $?  # 将这个脚本的输出重定向到一个文件即可记录真正的结果\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br")])]),a("h2",{attrs:{id:"example-36-3-一个通用的写日志文件的-shell-wrapper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-36-3-一个通用的写日志文件的-shell-wrapper"}},[s._v("#")]),s._v(" Example 36-3. 一个通用的写日志文件的 shell wrapper")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n#  logging-wrapper.sh\n#  一个通用的shell wrapper，在进行操作的同时对操作进行日志记录\n\nDEFAULT_LOGFILE=logfile.txt\n\n# 设置下面两个变量的值\nOPERATION=\n# 可以是任意操作，比如一个awk脚本或者用管道连接的复杂命令\n\nLOGFILE=\nif [ -z "$LOGFILE" ]\n    then     # 如果没有设置日志文件，则使用默认文件名\n      LOGFILE="$DEFAULT_LOGFILE"\n      fi\n\n# 对于操作命令的参数（可选）\nOPTIONS="$@"\n\n\n# 日志记录\necho "`date` + `whoami` + $OPERATION "$@"" >> $LOGFILE\n# 进行操作动作\nexec $OPERATION "$@"\n\n# 要在真正执行操作之前写日志\n# 思考下为什么要先写日志，后操作。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("h2",{attrs:{id:"example-36-4-关于awk脚本的-shell-wrapper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-36-4-关于awk脚本的-shell-wrapper"}},[s._v("#")]),s._v(" Example 36-4. 关于awk脚本的 shell wrapper")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# pr-ascii.sh: 打印ASCII码表格\n\nSTART=33   # 可打印的ASCII码范围（十进制）\nEND=127    # 不会输出不可打印的ASCII码\n\necho " Decimal   Hex     Character"   # 表头\necho " -------   ---     ---------"\n\nfor ((i=START; i<=END; i++))\ndo\n    echo $i | awk \'{printf("  %3d       %2x         %c\\n", $1, $1, $1)}\'\n# Bash内置的printf命令无法完成下面的操作: （译注：所以这使用awk脚本来实现输出）\n#     printf "%c" "$i"\ndone\n\nexit 0\n\n\n#  Decimal   Hex     Character\n#  -------   ---     ---------\n#    33       21         !\n#    34       22         "\n#    35       23         #\n#    36       24         $\n#\n#    . . .\n#\n#   122       7a         z\n#   123       7b         {\n#   124       7c         |\n#   125       7d         }\n\n\n# 将输出重定向到文件\n# 或者用管道传递给"more":  sh pr-asc.sh | more\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br")])]),a("h2",{attrs:{id:"example-36-5-另一个关于awk的-shell-wrapper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-36-5-另一个关于awk的-shell-wrapper"}},[s._v("#")]),s._v(" Example 36-5. 另一个关于awk的 shell wrapper")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n\n# 在目标文件中添加一个数字的特殊列\n# 十进制浮点数也可以，因为awk可以处理这样的输出。\n\nARGS=2\nE_WRONGARGS=85\n\nif [ $# -ne "$ARGS" ] # Check for proper number of command-line args.\nthen\n    echo "Usage: `basename $0` filename column-number"\n    exit $E_WRONGARGS\nfi\n\nfilename=$1\ncolumn_number=$2\n\n# 将shell脚本的变量传递给awk有一点难办。\n# 第一种方法是用引号将Bash脚本变量在awk脚本中包起来\n#     $\'$BASH_SCRIPT_VAR\'\n#      ^                ^\n# 下面的awk脚本就是这么干的。\n# 详细用法可以查阅awk文档。\n\n# 多行的awk脚本可以写成这样\n#   awk \'\n#   ...\n#   ...\n#   ...\n#   \'\n\n\n# 开始awk脚本\n# -----------------------------\nawk \'\n\n{ total += $\'"${column_number}"\' # 译注：这就是那个bash脚本变量\n}\nEND {\nprint total\n}     \n\n\' "$filename"\n# -----------------------------\n# 结束awk脚本\n\n\n#   将shell变量传递给awk脚本也许是不安全的\n#   所以Stephane Chazelas提出了下面的替代方案：\n#   ---------------------------------------\n#   awk -v column_number="$column_number" \' # 译注：将shell的值赋给一个awk变量\n#   { total += $column_number\n#   }\n#   END {\n#       print total\n#   }\' "$filename"\n#   ---------------------------------------\n\n\nexit 0\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br")])]),a("p",[s._v("能满足那些需要瑞士军刀般全能工具的脚本语言，就只有Perl了。Perl集合了sed和awk的能力，并且比C更加精简。它是模块化的并且能支持包括厨房洗碗槽在内的所有面向对象编程所能涉及的事物。短小的Perl脚本可以嵌入shell脚本中，甚至Perl可以完全替代shell脚本。（本书作者对此仍然抱有怀疑）")]),s._v(" "),a("h2",{attrs:{id:"example-36-6-perl嵌入bash脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-36-6-perl嵌入bash脚本"}},[s._v("#")]),s._v(" Example 36-6. Perl嵌入Bash脚本")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n\n# shell命令先于Perl脚本执行\necho "This precedes the embedded Perl script within \\"$0\\"."\necho "==============================================================="\n\nperl -e \'print "This line prints from an embedded Perl script.\\n";\'\n# 像sed命令一样，Perl使用\'-e\'选项\n\necho "==============================================================="\necho "However, the script may also contain shell and system commands."\n\nexit 0\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("即使能将Bash脚本和Perl脚本合二为一，先执行Bash部分还是Perl部分仍然要取决于调用脚本的方式。")]),s._v(" "),a("h2",{attrs:{id:"example-36-7-bash和perl脚本合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-36-7-bash和perl脚本合并"}},[s._v("#")]),s._v(" Example 36-7. Bash和Perl脚本合并")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# bashandperl.sh\n\necho "Greetings from the Bash part of the script, $0."\n# 这里可以写更多的Bash命令\n\nexit\n# Bash脚本部分结束\n\n# =======================================================\n\n#!/usr/bin/perl\n# 这部分脚本要像下面这样调用\n#    perl -x bashandperl.sh\n\nprint "Greetings from the Perl part of the script, $0.\\n";\n# Perl 看起来并不像 “echo” ...\n# 这里可以写更多的Perl命令\n\n# Perl命令部分结束\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("bash$ bash bashandperl.sh\nGreetings from the Bash part of the script.\n\nbash$ perl -x bashandperl.sh\nGreetings from the Perl part of the script.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("当然还可以用shell wrapper嵌入更多的“外来户”，比如Python或者其他的...")]),s._v(" "),a("h2",{attrs:{id:"example-36-8-python嵌入bash脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-36-8-python嵌入bash脚本"}},[s._v("#")]),s._v(" Example 36-8. Python嵌入Bash脚本")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# ex56py.sh\n\n# shell脚本先于Python脚本执行\necho "This precedes the embedded Python script within \\"$0.\\""\necho "==============================================================="\n\npython -c \'print "This line prints from an embedded Python script.\\n";\'\n# 并不像sed和Perl，Python使用\'-c\'选项\npython -c \'k = raw_input( "Hit a key to exit to outer script. " )\'\n\necho "==============================================================="\necho "However, the script may also contain shell and system commands."\n\nexit 0\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("使用脚本封装mplayer或者Google翻译服务器的一些功能，你能做出给你反馈一些信息的小东西。")]),s._v(" "),a("h2",{attrs:{id:"example-36-9-会讲话的脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-36-9-会讲话的脚本"}},[s._v("#")]),s._v(" Example 36-9. 会讲话的脚本")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n#   参见:\n#   http://elinux.org/RPi_Text_to_Speech_(Speech_Synthesis)\n\n# 为了连接Google翻译服务器，这个脚本必须连接到互联网才能工作，\n# 而且你的计算机上必须装有mplayer。\n\nspeak()\n  {\n  local IFS=+\n  # 先调用mplayer，再连接Google翻译服务器。\n  /usr/bin/mplayer -ao alsa -really-quiet -noconsolecontrols \\\n  "http://translate.google.com/translate_tts?tl=en&q="$*""\n  # 可以说话的Google翻译\n  }\n\nLINES=4\n\nspk=$(tail -$LINES $0) # 同样的结尾\nspeak "$spk"\nexit\n# BRowns 很高兴与你谈话。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("有个有趣的shell wrapper例子是Martin Matusiak的undvd，为复杂的mencoder工具提供了一个简单易用的命令行接口。另一个例子是Itzchak Rehberg的Ext3Undel，它为在ext3文件系统上恢复删除的文件提供了一整套工具。")]),s._v(" "),a("p",[s._v("Notes\n[1] Linux工具事实上很多是shell wrapper，比如/usr/bin/pdf2ps，/usr/bin/batch和/usr/bin/xmkmf。")])])}),[],!1,null,null,null);n.default=t.exports}}]);