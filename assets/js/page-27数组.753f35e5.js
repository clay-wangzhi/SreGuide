(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{1125:function(s,n,a){"use strict";a.r(n);var t=a(1),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_27-数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_27-数组"}},[s._v("#")]),s._v(" 27 数组")]),s._v(" "),a("p",[s._v("新版本的Bash支持一维数组。 数组元素可以使用符号"),a("strong",[s._v("variable[xx]")]),s._v(" 来初始化。另外，脚本可以使用"),a("strong",[s._v("declare -a variable")]),s._v("语句来制定一个数组。 如果想引用一个数组元素（也就是取值），可以使用大括号，访问形式为 ${element[xx]} 。")]),s._v(" "),a("p",[s._v("例子 27-1. 简单的数组使用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n\narea[11]=23\narea[13]=37\narea[51]=UFOs\n\n#  数组成员不一定非得是相邻或连续的。\n\n#  数组的部分成员可以不被初始化。\n#  数组中允许空缺元素。\n#  实际上，保存着稀疏数据的数组（“稀疏数组”） \n#+ 在电子表格处理软件中是非常有用的。\n\necho -n "area[11] = "\necho ${area[11]}    #  需要{大括号}。\n\necho -n "area[13] = "\necho ${area[13]}\n\necho "Contents of area[51] are ${area[51]}."\n\n# 没被初始化的数组成员打印为空值（null变量）。\necho -n "area[43] = "\necho ${area[43]}\necho "(area[43] unassigned)"\n\necho\n\n# 两个数组元素的和被赋值给另一个数组元素。\narea[5]=`expr ${area[11]} + ${area[13]}`\necho "area[5] = area[11] + area[13]"\necho -n "area[5] = "\necho ${area[5]}\n\narea[6]=`expr ${area[11]} + ${area[51]}`\necho "area[6] = area[11] + area[51]"\necho -n "area[6] = "\necho ${area[6]}\n# 这里会失败，是因为不允许整数与字符串相加。\n\necho; echo; echo\n\n# -----------------------------------------------------------------\n# 另一个数组, "area2".\n\n# 另一种给数组变量赋值的方法...\n# array_name=( XXX YYY ZZZ ... )\n\narea2=( zero one two three four )\n\necho -n "area2[0] = "\necho ${area2[0]}\n# 啊哈，从0开始计算数组下标（也就是，数组的第一个元素为[0],而不是[1]).\n\necho -n "area2[1] = "\necho ${area2[1]}    # [1] 是数组的第二个元素。\n# -----------------------------------------------------------------\n\necho; echo; echo\n\n# -----------------------------------------------\n# 第三个数组， "area3".\n# 另外一种给数组元素赋值的方法...\n# array_name=([xx]=XXX [yy]=YYY ...)\n\narea3=([17]=seventeen [24]=twenty-four)\n\necho -n "area3[17] = "\necho ${area3[17]}\n\necho -n "area3[24] = "\necho ${area3[24]}\n# -----------------------------------------------\n\nexit 0\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br")])]),a("p",[s._v("我们可以看出，初始化整数的一个简单的方法是 array=( element1 element2 ... elementN ) 。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('base64_charset=( {A..Z} {a..z} {0..9} + / = )\n#  使用扩展的一对范围 Using extended brace expansion\n#+ 去初始化数组的元素。to initialize the elements of the array.\n# 从 vladz\'s "base64.sh" 脚本中摘录过来。\n#+ 在"Contributed Scripts" 附录中可以看到.\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("Bash允许把变量当成数据来操作，即使这个变量没有明确地被声明为数组。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("string=abcABC123ABCabc\necho ${string[@]}   # abcABC123ABCabc\necho ${string[*]}   # abcABC123ABCabc\necho ${string[0]}   # abcABC123ABCabc\necho ${string[1]}   # 没有输出！\n                    # 为什么?\necho ${#string[@]}  # 1\n                    # 数组中只有一个元素。\n                    # 就是这个字符串本身。\n\n# 感谢你, Michael Zick, 指出这一点.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("类似的示范可以参考 "),a("RouterLink",{attrs:{to:"/code/shell/part2/04_3_bash_variables_are_untyped.html"}},[s._v("Bash变量是无类型的")]),s._v(" 。")],1),s._v(" "),a("p",[s._v("例子 27-2. 格式化一首诗")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# poem.sh: 将本书作者非常喜欢的一首诗，漂亮的打印出来。\n\n# 诗的行数 (单节).\nLine[1]="I do not know which to prefer,"\nLine[2]="The beauty of inflections"\nLine[3]="Or the beauty of innuendoes,"\nLine[4]="The blackbird whistling"\nLine[5]="Or just after."\n# 注意 引用允许嵌入的空格。\n\n# 出处.\nAttrib[1]=" Wallace Stevens"\nAttrib[2]="\\"Thirteen Ways of Looking at a Blackbird\\""\n# 这首诗已经是公共版权了 (版权已经过期了).\n\necho\n\ntput bold   # 粗体打印.\n\nfor index in 1 2 3 4 5    # 5行.\ndo\n    printf "     %s\\n" "${Line[index]}"\ndone\n\nfor index in 1 2          # 出处为2行。\ndo\n    printf "        %s\\n" "${Attrib[index]}"\ndone\n\ntput sgr0       # 重置终端。Reset terminal.\n                # 查看 \'tput\' 文档.\necho\n\nexit 0\n\n# 练习:\n# --------\n# 修改这个脚本，使其能够从一个文本数据文件中提取出一首诗的内容，然后将其漂亮的打印出来。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br")])]),a("p",[s._v("数组元素有它们独特的语法，甚至标准Bash命令和操作符，都有特殊的选项用以配合数组操作。")]),s._v(" "),a("p",[s._v("例子 27-3. 多种数组操作")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# array-ops.sh: 更多有趣的数组用法.\n\narray=( zero one two three four five )\n# 数组元素 0   1   2    3     4    5\n\necho ${array[0]}        #  0\necho ${array:0}         #  0\n                        #  第一个元素的参数扩展,\n                        #+ 从位置0(#0)开始（即第一个字符）.\necho ${array:1}         #  ero\n                        #  第一个元素的参数扩扎，\n                        #+ 从位置1（#1）开始（即第二个字符）。\n\necho "--------------"\n\necho ${#array[0]}       #  4\n                        # 第一个数组元素的长度。\necho ${#array}          #4\n                        # 第一个数组元素的长度。\n                        #  (另一种表示形式)\n\necho ${#array[1]}       # 3\n                        # 第二个数组元素的长度。\n                        #  Bash中的数组是从0开始索引的。\n\necho ${#array[*]}       # 6\n                        # 数组中的元素个数。\necho ${#array[@]}       # 6\n                        # 数组中的元素个数.\necho "--------------"\n\narray2=( [0]="first element" [1]="second element" [3]="fourth element" )\n#            ^     ^       ^     ^      ^       ^     ^      ^       ^\n# 引用允许嵌入的空格,在每个单独的数组元素中。\n\necho ${array2[0]}       # 第一个元素\necho ${array2[1]}       # 第二个元素\necho ${array2[2]}       #\n                        # 因为并没有被初始化，所以此值为null。\necho ${array2[3]}       # 第四个元素.\necho ${#array2[0]}      # 13    (第一个元素的长度)\necho ${#array2[*]}      # 3     (数组中元素的个数)\n\nexit\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br")])]),a("p",[s._v("大部分标准"),a("RouterLink",{attrs:{to:"/code/shell/part3/10_1_manipulating_strings.html"}},[s._v("字符串操作")]),s._v(" 都可以用于数组中。")],1),s._v(" "),a("p",[s._v("例子27-4. 用于数组的字符串操作")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# array-strops.sh: 用于数组的字符串操作。\n\n# 本脚本由Michael Zick 所编写.\n# 通过了授权在本书中使用。\n# 修复: 05 May 08, 04 Aug 08.\n\n#  一般来说，任何类似于 ${name ... }(这种形式)的字符串操作\n#+ 都能够应用于数组中的所有字符串元素，\n#+ 比如说${name[@] ... } 或者 ${name[*] ...} 这两种形式。 \n\narrayZ=( one two three four five five )\n\necho\n\n# 提取尾部的子串。\necho ${arrayZ[@]:0}     # one two three four five five\n#                ^       所有元素 \n\necho ${arrayZ[@]:1} \t# two three four five five\n#                ^\t\telement[0]后边的所有元素.\n\necho ${arrayZ[@]:1:2} \t# two three\n#                  ^\t只提取element[0]后边的两个元素.\n\necho "---------"\n\n\n# 子串删除 \n\n# 从字符串的开头删除最短的匹配。\n\necho ${arrayZ[@]#f*r}   # one two three five five\n#               ^       # 匹配将应用于数组的所有元素。 \n                        # 匹配到了"four",并且将它删除。 \n\n# 从字符串的开头删除最长的匹配\necho ${arrayZ[@]##t*e}  # one two four five five\n#               ^^      # 匹配将应用于数组的所有元素\n                        # 匹配到了 "three" ,并且将它删除。\n\n# 从字符串的结尾删除最短的匹配\necho ${arrayZ[@]%h*e}   # one two t four five five\n#               ^       # 匹配将应用于数组的所有元素\n                        # 匹配到了 "hree" ,并且将它删除。\n\t\t\t\t\t\n# 从字符串的结尾删除最长的匹配\necho ${arrayZ[@]%%t*e}  # one two four five five\n#               ^^      # 匹配将应用于数组的所有元素\n                        # 匹配到了 "three" ,并且将它删除。\n\t\t\t\t\t\t\necho "----------------------"\n\n# 子串替换\n\n# 第一个匹配到的子串将会被替换。\necho ${arrayZ[@]/fiv/XYZ}   # one two three four XYZe XYZe\n#               ^           # 匹配将应用于数组的所有元素\n\n# 所有匹配到的子串将会被替换。\necho ${arrayZ[@]//iv/YY}    # one two three four fYYe fYYe\n                            # 匹配将应用于数组的所有元素\n\n# 删除所有的匹配子串\n# 如果没有指定替换字符串的话，那就意味着\'删除\'...\necho ${arrayZ[@]//fi/}      # one two three four ve ve\n#               ^^          # 匹配将应用于数组的所有元素\n\n# 替换字符串前端子串\necho ${arrayZ[@]/#fi/XY}    # one two three four XYve XYve\n#                ^          # 匹配将应用于数组的所有元素\n\n# 替换字符串后端子串\necho ${arrayZ[@]/%ve/ZZ}\t# one two three four fiZZ fiZZ\n#                ^\t\t\t# 匹配将应用于数组的所有元素\n\necho ${arrayZ[@]/%o/XX}\t\t# one twXX three four five five\n#                ^\t\t\t# 为什么?\n\necho "-----------------------------"\n\nreplacement() {\n    echo -n "!!!"\n}\n\necho ${arrayZ[@]/%e/$(replacement)}\n#                ^  ^^^^^^^^^^^^^^\n# on!!! two thre!!! four fiv!!! fiv!!!\n# replacement()的标准输出就是那个替代字符串.\n# Q.E.D: 替换动作实际上是一个‘赋值’。\n\necho "------------------------------------"\n\n#  使用"for-each"之前:\necho ${arrayZ[@]//*/$(replacement optional_arguments)}\n#                ^^ ^^^^^^^^^^^^^\n# !!! !!! !!! !!! !!! !!!\n\n#  现在，如果Bash只将匹配到的字符串\n#+ 传递给被调用的函数...\n\necho\n\nexit 0\n\n#  在将处理后的结果发送到大工具之前，比如-- Perl, Python, 或者其它工具\n#  回忆一下:\n#    $( ... ) 是命令替换。\n#    一个函数作为子进程运行。\n#    一个函数将结果输出到stdout。\n#    赋值，结合"echo"和命令替换，\n#+   可以读取函数的stdout.\n#    使用name[@]表示法指定了一个 "for-each"\n#+   操作。\n#  Bash比你想象的更加强力.\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br")])]),a("p",[a("RouterLink",{attrs:{to:"/code/shell/part3/12_command_substitution.html"}},[s._v("命令替换")]),s._v(" 可以构造数组的独立元素。")],1),s._v(" "),a("p",[s._v("例子 27-5. 将脚本中的内容赋值给数组")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# script-array.sh: 将脚本中的内容赋值给数组。 \n# 这个脚本的灵感来自于 Chris Martii 的邮件 (感谢!).\n\nscript_contents=( $(cat "$0") )  # 将这个脚本的内容($0） \n                                 #+ 赋值给数组\nfor element in $(seq 0 $((${#script_contents[@]} - 1)))\n  do                #  ${#script_contents[@]}\n                    #+ 表示数组元素的个数\n                    #\n                    #  问题:\n                    #  为什么必须使用seq 0 ?\n                    #  用seq 1来试一下.\n  echo -n "${script_contents[$element]}"\n                    # 在同一行上显示脚本中每个域的内容。\n# echo -n "${script_contents[element]}" also works because of ${ ... }.\n  echo -n " -- "    # 使用 " -- " 作为域分隔符。\ndone\necho\n\nexit 0\n# 练习:\n# --------\n#  修改这个脚本，\n#+ 让这个脚本能够按照它原本的格式输出，\n#+ 连同空格，换行，等等。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[s._v("在数组环境中，某些Bash "),a("RouterLink",{attrs:{to:"/code/shell/part4/15_internal_commands_and_builtins.html"}},[s._v("内建命令")]),s._v(" 的含义可能会有些轻微的改变。比如，"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/internal.html#UNSETREF",target:"_blank",rel:"noopener noreferrer"}},[s._v("unset"),a("OutboundLink")],1),s._v(" 命令可以删除数组元素，甚至能够删除整个数组。")],1),s._v(" "),a("p",[s._v("例子 27-6. 一些数组的专有特性")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n\ndeclare -a colors\n#  脚本中所有的后续命令都会把\n#+ "colors" 当做数组 \n\necho "Enter your favorite colors (separated from each other by a space)."\n\nread -a colors    # 至少需要键入3种颜色，以便于后边的演示。\n#  \'read\'命令的特殊选项 ,\n#+ 允许给数组元素赋值。\n\necho\n\nelement_count=${#colors[@]}\n# 提取数组元素个数的特殊语法\n#     用element_count=${#colors[*]} 也可以。\n#\n#  "@" 变量允许在引用中存在单次分割，\n#+ (依靠空白字符来分割变量).\n#\n#  这就好像"$@" 和 "$*"\n#+ 在位置参数中所表现出来的行为一样。\n\nindex=0\n\nwhile [ "$index" -lt "$element_count" ]\ndo    # 列出数组中的所有元素\n  echo ${colors[$index]}\n  #    ${colors[index]} 也可以工作，因为它${ ... }之中.\n  let "index = $index + 1"\n  # Or:\n  #    ((index++))\ndone\n# 每个数组元素被列为单独的一行\n# 如果没有这种要求的话，可以使用echo -n "${colors[$index]} "\n#\n# 也可以使用“for”循环来做:\n#   for i in "${colors[@]}"\n#   do\n#     echo "$i"\n#   done\n# (Thanks, S.C.)\n\necho\n\n# 再次列出数组中的所有元素，不过这次的做法更为优雅。\n  echo ${colors[@]}          # echo ${colors[*]} 也可以工作.\n\necho\n\n# "unset"命令既可以删除数组数据，也可以删除整个数组。\nunset colors[1]\t\t\t# 删除数组的第2个元素。\n\t\t\t\t\t\t# 作用等同于colors[1]=\necho  ${colors[@]}\t\t# 再次列出数组内容，第2个元素没了。\n\nunset colors\t\t\t# 删除整个数组。\n\t\t\t\t\t\t#  unset colors[*] 以及\n\t\t\t\t\t\t#+ unset colors[@] 都可以.\necho; echo -n "Colors gone."\necho ${colors[@]}\t\t# 再次列出数组内容，内容为空。\nexit 0\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br")])]),a("p",[s._v("正如我们在前面的例子中所看到的，"),a("strong",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mrow",[a("mi",[s._v("a")]),a("mi",[s._v("r")]),a("mi",[s._v("r")]),a("mi",[s._v("a")]),a("msub",[a("mi",[s._v("y")]),a("mi",[s._v("n")])],1),a("mi",[s._v("a")]),a("mi",[s._v("m")]),a("mi",[s._v("e")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",{attrs:{mathvariant:"normal"}},[s._v("@")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")])],1),a("mo",[s._v("∗")]),a("mo",[s._v("∗")]),a("mtext",[s._v("或者")]),a("mo",[s._v("∗")]),a("mo",[s._v("∗")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("{array_name[@]}**  或者  **")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathnormal"},[s._v("a")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[s._v("rr")]),a("span",{staticClass:"mord mathnormal"},[s._v("a")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[s._v("y")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t vlist-t2"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.151392em"}},[a("span",{staticStyle:{top:"-2.5500000000000003em","margin-left":"-0.03588em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mathnormal mtight"},[s._v("n")])])])]),a("span",{staticClass:"vlist-s"},[s._v("​")])]),a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.15em"}},[a("span")])])])])]),a("span",{staticClass:"mord mathnormal"},[s._v("am")]),a("span",{staticClass:"mord mathnormal"},[s._v("e")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord"},[s._v("@")]),a("span",{staticClass:"mclose"},[s._v("]")])]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),a("span",{staticClass:"mbin"},[s._v("∗")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[s._v("∗")]),a("span",{staticClass:"mord cjk_fallback"},[s._v("或者")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),a("span",{staticClass:"mbin"},[s._v("∗")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.46528em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[s._v("∗")])])])]),s._v("{array_name[*]}")]),s._v("  都与数组中的所有元素相关。同样的，为了计算数组的元素个数，可以使用 "),a("strong",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mrow",[a("mi",[s._v("a")]),a("mi",[s._v("r")]),a("mi",[s._v("r")]),a("mi",[s._v("a")]),a("msub",[a("mi",[s._v("y")]),a("mi",[s._v("n")])],1),a("mi",[s._v("a")]),a("mi",[s._v("m")]),a("mi",[s._v("e")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",{attrs:{mathvariant:"normal"}},[s._v("@")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")])],1),a("mo",[s._v("∗")]),a("mo",[s._v("∗")]),a("mtext",[s._v("或者")]),a("mo",[s._v("∗")]),a("mo",[s._v("∗")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("{array_name[@]}**  或者  **")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathnormal"},[s._v("a")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[s._v("rr")]),a("span",{staticClass:"mord mathnormal"},[s._v("a")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[s._v("y")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t vlist-t2"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.151392em"}},[a("span",{staticStyle:{top:"-2.5500000000000003em","margin-left":"-0.03588em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mathnormal mtight"},[s._v("n")])])])]),a("span",{staticClass:"vlist-s"},[s._v("​")])]),a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.15em"}},[a("span")])])])])]),a("span",{staticClass:"mord mathnormal"},[s._v("am")]),a("span",{staticClass:"mord mathnormal"},[s._v("e")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord"},[s._v("@")]),a("span",{staticClass:"mclose"},[s._v("]")])]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),a("span",{staticClass:"mbin"},[s._v("∗")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[s._v("∗")]),a("span",{staticClass:"mord cjk_fallback"},[s._v("或者")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),a("span",{staticClass:"mbin"},[s._v("∗")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.46528em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[s._v("∗")])])])]),s._v("{array_name[*]}")]),s._v("  。 "),a("strong",[a("span",{staticClass:"katex-error",attrs:{title:"ParseError: KaTeX parse error: Expected &#039;}&#039;, got &#039;#&#039; at position 2: {#̲array_name}**  …"}},[s._v("{#array_name}**  是数组第一个元素的长度，也就是  **")]),s._v("{array_name[0]}")]),s._v("  的长度（字符个数）。")]),s._v(" "),a("p",[s._v("例子 27-7. 空数组与包含空元素的数组")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# empty-array.sh\n\n#  感谢Stephane Chazelas制作这个例子的原始版本。 \n#+ 同时感谢Michael Zick 和 Omair Eshkenazi 对这个例子所作的扩展。\n#  以及感谢Nathan Coulter 作的声明和感谢。\n\n# 空数组与包含有空元素的数组，这两个概念不同。\n  \narray0=( first second third )\narray1=( \'\' )\t\t# "array1" 包含一个空元素.\narray2=( )\t\t\t# 没有元素. . . "array2"为空 \narray3=()\t\t\t# 这个数组呢?\n\necho\nListArray()\n{\n\techo\n\techo "Elements in array0:  ${array0[@]}"\n\techo "Elements in array1:  ${array1[@]}"\n\techo "Elements in array2:  ${array2[@]}"\n\techo "Elements in array3:  ${array3[@]}"\n\techo\n\techo "Length of first element in array0 = ${#array0}"\n\techo "Length of first element in array1 = ${#array1}"\n\techo "Length of first element in array2 = ${#array2}"\n\techo "Length of first element in array3 = ${#array3}"\n\techo\n\techo "Number of elements in array0 = ${#array0[*]}"  # 3\n\techo "Number of elements in array1 = ${#array1[*]}"  # 1  (Surprise!)\n\techo "Number of elements in array2 = ${#array2[*]}"  # 0\n\techo "Number of elements in array3 = ${#array3[*]}"  # 0\n}\n\n# ===================================================================\n\nListArray\n\n# 尝试扩展这些数组。\n\n# 添加一个元素到这个数组。\narray0=( "${array0[@]}" "new1" )\narray1=( "${array1[@]}" "new1" )\narray2=( "${array2[@]}" "new1" )\narray3=( "${array3[@]}" "new1" )\n\nListArray\n\n# 或者\narray0[${#array0[*]}]="new2"\narray1[${#array1[*]}]="new2"\narray2[${#array2[*]}]="new2"\narray3[${#array3[*]}]="new2"\n\nListArray\n\n# 如果你按照上边的方法对数组进行扩展的话，数组比较像‘栈’\n# 上边的操作就是‘压栈’\n# ‘栈’的高度为：\nheight=${#array2[@]}\necho\necho "Stack height for array2 = $height"\n\n# \'出栈’就是：\nunset array2[${#array2[@]}-1]   # 数组从0开始索引 \nheight=${#array2[@]}            #+ 这就意味着数组的第一个下标是0\necho\necho "POP"\necho "New stack height for array2 = $height"\n\nListArray\n\n# 只列出数组array0的第二个和第三个元素。\nfrom=1              # 从0开始索引。\nto=2\narray3=( ${array0[@]:1:2} )\necho\necho "Elements in array3:  ${array3[@]}"\n\n# 处理方式就像是字符串（字符数组）。\n# 试试其他的“字符串”形式。\n\n# 替换:\narray4=( ${array0[@]/second/2nd} )\necho\necho "Elements in array4:  ${array4[@]}"\n\n# 替换掉所有匹配通配符的字符串\narray5=( ${array0[@]//new?/old} )\necho\necho "Elements in array5:  ${array5[@]}"\n\n# 当你觉得对此有把握的时候...\narray6=( ${array0[@]#*new} )\necho # This one might surprise you.\necho "Elements in array6:  ${array6[@]}"\n\narray7=( ${array0[@]#new1} )\necho # 数组array6之后就没有惊奇了。\necho "Elements in array7:  ${array7[@]}"\n\n# 看起来非常像...\narray8=( ${array0[@]/new1/} )\necho\necho "Elements in array8:  ${array8[@]}"\n\n# 所以，让我们怎么形容呢？\n\n#  对数组var[@]中的每个元素The string operations are performed on\n#+ 进行连续的字符串操作。each of the elements in var[@] in succession.\n#  因此：Bash支持支持字符串向量操作，\n#  如果结果是长度为0的字符串\n#+ 元素会在结果赋值中消失不见。\n#  然而，如果扩展在引用中，那个空元素会仍然存在。\n\n#  Michael Zick:   问题--这些字符串是强引用还是弱引用？ \n#  Nathan Coulter:  没有像弱引用的东西\n#!    真正发生的事情是\n#!+   匹配的格式发生在\n#!+   [word]的所有其它扩展之后\n#!+   比如像${parameter#word}.\n\nzap=\'new*\'\narray9=( ${array0[@]/$zap/} )\necho\necho "Number of elements in array9:  ${#array9[@]}"\narray9=( "${array0[@]/$zap/}" )\necho "Elements in array9:  ${array9[@]}"\n# 此时，空元素仍然存在\necho "Number of elements in array9:  ${#array9[@]}"\n\n# 当你还在认为你身在Kansas州时...\narray10=( ${array0[@]#$zap} )\necho\necho "Elements in array10:  ${array10[@]}"\n# 但是，如果被引用的话，*号将不会被解释。\narray10=( ${array0[@]#"$zap"} )\necho\necho "Elements in array10:  ${array10[@]}"\n# 可能，我们仍然在Kansas...\n# (上面的代码块Nathan Coulter所修改.)\n\n#  比较 array7 和array10.\n#  比较array8 和array9.\n\n#  重申: 所有所谓弱引用的东西\n#  Nathan Coulter 这样解释:\n#  word在${parameter#word}中的匹配格式在\n#+ 参数扩展之后和引用移除之前已经完成了。\n#  在通常情况下，格式匹配在引用移除之后完成。\n\nexit\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br"),a("span",{staticClass:"line-number"},[s._v("119")]),a("br"),a("span",{staticClass:"line-number"},[s._v("120")]),a("br"),a("span",{staticClass:"line-number"},[s._v("121")]),a("br"),a("span",{staticClass:"line-number"},[s._v("122")]),a("br"),a("span",{staticClass:"line-number"},[s._v("123")]),a("br"),a("span",{staticClass:"line-number"},[s._v("124")]),a("br"),a("span",{staticClass:"line-number"},[s._v("125")]),a("br"),a("span",{staticClass:"line-number"},[s._v("126")]),a("br"),a("span",{staticClass:"line-number"},[s._v("127")]),a("br"),a("span",{staticClass:"line-number"},[s._v("128")]),a("br"),a("span",{staticClass:"line-number"},[s._v("129")]),a("br"),a("span",{staticClass:"line-number"},[s._v("130")]),a("br"),a("span",{staticClass:"line-number"},[s._v("131")]),a("br"),a("span",{staticClass:"line-number"},[s._v("132")]),a("br"),a("span",{staticClass:"line-number"},[s._v("133")]),a("br"),a("span",{staticClass:"line-number"},[s._v("134")]),a("br"),a("span",{staticClass:"line-number"},[s._v("135")]),a("br"),a("span",{staticClass:"line-number"},[s._v("136")]),a("br"),a("span",{staticClass:"line-number"},[s._v("137")]),a("br"),a("span",{staticClass:"line-number"},[s._v("138")]),a("br"),a("span",{staticClass:"line-number"},[s._v("139")]),a("br"),a("span",{staticClass:"line-number"},[s._v("140")]),a("br"),a("span",{staticClass:"line-number"},[s._v("141")]),a("br"),a("span",{staticClass:"line-number"},[s._v("142")]),a("br"),a("span",{staticClass:"line-number"},[s._v("143")]),a("br"),a("span",{staticClass:"line-number"},[s._v("144")]),a("br"),a("span",{staticClass:"line-number"},[s._v("145")]),a("br"),a("span",{staticClass:"line-number"},[s._v("146")]),a("br"),a("span",{staticClass:"line-number"},[s._v("147")]),a("br"),a("span",{staticClass:"line-number"},[s._v("148")]),a("br"),a("span",{staticClass:"line-number"},[s._v("149")]),a("br"),a("span",{staticClass:"line-number"},[s._v("150")]),a("br"),a("span",{staticClass:"line-number"},[s._v("151")]),a("br"),a("span",{staticClass:"line-number"},[s._v("152")]),a("br")])]),a("p",[a("strong",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mrow",[a("mi",[s._v("a")]),a("mi",[s._v("r")]),a("mi",[s._v("r")]),a("mi",[s._v("a")]),a("msub",[a("mi",[s._v("y")]),a("mi",[s._v("n")])],1),a("mi",[s._v("a")]),a("mi",[s._v("m")]),a("mi",[s._v("e")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",{attrs:{mathvariant:"normal"}},[s._v("@")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")])],1),a("mo",[s._v("∗")]),a("mo",[s._v("∗")]),a("mtext",[s._v("和")]),a("mo",[s._v("∗")]),a("mo",[s._v("∗")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("{array_name[@]}** 和 **")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathnormal"},[s._v("a")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[s._v("rr")]),a("span",{staticClass:"mord mathnormal"},[s._v("a")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[s._v("y")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t vlist-t2"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.151392em"}},[a("span",{staticStyle:{top:"-2.5500000000000003em","margin-left":"-0.03588em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mathnormal mtight"},[s._v("n")])])])]),a("span",{staticClass:"vlist-s"},[s._v("​")])]),a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.15em"}},[a("span")])])])])]),a("span",{staticClass:"mord mathnormal"},[s._v("am")]),a("span",{staticClass:"mord mathnormal"},[s._v("e")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord"},[s._v("@")]),a("span",{staticClass:"mclose"},[s._v("]")])]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),a("span",{staticClass:"mbin"},[s._v("∗")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[s._v("∗")]),a("span",{staticClass:"mord cjk_fallback"},[s._v("和")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),a("span",{staticClass:"mbin"},[s._v("∗")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.46528em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[s._v("∗")])])])]),s._v("{array_name[*]}")]),s._v(" 的关系非常类似于 "),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/internalvariables.html#APPREF",target:"_blank",rel:"noopener noreferrer"}},[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",{attrs:{mathvariant:"normal"}},[s._v("@")]),a("mtext",[s._v("和")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("@ 和")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.69444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[s._v("@")]),a("span",{staticClass:"mord cjk_fallback"},[s._v("和")])])])]),s._v("*"),a("OutboundLink")],1),s._v("。这种数组用法非常广泛。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# 复制一个数组\narray2=( "${array1[@]}" )\n# 或者\narray2="${array1[@]}"\n#\n# 然而，如果在“缺项”数组中使用的话，将会失败 \n#+ 也就是说数组中存在空洞（中间的某个元素没赋值），\n#+ 这个问题由Jochen DeSmet 指出.\n# ------------------------------------------\n  array1[0]=0\n# array1[1] not assigned\n  array1[2]=2\n  array2=( "${array1[@]}" )       # 拷贝它？\necho ${array2[0]}      # 0\necho ${array2[2]}      # (null), 应该是 2\n# ------------------------------------------\n# 添加一个元素到数组。\narray=( "${array[@]}" "new element" )\n# 或者\narray[${#array[*]}]="new element"\n# 感谢, S.C.\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://tldp.org/LDP/abs/images/tip.gif",alt:"info"}}),s._v(" "),a("strong",[s._v("array=( element1 element2 ... elementN )")]),s._v(" 初始化操作，如果有"),a("RouterLink",{attrs:{to:"/code/shell/part3/12_command_substitution.html"}},[s._v("命令替换")]),s._v("的帮助，就可以将一个文本文件的内容加载到数组。")],1),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#!/bin/bash\nfilename=sample_file\n#            cat sample_file\n#\n# \t\t\t1  a  b  c\n# \t\t\t2  d  e  fg\n\ndeclare -a array1\n\narray1=( `cat \"$filename\"`)\t\t#  将$filename的内容\n#         把文件内容展示到输出\t#+ 加载到数组array1.\n#\n#  array1=( `cat \"$filename\" | tr '\\n' ' '`)\n#                           把文件中的换行替换为空格 \n# 其实这样做是没必要的，因为Bash在做单词分割的时候， \n#+将会把换行转换为空格。\n\necho ${array1[@]}            # 打印数组\n#                              1 a b c 2 d e fg\n#\n#  文件中每个被空白符分割的“单词”\n#+ 都被保存到数组的一个元素中。\n\nelement_count=${#array1[*]}\necho $element_count          # 8\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v("出色的技巧使得数组的操作技术又多了一种。")]),s._v(" "),a("p",[s._v("例子 27-8. 初始化数组")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#! /bin/bash\n# array-assign.bash\n\n# 数组操作是Bash所特有的，\n#+ 所以才使用".bash" 作为脚本扩展名\n\n# Copyright (c) Michael S. Zick, 2003, All rights reserved.\n# License: Unrestricted reuse in any form, for any purpose.\n# Version: $ID$\n#\n# 说明与注释由 William Park所添加.\n\n#  基于 Stephane Chazelas所提供的例子\n#+ 它是在ABS中的较早版本。\n\n# \'times\' 命令的输出格式:\n# User CPU <space> System CPU\n# User CPU of dead children <space> System CPU of dead children\n\n#  Bash有两种方法， \n#+ 可以将一个数组的所有元素都赋值给一个新的数组变量。\n#  这两个方法都会丢弃数组中的“空引用“（null值）元素\n#+ 在2.04和以后的Bash版本中。\n#  另一种给数组赋值的方法将会被添加到新版本的Bash中，\n#+ 这种方法采用[subscript]=value 形式，来维护数组下标与元素值之间的关系。 \n\n#  可以使用内部命令来构造一个大数组，\n#+ 当然，构造一个包含上千元素数组的其它方法\n#+ 也能很好的完成任务\n\ndeclare -a bigOne=( /dev/* )  # /dev下的所有文件 . . .\necho\necho \'Conditions: Unquoted, default IFS, All-Elements-Of\'\necho "Number of elements in array is ${#bigOne[@]}"\n\n# set -vx\n\necho\necho \'- - testing: =( ${array[@]} ) - -\'\ntimes\ndeclare -a bigTwo=( ${bigOne[@]} )\n# 注意括号:    ^              ^\ntimes\necho\n\necho \'- - testing: =${array[@]} - -\'\ntimes\ndeclare -a bigThree=${bigOne[@]}\n# 这次没用括号。\ntimes\n#  通过比较，可以发现第二种格式的赋值更快一些，\n#+ 正如 Stephane Chazelas指出的那样\n#\n#  William Park 解释:\n#+ bigTwo数组是作为一个单个字符串被赋值的(因为括号)\n#+ 而BigThree数组，则是一个元素一个元素进行的赋值。\n#  所以，实质上是:\n#                   bigTwo=( [0]="..." [1]="..." [2]="..." ... )\n#                   bigThree=( [0]="... ... ..." )\n#\n#  通过这样确认:  echo ${bigTwo[0]}\n#                   echo ${bigThree[0]}\n#  在本书的例子中，我还是会继续使用第一种形式， \n#+ 因为，我认为这种形式更有利于将问题阐述清楚。\n\n#  在我所使用的例子中，在其中复用的部分，\n#+ 还是使用了第二种形式，那是因为这种形式更快。\n\n# MSZ: 很抱歉早先的疏忽。\n\n#  注意:\n#  ----\n#  32和44的"declare -a" 语句其实不是必需的， \n#+ 因为Array=(...)形式\n#+ 只能用于数组\n#  然而，如果省略这些声明的话，\n#+ 会导致脚本后边的相关操作变慢。\n#  试试看，会发生什么.\n\nexit 0\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://tldp.org/LDP/abs/images/note.gif",alt:"extra"}}),s._v(" 在数组声明的时候添加一个额外的"),a("strong",[s._v("declare -a")]),s._v("语句，能够加速后续的数组操作速度。")]),s._v(" "),a("p",[s._v("例子 27-9. 拷贝和连接数组")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#! /bin/bash\n# CopyArray.sh\n#\n# 这个脚本由Michael Zick所编写.\n# 这里已经通过作者的授权\n\n#  如何“通过名字传值&通过名字返回”\n#+ 或者“建立自己的赋值语句”。\n\nCpArray_Mac() {\n\t# 建立赋值命令\n\techo -n \'eval \'\n    echo -n "$2"                    # 目的名字\n    echo -n \'=( ${\'\n    echo -n "$1"                    # 源名字\n    echo -n \'[@]} )\'\n\n# 上边这些语句会构成一条命令。\n# 这仅仅是形式上的问题。\n}\n\ndeclare -f CopyArray\nCopyArray=CpArray_Mac\n\nHype() {\n# "Pointer"函数\n# 状态产生器\n# 需要连接的数组名为$1.\n# (把这个数组与字符串"Really Rocks"结合起来，形成一个新数组.)\n# 并将结果从数组$2中返回.\n\n    local -a TMP\n    local -a hype=( Really Rocks )\n    $($CopyArray $1 TMP)\n    TMP=( ${TMP[@]} ${hype[@]} )\n    $($CopyArray TMP $2)\n}\n\ndeclare -a before=( Advanced Bash Scripting )\ndeclare -a after\n\necho "Array Before = ${before[@]}"\n\nHype before after\n\necho "Array After = ${after[@]}"\n\n# 连接的太多了?\n\necho "What ${after[@]:3:2}?"\ndeclare -a modest=( ${after[@]:2:1} ${after[@]:3:2} )\n#                    ---- 子串提取 ----\n\necho "Array Modest = ${modest[@]}"\n\n# \'before\' 发生了什么变化 ?\n\necho "Array Before = ${before[@]}"\n\nexit 0\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br")])]),a("p",[s._v("例子27-10. 关于串联数组的更多信息")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#! /bin/bash\n# array-append.bash\n\n# Copyright (c) Michael S. Zick, 2003, All rights reserved.\n# License: Unrestricted reuse in any form, for any purpose.\n# Version: $ID$\n#\n#  在格式上，由M.C做了一些修改.\n\n# 数组操作是Bash特有的属性。\n# 传统的UNIX /bin/sh 缺乏类似的功能。\n\n#  将这个脚本的输出通过管道传递给'more'，\n#+ 这样做的目的是放止输出的内容超过终端能够显示的范围，\n#  或者，重定向输出到文件中。\n\ndeclare -a array1=( zero1 one1 two1 )\n# 依次使用下标\ndeclare -a array2=( [0]=zero2 [2]=two2 [3]=three2 )\n# 数组中存在空缺的元素-- [1] 未定义\n\necho\necho '- Confirm that the array is really subscript sparse. -'\necho \"Number of elements: 4\"        # 为了演示，这里作了硬编码\nfor (( i = 0 ; i < 4 ; i++ ))\ndo\n    echo \"Element [$i]: ${array2[$i]}\"\ndone\n# 也可以参考一个更通用的例子， basics-reviewed.bash.\n\n\ndeclare -a dest\n\n# 将两个数组合并到第3个数组中。\necho\necho 'Conditions: Unquoted, default IFS, All-Elements-Of operator'\necho '- Undefined elements not present, subscripts not maintained. -'\n# # 那些未定义的元素不会出现；组合时会丢弃这些元素。\n\ndest=( ${array1[@]} ${array2[@]} )\n# dest=${array1[@]}${array2[@]} \t\t# 奇怪的结果，可能是个bug。\n\n# 现在，打印结果。\necho\necho '- - Testing Array Append - -'\ncnt=${#dest[@]}\n\necho \"Number of elements: $cnt\"\nfor (( i = 0 ; i < cnt ; i++ ))\ndo\n    echo \"Element [$i]: ${dest[$i]}\"\ndone\n\n# 将数组赋值给一个数组中的元素（两次）\ndest[0]=${array1[@]}\ndest[1]=${array2[@]}\n\n# 打印结果\necho\necho '- - Testing modified array - -'\ncnt=${#dest[@]}\n\necho \"Number of elements: $cnt\"\nfor (( i = 0 ; i < cnt ; i++ ))\ndo\necho \"Element [$i]: ${dest[$i]}\"\ndone\n\n# 检查第二个元素的修改状况.\necho\necho '- - Reassign and list second element - -'\n\ndeclare -a subArray=${dest[1]}\ncnt=${#subArray[@]}\n\necho \"Number of elements: $cnt\"\nfor (( i = 0 ; i < cnt ; i++ ))\ndo\n    echo \"Element [$i]: ${subArray[$i]}\"\ndone\n\n# 如果你使用'=${ ... }'形式\n#+ 将一个数组赋值到另一个数组的一个元素中,\n#+ 那么这个数组的所有元素都会被转换为一个字符串,\n#+ 这个字符串中的每个数组元素都以空格进行分隔(其实是IFS的第一个字符).\n\n# 如果原来数组中的所有元素都不包含空白符 . . .\n# 如果原来的数组下标都是连续的 . . .\n# 那么我们就可以将原来的数组进行恢复.\n\n# 从修改过的第二个元素中, 将原来的数组恢复出来.\necho\necho '- - Listing restored element - -'\n\ndeclare -a subArray=( ${dest[1]} )\ncnt=${#subArray[@]}\n\necho \"Number of elements: $cnt\"\nfor (( i = 0 ; i < cnt ; i++ ))\ndo\n    echo \"Element [$i]: ${subArray[$i]}\"\ndone\n\necho '- - Do not depend on this behavior. - -'\necho '- - This behavior is subject to change - -'\necho '- - in versions of Bash newer than version 2.05b - -'\n\n# MSZ: 抱歉，之前混淆了一些要点。\n\nexit 0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br")])]),a("hr"),s._v(" "),a("p",[s._v("有了数组, 我们就可以在脚本中实现一些比较熟悉的算法. 这么做, 到底是不是一个好主意, 我们在这里不做讨论, 还是留给读者决定吧.")]),s._v(" "),a("p",[s._v("例子 27-11. 冒泡排序")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# bubble.sh: 一种排序方式, 冒泡排序.\n\n# 回忆一下冒泡排序的算法. 我们在这里要实现它...\n\n# 依靠连续的比较数组元素进行排序,\n#+ 比较两个相邻元素, 如果顺序不对, 就交换这两个元素的位置.\n# 当第一轮比较结束之后, 最"重"的元素就会被移动到最底部.\n# 当第二轮比较结束之后, 第二"重"的元素就会被移动到次底部的位置.\n# 依此类推.\n# 这意味着每轮比较不需要比较之前已经"沉淀"好的数据.\n# 因此你会注意到后边的数据在打印的时候会快一些.\n\n\nexchange() {\n  # 交换数组中的两个元素.\n  local temp=${Countries[$1]} #  临时保存\n                              #+ 要交换的那个元素 \n  Countries[$1]=${Countries[$2]}\n  Countries[$2]=$temp\n  \n  return \n}\n\ndeclare -a Countries  #  声明数组,\n                      #+ 此处是可选的, 因为数组在下面被初始化\n#  我们是否可以使用转义符(\\)\n#+ 来将数组元素的值放在不同的行上?\n#  可以.\n\nCountries=(Netherlands Ukraine Zaire Turkey Russia Yemen Syria \\\nBrazil Argentina Nicaragua Japan Mexico Venezuela Greece England \\\nIsrael Peru Canada Oman Denmark Wales France Kenya \\\nXanadu Qatar Liechtenstein Hungary)\n\n# "Xanadu" 虚拟出来的世外桃源.\n#+ Kubla Khan做了个愉快的决定\n\n\nclear                      # 开始之前的清屏动作\n\necho "0: ${Countries[*]}"  # 从索引0开始列出整个数组.\n\nnumber_of_elements=${#Countries[@]}\nlet "comparisons = $number_of_elements - 1"\n\ncount=1 # Pass number.\n\nwhile [ "$comparisons" -gt 0 ]          # 开始外部循环\ndo\n\n  index=0  # 在每轮循环开始之前，重置索引。\n\n  while [ "$index" -lt "$comparisons" ] # 开始内部循环。\n  do\n    if [ ${Countries[$index]} \\> ${Countries[`expr $index + 1`]} ]\n\t# 如果原来的排序次序不对...\n\t# 回想一下, 在单括号中,\n\t#+ \\>是ASCII码的比较操作符.\n\n\t# if [[ ${Countries[$index]} > ${Countries[`expr $index + 1`]} ]]\n\t#+ 这样也行.\n    then\n      exchange $index `expr $index + 1`  # 交换\n    fi\n    let "index += 1"  #或者, index+=1 在Bash 3.1之后的版本才能这么用.\n  done # 内部循环结束\n\n  # ----------------------------------------------------------------------\n# Paulo Marcel Coelho Aragao 建议我们可以使用更简单的for循环\n#\n# for (( last = $number_of_elements - 1 ; last > 0 ; last-- ))\n##                     Fix by C.Y. Hunt          ^   (Thanks!)\n# do\n#     for (( i = 0 ; i < last ; i++ ))\n#     do\n#\t\t[[ "${Countries[$i]}" > "${Countries[$((i+1))]}" ]] \\\n#    \t\t&& exchange $i $((i+1))\n#     done\n# done\n# ----------------------------------------------------------------------\n\n\nlet "comparisons -= 1" #  因为最"重"的元素到了底部,\n                       #+ 所以每轮我们可以少做一次比较。\n\necho\necho "$count: ${Countries[@]}"  # 每轮结束后, 都打印一次数组.\necho\nlet "count += 1"                # 增加传递计数.\n\ndone                            # 外部循环结束\n                                # 至此, 全部完成.\nexit 0\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br")])]),a("hr"),s._v(" "),a("p",[s._v("我们可以在数组中嵌套数组么？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# "嵌套" 数组.\n\n#  Michael Zick 提供了这个用例。\n#+ William Park做了一些修正和说明.\n\nAnArray=( $(ls --inode --ignore-backups --almost-all \\\n        --directory --full-time --color=none --time=status \\\n        --sort=time -l ${PWD} ) )  # Commands and options.\n\n# 空格是有意义的 . . . 并且不要在上边用引号引用任何东西.\n\nSubArray=( ${AnArray[@]:11:1}  ${AnArray[@]:6:5} )\n#  这个数组有六个元素:\n#+     SubArray=( [0]=${AnArray[11]} [1]=${AnArray[6]} [2]=${AnArray[7]}\n#      [3]=${AnArray[8]} [4]=${AnArray[9]} [5]=${AnArray[10]} )\n#\n#  Bash数组是字符串(char *)类型\n#+ 的(循环)链表\n#  因此, 这不是真正意义上的嵌套数组,\n#+ 只不过功能很相似而已.\n\necho "Current directory and date of last status change:"\necho "${SubArray[@]}"\n\nexit 0\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("hr"),s._v(" "),a("p",[s._v("如果将“嵌套数组”与"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/bashver2.html#VARREFNEW",target:"_blank",rel:"noopener noreferrer"}},[s._v("间接引用"),a("OutboundLink")],1),s._v(" 组合起来使用的话，将会产生一些非常有趣的用法。")]),s._v(" "),a("p",[s._v("例子 27-12. 嵌套数组与间接引用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# embedded-arrays.sh\n# 嵌套数组和间接引用.\n\n# 本脚本由Dennis Leeuw 编写.\n# 经过授权, 在本书中使用.\n# 本书作者做了少许修改.\n\nARRAY1=(\n        VAR1_1=value11\n        VAR1_2=value12\n        VAR1_3=value13\n)\n\nARRAY2=(\n        VARIABLE="test"\n        STRING="VAR1=value1 VAR2=value2 VAR3=value3"\n        ARRAY21=${ARRAY1[*]}\n)       # 将ARRAY1嵌套到这个数组中.\n\nfunction print () {\n        OLD_IFS="$IFS"\n        IFS=$\'\\n\'       #  这么做是为了每行\n                        #+ 只打印一个数组元素.\n        TEST1="ARRAY2[*]"\n        local ${!TEST1} # 删除这一行, 看看会发生什么?\n        #  间接引用.\n        #  这使得$TEST1\n        #+ 只能够在函数内被访问.\n\n        #  让我们看看还能干点什么.\n\n        echo\n        echo "\\$TEST1 = $TEST1"       #  仅仅是变量名字.\n        echo; echo\n        echo "{\\$TEST1} = ${!TEST1}"  #  变量内容.\n                                      #  这就是\n                                      #+ 间接引用的作用.\n        echo\n        echo "-------------------------------------------"; echo\n        echo\n\n        # 打印变量\n        echo "Variable VARIABLE: $VARIABLE"\n\n        # 打印一个字符串元素\n        IFS="$OLD_IFS"\n        TEST2="STRING[*]"\n        local ${!TEST2}      # 间接引用(同上).\n        echo "String element VAR2: $VAR2 from STRING"\n\n        # Print an array element\n        TEST2="ARRAY21[*]"\n\t\tlocal ${!TEST2}      # 间接引用(同上).\n\t\techo "Array element VAR1_1: $VAR1_1 from ARRAY21"\n}\n\nprint\necho\n\nexit 0\n\n# 脚本作者注,\n#+ "你可以很容易的将其扩展成一个能创建hash 的Bash 脚本."\n# (难) 留给读者的练习: 实现它.\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br")])]),a("hr"),s._v(" "),a("p",[s._v("数组使得埃拉托色尼素数筛子有了shell版本的实现. 当然, 如果你需要的是追求效率的应用, 那么就 应该使用编译行语言来实现, 比如C语言. 因为脚本运行的太慢了.")]),s._v(" "),a("p",[s._v("例子 27-13. 埃拉托色尼素数筛子")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# sieve.sh (ex68.sh)\n\n# 埃拉托色尼素数筛子\n# 找素数的经典算法.\n\n# 在同等数值的范围内,\n#+ 这个脚本运行的速度比C版本慢的多.\n\nLOWER_LIMIT=1       # 从1开始.\nUPPER_LIMIT=1000    # 到1000.\n# (如果你时间很多的话 . . . 你可以将这个数值调的很高.)\n\nPRIME=1\nNON_PRIME=0\n\nlet SPLIT=UPPER_LIMIT/2\n# 优化:\n# 只需要测试中间到最大的值,为什么?\n\ndeclare -a Primes\n# Primes[] 是个数组.\n\n\ninitialize ()\n{\n\t# 初始化数组.\n\ti=$LOWER_LIMIT\n\tuntil [ "$i" -gt "$UPPER_LIMIT" ]\n\tdo\n\t  Primes[i]=$PRIME\n\t  let "i += 1"\n\tdone\n\t#  假定所有数组成员都是需要检查的(素数)\n\t#+ 直到检查完成.\n}\n\nprint_primes ()\n{\n\t# 打印出所有数组Primes[]中被标记为素数的元素.\n\t\n\ti=$LOWER_LIMIT\n\n\tuntil [ "$i" -gt "$UPPER_LIMIT" ]\n\tdo\n\t  if [ "${Primes[i]}" -eq "$PRIME" ]\n\t  then\n\t\tprintf "%8d" $i\n\t\t# 每个数字打印前先打印8个空格, 在偶数列才打印.\n\t  fi\n\n\t  let "i += 1"\n\n\tdone\n}\n\nsift () # 查出非素数.\n{\n\tlet i=$LOWER_LIMIT+1\n\t# 我们从2开始.\n\n\tuntil [ "$i" -gt "$UPPER_LIMIT" ]\n\tdo\n\n\tif [ "${Primes[i]}" -eq "$PRIME" ]\n\t# 不要处理已经过滤过的数字(被标识为非素数).\n\tthen\n\t  t=$i\n\n\t  while [ "$t" -le "$UPPER_LIMIT" ]\n\t  do\n\t\tlet "t += $i "\n\t\tPrimes[t]=$NON_PRIME\n\t\t# 标识为非素数.\n\t  done \n\tfi\n\t \n\tlet "i += 1"\n\tdone\n}\n\n# ==============================================\n# main ()\n# 继续调用函数.\ninitialize\nsift\nprint_primes\n# 这里就是被称为结构化编程的东西.\n# ==============================================\necho\n\nexit 0\n\n# -------------------------------------------------------- #\n# 因为前面的\'exit\'语句, 所以后边的代码不会运行\n\n#  下边的代码, 是由Stephane Chazelas 所编写的埃拉托色尼素数筛子的改进版本,\n#+ 这个版本可以运行的快一些.\n\n# 必须在命令行上指定参数(这个参数就是: 寻找素数的限制范围)\n\nUPPER_LIMIT=$1                  # 来自于命令行.\nlet SPLIT=UPPER_LIMIT/2         # 从中间值到最大值.\n\nPrimes=( \'\' $(seq $UPPER_LIMIT) )\n\ni=1\nuntil (( ( i += 1 ) > SPLIT ))  # 仅需要从中间值检查.\ndo\n  if [[ -n ${Primes[i]} ]]\n  then\n    t=$i\n    until (( ( t += i ) > UPPER_LIMIT ))\n    do\n      Primes[t]=\n    done\n  fi \ndone\necho ${Primes[*]}\n\nexit $?\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br"),a("span",{staticClass:"line-number"},[s._v("119")]),a("br"),a("span",{staticClass:"line-number"},[s._v("120")]),a("br"),a("span",{staticClass:"line-number"},[s._v("121")]),a("br")])]),a("p",[s._v("例子 27-14. 埃拉托色尼素数筛子，优化版")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# 优化过的埃拉托色尼素数筛子\n# 脚本由Jared Martin编写, ABS Guide 的作者作了少许修改.\n# 在ABS Guide 中经过了许可而使用(感谢!).\n\n# 基于Advanced Bash Scripting Guide中的脚本.\n# http://tldp.org/LDP/abs/html/arrays.html#PRIMES0 (ex68.sh).\n\n# http://www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf (引用)\n# Check results against http://primes.utm.edu/lists/small/1000.txt\n\n# Necessary but not sufficient would be, e.g.,\n#     (($(sieve 7919 | wc -w) == 1000)) && echo "7919 is the 1000th prime"\n\nUPPER_LIMIT=${1:?"Need an upper limit of primes to search."}\n\nPrimes=( \'\' $(seq ${UPPER_LIMIT}) )\n\ntypeset -i i t\nPrimes[i=1]=\'\' # 1不是素数 \nuntil (( ( i += 1 ) > (${UPPER_LIMIT}/i) ))  # 只需要ith-way 检查.\n  do                                         # 为什么?\n    if ((${Primes[t=i*(i-1), i]}))\n    # 很少见， 但是很有指导意义, 在下标中使用算术扩展。\n\tthen\n      until (( ( t += i ) > ${UPPER_LIMIT} ))\n        do Primes[t]=; done\n    fi\n  done\n\n# echo ${Primes[*]}\necho   # 改回原来的脚本，为了漂亮的打印(80-col. 展示).\nprintf "%8d" ${Primes[*]}\necho; echo\n\nexit $?\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br")])]),a("p",[s._v("上边的这个例子是基于数组的素数产生器, 还有不使用数组的素数产生器"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/contributed-scripts.html#PRIMES",target:"_blank",rel:"noopener noreferrer"}},[s._v("例子A-15"),a("OutboundLink")],1),s._v(" 和"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/mathc.html#PRIMES2",target:"_blank",rel:"noopener noreferrer"}},[s._v("例子 16-46"),a("OutboundLink")],1),s._v("，让我们来比较一番.")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("数组可以进行一定程度上的扩展, 这样就可以模拟一些Bash原本不支持的数据结构.")]),s._v(" "),a("p",[s._v("例子 27-15. 模拟一个压入栈")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# stack.sh: 模拟压入栈\n\n# 类似于CPU 栈, 压入栈依次保存数据项, \n#+ 但是取数据时, 却反序进行, 后进先出.\n\nBP=100\t\t#  栈数组的基址指针.\n\t\t\t#  从元素100 开始.\n\nSP=$BP\t\t#  栈指针.\n\t\t\t#  将其初始化为栈"基址"(栈底)\n\nData=\t\t#  当前栈的数据内容.\n\t\t\t#  必须定义为全局变量,\n\t\t\t#+ 因为函数所能够返回的整数存在范围限制.\n\n\t\t\t# 100\t基址\t\t\t\t<-- Base Pointer\n\t\t\t#  99\t第一个数据元素\n\t\t\t#  98\t第二个数据元素\n\t\t\t# ...\t更多数据\n\t\t\t#\t\t最后一个数据元素\t<-- Stack pointer\n\ndeclare -a stack\n\npush()\t\t# 压栈\n{\n\tif [ -z "$1" ]\t\t# 没有可压入的数据项?\n\tthen\n\t\treturn \n\tfi\n\n\tlet "SP -= 1"\t\t# 更新栈指针.\n\tstack[$SP]=$1\n\treturn \n}\n\npop()\t #从栈中弹出数据项. \n{ \n\tData=\t\t\t\t\t\t# 清空保存数据项的中间变量\n\n\tif [ "$SP" -eq "$BP" ]\t\t# 栈空?\n\tthen\n\t\treturn \n\tfi\t\t\t\t\t\t# 这使得SP不会超过100,\n\t\t\t\t\t\t\t#+ 例如, 这可以防止堆栈失控.\n\n\n\tData=${stack[$SP]}\n\tlet "SP += 1"\t\t\t# 更新栈指针\n\treturn\n}\n\nstatus_report()\t\t\t# 打印当前状态\n{\n\techo "-------------------------------------"\n\techo "REPORT"\n\techo "Stack Pointer = $SP"\n\techo "Just popped \\""$Data"\\" off the stack."\n\techo "-------------------------------------"\n\techo\n}\n\n\n# =======================================================\n# 现在, 来点乐子.\n\necho\n\n# 看你是否能从空栈里弹出数据项来.\npop\nstatus_report\n\necho\n\npush garbage\npop\nstatus_report\t\t\t# 压入Garbage, 弹出garbage.\n\nvalue1=23;\t\t\tpush $value1\nvalue2=skidoo;\t\tpush $value2\nvalue3=LAST;\t\tpush $value3\n\npop\t\t\t\t\t# LAST\nstatus_report\npop\t\t\t\t\t# skidoo\nstatus_report\npop\t\t\t\t\t# 23\nstatus_report\t\t# 后进，先出!\n\n# 注意: 栈指针在压栈时减,\n#+ 在弹出时加.\n\necho\n\nexit 0\n\n\n# =======================================================\n#\n# 练习：\n#\n# 1) 修改"push()"函数，\n# \t+ 使其调用一次就能够压入多个数据项。\n\n# 2) 修改"pop()"函数,\n#\t+ 使其调用一次就能弹出多个数据项.\n\n# 3) 给那些有临界操作的函数添加出错检查.\n#\t 说明白一些, 就是让这些函数返回错误码, \n#\t+ 返回的错误码依赖于操作是否成功完成, \n#\t+ 如果没有成功完成, 那么就需要启动合适的处理动作.\n\n# 4) 以这个脚本为基础,\n#\t+ 编写一个用栈实现的四则运算计算器.\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br")])]),a("hr"),s._v(" "),a("p",[s._v('如果想对数组"下标"做一些比较诡异的操作, 可能需要使用中间变量. 对于那些有这种需求的项目来说, 还是应该考虑使用功能更加强大的编程语言, 比如Perl或C。')]),s._v(" "),a("p",[s._v("例子 27-16. 复杂的数组应用: 探索一个神秘的数学序列")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('!/bin/bash\n\n# Douglas Hofstadter 的声名狼藉的序列"Q-series":\n\n# Q(1) = Q(2) = 1\n# Q(n) = Q(n - Q(n-1)) + Q(n - Q(n-2)), 当 n>2时\n\n#  这是一个令人感到陌生的, 没有规律的"乱序"整数序列\n#+ 并且行为不可预测\n#  序列的头20项, 如下所示:\n#  1 1 2 3 3 4 5 5 6 6 6 8 8 8 10 9 10 11 11 12\n\n#  请参考相关书籍, Hofstadter的, "_Goedel, Escher, Bach: An Eternal Golden Braid_",\n#+ 第137页.\n\n\nLIMIT=100     # 需要计算的数列长度.\nLINEWIDTH=20  # 每行打印的个数.\n\nQ[1]=1        # 数列的头两项都为1.\nQ[2]=1\n\necho\necho "Q-series [$LIMIT terms]:"\necho -n "${Q[1]} "             # 输出数列头两项.\necho -n "${Q[2]} "\n\nfor ((n=3; n <= $LIMIT; n++))  # C风格的循环条件.\ndo   # Q[n] = Q[n - Q[n-1]] + Q[n - Q[n-2]]  for n>2\n#    需要将表达式拆开, 分步计算,\n#+   因为Bash 不能够很好的处理复杂数组的算术运算.\n\n\tlet "n1 = $n - 1"        # n-1\n\tlet "n2 = $n - 2"        # n-2\n\n\tt0=`expr $n - ${Q[n1]}`  # n - Q[n-1]\n\tt1=`expr $n - ${Q[n2]}`  # n - Q[n-2]\n\n\tT0=${Q[t0]}\t\t\t# Q[n - Q[n-1]]\n\tT1=${Q[t1]}\t\t\t# Q[n - Q[n-2]]\n\n\n\tQ[n]=`expr $T0 + $T1`\t# Q[n - Q[n-1]] + Q[n - Q[n-2]]\n\techo -n "${Q[n]} "\n\n\tif [ `expr $n % $LINEWIDTH` -eq 0 ]\t\t# 格式化输出\n\tthen   #      ^ 取模操作\n\t\techo # 把每行都拆为20个数字的小块.\n\tfi\n\ndone\n\necho\n\nexit 0\n\n# 这是Q-series的一个迭代实现.\n# 更直接明了的实现是使用递归, 请读者作为练习完成.\n# 警告: 使用递归的方法来计算这个数列的话, 会花费非常长的时间.\n#+ C/C++ 将会计算的快一些。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br")])]),a("hr"),s._v(" "),a("p",[s._v("Bash仅仅支持一维数组, 但是我们可以使用一个小手段, 这样就可以模拟多维数组了.")]),s._v(" "),a("p",[s._v("例子 27-17. 模拟一个二维数组，并使它倾斜")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# twodim.sh: 模拟一个二维数组.\n\n# 一维数组由单行组成.\n# 二维数组由连续的多行组成.\n\nRows=5\nColumns=5\n# 5 X 5 的数组.\n\ndeclare -a alpha\t\t# char alpha [Rows] [Columns];\n\t\t\t\t\t\t# 没必要声明. 为什么?\n\nload_alpha ()\n{\n\tlocal rc=0\n\tlocal index\n\n\tfor i in A B C D E F G H I J K L M N O P Q R S T U V W X Y\n\tdo     # 你可以随你的心意, 使用任意符号.\n\t  local row=`expr $rc / $Columns`\n\t  local column=`expr $rc % $Rows`\n\t  let "index = $row * $Rows + $column"\n\t  alpha[$index]=$i\n\t# alpha[$row][$column]\n\t  let "rc += 1"\n\tdone\n\t# 更简单的方法:\n\t#+   declare -a alpha=( A B C D E F G H I J K L M N O P Q R S T U V W X Y )\n\t#+ 但是如果写的话, 就缺乏二维数组的"风味"了.\n}\n\nprint_alpha ()\n{\n\tlocal row=0\n\tlocal index\n\techo\n\twhile [ "$row" -lt "$Rows" ]   #  以"行序为主"进行打印:\n\tdo                             #+ 行号不变(外层循环),\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t   #+ 列号进行增长.\n\t  local column=0\n\n\t  echo -n "       "            #  按照行方向打印"正方形"数组.\n\n\t  while [ "$column" -lt "$Columns" ]\n\t  do\n\t\tlet "index = $row * $Rows + $column"\n\t\techo -n "${alpha[index]} "  # alpha[$row][$column]\n\t\tlet "column += 1"\n\t  done\n\n\t  let "row += 1"\n\t  echo\n\tdone\n\t# 更简单的等价写法为:\n\t#     echo ${alpha[*]} | xargs -n $Columns\n\techo \n}\n\nfilter ()     # 过滤掉负的数组下标.\n{\n\n\techo -n "  "  # 产生倾斜.\n\t\t\t\t  # 解释一下, 这是怎么做到的.\n\tif [[ "$1" -ge 0 &&  "$1" -lt "$Rows" && "$2" -ge 0 && "$2" -lt "$Columns" ]]\n\tthen\n\t\tlet "index = $1 * $Rows + $2"\n\t\t# 现在, 按照旋转方向进行打印.\n\t\techo -n " ${alpha[index]}"\n\t\t#           alpha[$row][$column]\n\tfi \n\n}\n\nrotate ()  #  将数组旋转45度 --\n{          #+ 从左下角进行"平衡".\n\tlocal row\n\tlocal column\n\n\tfor (( row = Rows; row > -Rows; row-- ))\n\t  do       # 反向步进数组, 为什么?\n\t  \n\t  for (( column = 0; column < Columns; column++ ))\n\t  do\n\n\t\tif [ "$row" -ge 0 ]\n\t\tthen\n\t\t  let "t1 = $column - $row"\n\t\t  let "t2 = $column"\n\t\telse\n\t\t  let "t1 = $column"\n\t\t  let "t2 = $column + $row"\n\t\tfi\n\t\tfilter $t1 $t2\t\t\t# 将负的数组下标过滤出来.\n\t\t\t\t\t\t\t\t# 如果你不做这一步, 将会怎样?\n\t  done\n\t  echo; echo\n\n\tdone\n\n#  数组旋转的灵感来源于Herbert Mayer 所著的\n#+ "Advanced C Programming on the IBM PC"的例子(第143-146页)\n#+ (参见参考书目).\n#  由此可见, C语言能够做到的好多事情,\n#+ 用shell 脚本一样能够做到.\n}\n\n\n#--------------- 现在, 让我们开始吧. ------------#\nload_alpha\t\t\t# 加载数组\nprint_alpha\t\t\t# 打印数组.\nrotate\t\t\t\t# 逆时钟旋转45度打印.\n#-----------------------------------------------------#\n\nexit 0\n\n# 这有点做作, 不是那么优雅.\n\n# 练习:\n# -----\n#  1) 重新实现数组加载和打印函数,\n#     让其更直观, 可读性更强. \n#\n#  2) 详细地描述旋转函数的原理.\n#     提示: 思考一下倒序索引数组的实现.\n#\n#  3) 重写这个脚本, 扩展它, 让不仅仅能够支持非正方形的数组.\n#     比如6 X 4的数组.\n#     尝试一下, 在数组旋转时, 做到最小"失真".\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br"),a("span",{staticClass:"line-number"},[s._v("119")]),a("br"),a("span",{staticClass:"line-number"},[s._v("120")]),a("br"),a("span",{staticClass:"line-number"},[s._v("121")]),a("br"),a("span",{staticClass:"line-number"},[s._v("122")]),a("br"),a("span",{staticClass:"line-number"},[s._v("123")]),a("br"),a("span",{staticClass:"line-number"},[s._v("124")]),a("br"),a("span",{staticClass:"line-number"},[s._v("125")]),a("br"),a("span",{staticClass:"line-number"},[s._v("126")]),a("br"),a("span",{staticClass:"line-number"},[s._v("127")]),a("br"),a("span",{staticClass:"line-number"},[s._v("128")]),a("br"),a("span",{staticClass:"line-number"},[s._v("129")]),a("br")])]),a("p",[s._v("二维数组本质上其实就是一个一维数组, 只不过是添加了行和列的寻址方式, 来引用和操作数组的元素而已.")]),s._v(" "),a("p",[s._v("这里有一个精心制作的模拟二维数组的例子, 请参考"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/contributed-scripts.html#LIFESLOW",target:"_blank",rel:"noopener noreferrer"}},[s._v("例子 A-10"),a("OutboundLink")],1),s._v(".")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("还有更多使用数组的有趣的脚本，请参考：")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/commandsub.html#AGRAM2",target:"_blank",rel:"noopener noreferrer"}},[s._v("例子 12-3"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/mathc.html#PRIMES2",target:"_blank",rel:"noopener noreferrer"}},[s._v("例子 16-46"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/contributed-scripts.html#HASHEX2",target:"_blank",rel:"noopener noreferrer"}},[s._v("例子 A-22"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/contributed-scripts.html#HOMEWORK",target:"_blank",rel:"noopener noreferrer"}},[s._v("例子 A-44"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/contributed-scripts.html#QKY",target:"_blank",rel:"noopener noreferrer"}},[s._v("例子 A-41"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/contributed-scripts.html#NIM",target:"_blank",rel:"noopener noreferrer"}},[s._v("例子 A-42"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=e.exports}}]);