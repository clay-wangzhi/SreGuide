(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{1126:function(s,n,a){"use strict";a.r(n);var e=a(1),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_26-列表结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26-列表结构"}},[s._v("#")]),s._v(" 26. 列表结构")]),s._v(" "),a("p",[a("em",[s._v("and 列表")]),s._v(" 和 "),a("em",[s._v("or 列表")]),s._v(" 结构提供了连续执行若干命令的方法，可以有效地替换复杂的嵌套 "),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/testconstructs.html#TESTCONSTRUCTS1",target:"_blank",rel:"noopener noreferrer"}},[s._v("if/then"),a("OutboundLink")],1),s._v(" ，甚至 "),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/testbranch.html#CASEESAC1",target:"_blank",rel:"noopener noreferrer"}},[s._v("case"),a("OutboundLink")],1),s._v(" 语句。")]),s._v(" "),a("h3",{attrs:{id:"链接多个命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链接多个命令"}},[s._v("#")]),s._v(" 链接多个命令")]),s._v(" "),a("p",[a("strong",[s._v("and 列表")])]),s._v(" "),a("p",[a("code",[s._v("command-1 && command-2 && command-3 && ... command-n")])]),s._v(" "),a("p",[s._v("只要前一个命令返回 "),a("em",[s._v("true")]),s._v("（即 0），每一个命令就依次执行。当第一个 "),a("em",[s._v("false")]),s._v("（即 非0）返回时，命令链条即终止（第一个返回 "),a("em",[s._v("false")]),s._v(" 的命令是最后一个执行的）。")]),s._v(" "),a("p",[s._v("在"),a("a",{attrs:{href:"https://github.com/yongye",target:"_blank",rel:"noopener noreferrer"}},[s._v("YongYe"),a("OutboundLink")],1),s._v("早期版本的"),a("a",{attrs:{href:"http://bash.deta.in/Tetris_Game.sh",target:"_blank",rel:"noopener noreferrer"}},[s._v("俄罗斯方块游戏"),a("OutboundLink")],1),s._v("脚本里，一个有趣的双条件 "),a("em",[s._v("and 列表")]),s._v(" 用法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('equation()\n\n{  # core algorithm used for doubling and halving the coordinates\n   [[ ${cdx} ]] && ((y=cy+(ccy-cdy)${2}2))\n   eval ${1}+=\\"${x} ${y} \\"\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("strong",[s._v("例 26-1. 使用 "),a("em",[s._v("and 列表")]),s._v(" 来测试命令行参数")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n# and list\n\nif [ ! -z "$1" ] && echo "Argument #1 = $1" && [ ! -z "$2" ] && \\\n#                ^^                         ^^               ^^\necho "Argument #2 = $2"\nthen\n  echo "At least 2 arguments passed to script."\n  # 链条内的所有命令都返回 true。\nelse\n  echo "Fewer than 2 arguments passed to script."\n  # 链条内至少有一个命令返回 false。\nfi  \n# 注意： "if [ ! -z $1 ]" 是好用的，但是宣传与之等同的\n#   "if [ -n $1 ]" 并不好用。\n#  不过，用引号就能解决问题，\n#   "if [ -n "$1" ]" 好用（译者注：原文本行内第一个引号位置错了）。\n#           ^  ^    小心!\n# 被测试的变量放在引号内总是最好的选择。\n\n\n# 下面的代码功能一样，用的是“纯粹”的 if/then 语句。\nif [ ! -z "$1" ]\nthen\n  echo "Argument #1 = $1"\nfi\nif [ ! -z "$2" ]\nthen\n  echo "Argument #2 = $2"\n  echo "At least 2 arguments passed to script."\nelse\n  echo "Fewer than 2 arguments passed to script."\nfi\n# 比起用“and 列表”要更长、更笨重。\n\n\nexit $?\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br")])]),a("p",[a("strong",[s._v("例 26-2. 使用 "),a("em",[s._v("and 列表")]),s._v(" 来测试命令行参数2")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n\nARGS=1        # 预期的参数数量。\nE_BADARGS=85  # 参数数量错误时返回的值。\n\ntest $# -ne $ARGS && \\\n#    ^^^^^^^^^^^^ 条件 #1\necho "Usage: `basename $0` $ARGS argument(s)" && exit $E_BADARGS\n#                                             ^^\n#  如果条件 #1 结果为 true (传递给脚本的参数数量错误),\n#+ 那么执行本行剩余的命令，脚本终止。\n\n# 下面的代码行只有在上面的测试失败时才执行。\necho "Correct number of arguments passed to this script."\n\nexit 0\n\n#  如果要检查退出值，脚本终止后运行 "echo $?"。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("当然，"),a("em",[s._v("and 列表")]),s._v(" 也可以给变量设置默认值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('arg1=$@ && [ -z "$arg1" ] && arg1=DEFAULT\n\n              # 如果有命令行参数，则把参数值赋给 $arg1 。\n              # 但是... 如果没有参数，则使用DEFAULT给 $arg1 赋值。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("or 列表")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("command-1 || command-2 || command-3 || ... command-n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("只要前一个命令返回_false_，每一个命令就依次执行。当第一个_true_ 返回时，命令链条即终止（第一个返回_true_ 的命令是最后一个执行的）。很明显它与“and 列表”相反。")]),s._v(" "),a("p",[s._v("例 26-3. "),a("em",[s._v("or 列表")]),s._v(" 与 "),a("em",[s._v("and 列表")]),s._v(" 结合使用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n\n#  delete.sh, 不那么巧妙的文件删除工具。\n#  用法： delete 文件名\n\nE_BADARGS=85\n\nif [ -z "$1" ]\nthen\n  echo "Usage: `basename $0` filename"\n  exit $E_BADARGS  # No arg? Bail out.\nelse  \n  file=$1          # Set filename.\nfi  \n\n\n[ ! -f "$file" ] && echo "File \\"$file\\" not found. \\\nCowardly refusing to delete a nonexistent file."\n# AND 列表，如果文件不存在则显示出错信息。\n# 注意，echo 消息内容分成了两行，中间通过转义符（\\）连接。\n\n[ ! -f "$file" ] || (rm -f $file; echo "File \\"$file\\" deleted.")\n# OR 列表，删除存在的文件。\n\n# 注意上面的逻辑颠倒。 Note logic inversion above.\n# “AND 列表” 在得到 true 时执行, “OR 列表”在得到 false 时执行。\n\nexit $?\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://tldp.org/LDP/abs/images/caution.gif"}}),s._v(" 如果 "),a("em",[s._v("or 列表")]),s._v(" 第一个命令返回 true，它"),a("strong",[s._v("会")]),s._v("执行。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# ==> 下面的代码段来自 /etc/rc.d/init.d/single\n#+==> 作者 Miquel van Smoorenburg\n#+==> 说明了 "and" 和 "or" 列表。\n# ==> 带箭头的注释是本文作者添加的。\n\n[ -x /usr/bin/clear ] && /usr/bin/clear\n  # ==> 如果 /usr/bin/clear 存在, 则调用它。\n  # ==> 调用命令之前检查它是否存在，\n  #+==> 可以避免出错消息和其他怪异的结果。\n\n  # ==> . . .\n\n#  If they want to run something in single user mode, might as well run it...\nfor i in /etc/rc1.d/S[0-9][0-9]* ; do\n        # 检查脚本是否存在。\n        [ -x "$i" ] || continue\n  # ==> 如果对应的文件在 $PWD 里*没有*找到，\n  #+==> 则跳回到循环顶端“继续运行”。\n\n        # 丢弃备份文件和 rpm 生成的文件。\n        case "$1" in\n                *.rpmsave|*.rpmorig|*.rpmnew|*~|*.orig)\n                        continue;;\n        esac\n        [ "$i" = "/etc/rc1.d/S00single" ] && continue\n  # ==> 设置脚本名，但先不要执行\n        $i start\ndone\n\n  # ==> . . .\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])]),a("img",{attrs:{src:"http://tldp.org/LDP/abs/images/important.gif"}}),s._v("\n_and 列表_ 或 _or 列表_ 的[退出状态](http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF)就是最后一个执行的命令的退出状态。\n"),a("p",[s._v("聪明地结合 "),a("em",[s._v("and 列表")]),s._v(" 和 "),a("em",[s._v("or 列表")]),s._v(" 是可能的，但是程序逻辑会很容易地变得令人费解，需要密切注意"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/opprecedence.html#OPPRECEDENCE1",target:"_blank",rel:"noopener noreferrer"}},[s._v("操作符优先规则"),a("OutboundLink")],1),s._v("，而且，会带来大量的调试工作。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("false && true || echo false         # false\n\n# 下面的代码结果相同\n( false && true ) || echo false     # false\n# 但这个就不同了\nfalse && ( true || echo false )     # (什么都不显示)\n\n#  注意语句是从左到右组合和解释的。\n\n#  通常情况下最好避免这种复杂性。\n\n#  感谢, S.C.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/contributed-scripts.html#DAYSBETWEEN",target:"_blank",rel:"noopener noreferrer"}},[s._v("例 A-7"),a("OutboundLink")],1),s._v(" 和 "),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/fto.html#BROKENLINK",target:"_blank",rel:"noopener noreferrer"}},[s._v("例 7-4"),a("OutboundLink")],1),s._v(" 解释了用 "),a("em",[s._v("and 列表")]),s._v(" / "),a("em",[s._v("or 列表")]),s._v(" 来测试变量。")])])}),[],!1,null,null,null);n.default=t.exports}}]);