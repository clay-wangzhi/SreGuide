(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{1111:function(n,s,a){"use strict";a.r(s);var e=a(1),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"_24-2-局部变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-2-局部变量"}},[n._v("#")]),n._v(" 24.2 局部变量")]),n._v(" "),a("p",[n._v("怎样使一个变量变成“局部”变量？")]),n._v(" "),a("p",[n._v("局部变量\n如果变量用local来声明，那么它就只能够在该变量被声明的"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/special-chars.html#CODEBLOCKREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("代码块"),a("OutboundLink")],1),n._v("中可见。 这个代码块就是局部"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/subshells.html#SCOPEREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("范围"),a("OutboundLink")],1),n._v("。 在一个函数中，一个局部变量只有在函数代码中才有意义."),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/localvar.html#FTN.AEN18568",target:"_blank",rel:"noopener noreferrer"}},[n._v("[1]"),a("OutboundLink")],1)]),n._v(" "),a("p",[n._v("例子 24-12. 局部变量的可见范围")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n# ex62.sh: 函数内部的局部变量与全局变量。\n\nfunc () {\n    local loc_var=23       # 声明为局部变量。\n    echo                   # 使用\'local\'内建命令\n    echo "\\"loc_var\\" in function = $loc_var"\n    global_var=999         # 没有声明为局部变量。\n    # 默认为全局变量。\n\n    echo "\\"global_var\\" in function = $global_var"\n}\n\nfunc\n\n# 现在，来看看局部变量“loc_var”在函数外部是否可见。\n\necho\necho "\\"loc_var\\" outside function = $loc_var"\n                                    # $loc_var outside function =\n                                    # 不行, $loc_var 不是全局可见的.\necho "\\"global_var\\" outside function = $global_var"\n                                    # $在函数外部global_var = 999\n                                    # $global_var 是全局可见的.\necho\n\nexit 0\n#  与C语言相比，在函数内声明的Bash变量\n#+ 除非它被明确声明为local时，它才是局部的。\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://tldp.org/LDP/abs/images/caution.gif",alt:"notice"}}),n._v(" 在函数被调用之前，所有在函数中声明的变量，在函数外部都是不可见的，当然也包括那些被明确声明为local的变量。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n\nfunc ()\n{\n    global_var=37    #  变量只在函数体内可见\n                     #+ 在函数被调用之前。\n}                    #  函数结束\n\necho "global_var = $global_var"  # global_var =\n                                 #  函数 "func" 还没被调用，\n                                 #+ 所以$global_var 在这里还不是可见的.\nfunc\necho "global_var = $global_var"  # global_var = 37\n                                 # 已经在函数调用的时候设置。\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://tldp.org/LDP/abs/images/note.gif",alt:"extra"}}),n._v(" 正如Evgeniy Ivanov指出的那样，当在一条命令中定义和给一个局部变量赋值时，显然操作的顺序首先是给变量赋值，之后限定变量的局部范围。这可以通过"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("返回值"),a("OutboundLink")],1),n._v("来反应。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n\necho "==OUTSIDE Function (global)=="\nt=$(exit 1)\necho $?     # 1\n            # 如预期一样.\n\necho\nfunction0 ()\n{\n    echo "==INSIDE Function=="\n    echo "Global"\n    t0=$(exit 1)\n    echo $?      # 1\n                 # 如预期一样.\n\n    echo\n    echo "Local declared & assigned in same command."\n    local t1=$(exit 1)\n    echo $?      # 0\n                 # 意料之外!\n#  显然，变量赋值发生在Apparently, \n#+ 局部声明之前。\n#+ 返回值是为了latter.\n\n    echo\n    echo "Local declared, then assigned (separate commands)."\n    local t2\n    t2=$(exit 1)\n    echo $?\n}\n\nfunction0\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br")])]),a("h2",{attrs:{id:"_24-2-1-局部变量和递归"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-2-1-局部变量和递归"}},[n._v("#")]),n._v(" 24.2.1 局部变量和递归")]),n._v(" "),a("p",[n._v("递归是一个有趣并且有时候非常有用的自己调用自己的形式。 "),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/biblio.html#MAYERREF",target:"_blank",rel:"noopener noreferrer"}},[n._v("Herbert Mayer"),a("OutboundLink")],1),n._v(" 是这样定义递归的，“。。。表示一个算法通过使用一个简单的相同算法版本。。。”")]),n._v(" "),a("p",[n._v("想象一下，一个定义是从自身考虑的，"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/localvar.html#FTN.AEN18607",target:"_blank",rel:"noopener noreferrer"}},[n._v("[2]"),a("OutboundLink")],1),n._v(" 一个表达包含了自身的表达， "),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/localvar.html#FTN.AEN18610",target:"_blank",rel:"noopener noreferrer"}},[n._v("[3]"),a("OutboundLink")],1),n._v(" 一条蛇吞下自己的尾巴， "),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/localvar.html#FTN.AEN18614",target:"_blank",rel:"noopener noreferrer"}},[n._v("[4]"),a("OutboundLink")],1),n._v(" 或者 。。。 一个函数调用自身。"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/localvar.html#FTN.AEN18617",target:"_blank",rel:"noopener noreferrer"}},[n._v("[5]"),a("OutboundLink")],1)]),n._v(" "),a("p",[n._v("例子 24-13. 一个简单的递归函数表示")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n# recursion-demo.sh\n# 递归演示.\n\nRECURSIONS=9   # 递归的次数.\nr_count=0      # 必须是全局变量，为什么？\n\nrecurse ()\n{\n    var="$1"\n\n    while [ "$var" -ge 0 ]\n    do\n        echo "Recursion count = "$r_count"  +-+  \\$var = "$var""\n        (( var-- )); (( r_count++ ))\n        recurse "$var"  #  函数调用自身(递归)\n    done              #+ 直到遇到什么样的终止条件？\n}\n\nrecurse $RECURSIONS\n\nexit $?\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br")])]),a("p",[n._v("例子 24-14. 另一个简单的例子")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n# recursion-def.sh\n# 另外一个描述递归的比较生动的脚本。\n\nRECURSIONS=10\nr_count=0\nsp=" "\n\ndefine_recursion ()\n{\n    ((r_count++))\n    sp="$sp"" "\n    echo -n "$sp"\n    echo "\\"The act of recurring ... \\""        # Per 1913 Webster\'s dictionary.\n\n    while [ $r_count -le $RECURSIONS ]\n    do\n        define_recursion\n    done\n}\n\necho\necho "Recursion: "\ndefine_recursion\necho\n\nexit $?\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br")])]),a("p",[n._v("局部变量是一个写递归代码有效的工具，但是这种方法一般会包含大量的计算负载，显然在shell脚本中并不推荐递归."),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/localvar.html#FTN.AEN18632",target:"_blank",rel:"noopener noreferrer"}},[n._v("[6]"),a("OutboundLink")],1)]),n._v(" "),a("p",[n._v("例子24-15. 使用局部变量进行递归")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n\n# 阶乘\n# ---------\n\n# Bash允许递归么？\n# 恩，允许，但是...\n# 他太慢了，所以恐怕你难以忍受。\n\nMAX_ARG=5\nE_WRONG_ARGS=85\nE_RANGE_ERR=86\n\n\nif [ -z "$1" ]\nthen\n    echo "Usage: `basename $0` number"\n    exit $E_WRONG_ARGS\nfi\n\nif [ "$1" -gt $MAX_ARG ]\nthen\n    echo "Out of range ($MAX_ARG is maximum)."\n    #  现在让我们来了解一些实际情况。\n    #  如果你想计算比这个更大的范围的阶乘，\n    #+ 应该用真正的编程语言来重写它。\n    exit $E_RANGE_ERR\nfi\n\nfact () \n{\n    local number=$1\n    #  变量"number" 必须被定义为局部变量，\n    #+ 否则不能正常工作。\n    if [ "$number" -eq 0 ]\n    then\n        factorial=1    # 0的阶乘为1.\n    else\n        let "decrnum = number - 1"\n        fact $decrnum  # 递归的函数调用 (就是函数调用自己).\n        let "factorial = $number * $?"\n    fi\n    return $factorial\n}\n\nfact $1\necho "Factorial of $1 is $?."\n\nexit 0\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br")])]),a("p",[n._v("也可以参考"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/contributed-scripts.html#PRIMES",target:"_blank",rel:"noopener noreferrer"}},[n._v("例子 A-15"),a("OutboundLink")],1),n._v("，一个包含递归例子的脚本。我们意识到递归同时也意味着巨大的资源消耗和缓慢的运行速度，因此它并不适合在脚本中使用。")]),n._v(" "),a("h2",{attrs:{id:"注释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[n._v("#")]),n._v(" 注释")]),n._v(" "),a("p",[a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/localvar.html#AEN18568",target:"_blank",rel:"noopener noreferrer"}},[n._v("[1]"),a("OutboundLink")],1),n._v(" 然而，如Thomas Braunberger 指出的那样，一个函数里定义的局部变量对于调用它的父函数也是可见的。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n\nfunction1 ()\n{\n  local func1var=20\n\n  echo "Within function1, \\$func1var = $func1var."\n\n  function2\n}\n\nfunction2 ()\n{\n  echo "Within function2, \\$func1var = $func1var."\n}\n\nfunction1\n\nexit 0\n\n\n# 脚本的输出:\n\n# Within function1, $func1var = 20.\n# Within function2, $func1var = 20.\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br")])]),a("p",[n._v("在Bash手册里是这样描述的：")]),n._v(" "),a("blockquote",[a("p",[n._v('"局部变量只能在函数内部使用; 它让变量名的可见范围限制在了函数内部以及它的孩子里" [emphasis added]\nThe ABS Guide的作者认为这个行为一个bug.')])]),n._v(" "),a("p",[a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/localvar.html#AEN18607",target:"_blank",rel:"noopener noreferrer"}},[n._v("[2]"),a("OutboundLink")],1),n._v(" 被熟知为冗余。")]),n._v(" "),a("p",[a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/localvar.html#AEN18610",target:"_blank",rel:"noopener noreferrer"}},[n._v("[3]"),a("OutboundLink")],1),n._v(" 被熟知为同义反复。")]),n._v(" "),a("p",[a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/localvar.html#AEN18614",target:"_blank",rel:"noopener noreferrer"}},[n._v("[4]"),a("OutboundLink")],1),n._v(" 被熟知为暗喻。")]),n._v(" "),a("p",[a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/localvar.html#AEN18617",target:"_blank",rel:"noopener noreferrer"}},[n._v("[5]"),a("OutboundLink")],1),n._v(" 被熟知为递归函数。")]),n._v(" "),a("p",[a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/localvar.html#AEN18632",target:"_blank",rel:"noopener noreferrer"}},[n._v("[6]"),a("OutboundLink")],1),n._v(" 太多的递归层次可能会引发一个脚本的段错误。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#!/bin/bash\n\n#  提醒: 运行这个脚本可能会让你的系统卡死。\n#  如果你够好运的话，在耗尽可用内存之前，它会发生一个段错误。\n\nrecursive_function ()\t\t   \n{\necho "$1"     # 让函数做一些事情，加快发生段错误。\n(( $1 < $2 )) && recursive_function $(( $1 + 1 )) $2;\n#  只要第一个参数小于第二个参数，\n#+ 让第一个参数加1，然后递归。\n}\n\nrecursive_function 1 50000  # 递归 50,000层!\n#  很可能发生段错误(依赖于栈的大小，通过ulimit -m可以设置栈的大小)\n\n#  即使是C语言，递归调用这么多层也会发生段错误，\n#+ 通过分配栈耗尽所有的内存。\n\n\necho "This will probably not print."\nexit 0  # 这个脚本可能不会正常退出。\n\n#  感谢, Stéphane Chazelas.\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);