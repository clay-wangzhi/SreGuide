(window.webpackJsonp=window.webpackJsonp||[]).push([[364],{1114:function(s,n,a){"use strict";a.r(n);var e=a(1),r=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"第二十三章-进程替换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二十三章-进程替换"}},[s._v("#")]),s._v(" 第二十三章. 进程替换")]),s._v(" "),a("p",[s._v("用"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/special-chars.html#PIPEREF",target:"_blank",rel:"noopener noreferrer"}},[s._v("管道"),a("OutboundLink")],1),s._v(" 将一个命令的 "),a("code",[s._v("标准输出")]),s._v(" 输送到另一个命令的 "),a("code",[s._v("标准输入")]),s._v(" 是个强大的技术。但是如果你需要用管道输送多个命令的 "),a("code",[s._v("标准输出")]),s._v(" 怎么办？这时候 "),a("em",[s._v("进程替换")]),s._v(" 就派上用场了。")]),s._v(" "),a("p",[a("em",[s._v("进程替换")]),s._v(" 把一个（或多个）"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/special-chars.html#PROCESSREF",target:"_blank",rel:"noopener noreferrer"}},[s._v("进程"),a("OutboundLink")],1),s._v(" 的输出送到另一个进程的 "),a("code",[s._v("标准输入")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("样板")]),s._v("\n命令列表要用括号括起来")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(">(command_list)\n<(command_list)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("进程替换使用 "),a("code",[s._v("/dev/fd/<n>")]),s._v(" 文件发送括号内进程的结果到另一个进程。[1]")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://tldp.org/LDP/abs/images/caution.gif"}}),s._v('"<"或">"与括号之间没有空格，加上空格或报错。')]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("bash$ echo >(true)\n/dev/fd/63\n\nbash$ echo <(true)\n/dev/fd/63\n\nbash$ echo >(true) <(true)\n/dev/fd/63 /dev/fd/62\n\nbash$ wc <(cat /usr/share/dict/linux.words)\n 483523  483523 4992010 /dev/fd/63\n\nbash$ grep script /usr/share/dict/linux.words | wc\n    262     262    3601\n\nbash$ wc <(grep script /usr/share/dict/linux.words)\n    262     262    3601 /dev/fd/63\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://tldp.org/LDP/abs/images/note.gif"}}),s._v("Bash用两个文件描述符创建管道，"),a("code",[s._v("--fIn 和 fOut--")]),s._v(" 。"),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/internal.html#TRUEREF",target:"_blank",rel:"noopener noreferrer"}},[s._v("true"),a("OutboundLink")],1),s._v(" 的"),a("code",[s._v("标准输入")]),s._v("连接 fOut(dup2(fOut, 0))，然后Bash 传递一个 "),a("code",[s._v("/dev/fd/fIn")]),s._v(" 参数给 "),a("strong",[s._v("echo")]),s._v(" 。在不使用 "),a("code",[s._v("/dev/fd/<n>")]),s._v(" 的系统里，Bash可以用临时文件（感谢 S.C. 指出这点）。")]),s._v(" "),a("p",[s._v("进程替换可以比较两个不同命令的输出，或者同一个命令使用不同选项的输出。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("bash$ comm <(ls -l) <(ls -al)\ntotal 12\n-rw-rw-r--    1 bozo bozo       78 Mar 10 12:58 File0\n-rw-rw-r--    1 bozo bozo       42 Mar 10 12:58 File2\n-rw-rw-r--    1 bozo bozo      103 Mar 10 12:58 t2.sh\n        total 20\n        drwxrwxrwx    2 bozo bozo     4096 Mar 10 18:10 .\n        drwx------   72 bozo bozo     4096 Mar 10 17:58 ..\n        -rw-rw-r--    1 bozo bozo       78 Mar 10 12:58 File0\n        -rw-rw-r--    1 bozo bozo       42 Mar 10 12:58 File2\n        -rw-rw-r--    1 bozo bozo      103 Mar 10 12:58 t2.sh\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("进程替换可以比较两个目录的内容——来检查哪些文件在这个目录而不在那个目录。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("diff <(ls $first_directory) <(ls $second_directory)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("进程替换的一些其他用法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('read -a list < <( od -Ad -w24 -t u2 /dev/urandom )\n#  从 /dev/urandom 读取一个随机数列表\n#+ 用 "od" 处理\n#+ 输送到 "read" 的标准输入. . .\n#  来自 "insertion-sort.bash" 示例脚本。\n#  致谢：JuanJo Ciarlante。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("PORT=6881   # bittorrent（BT端口）\n\n#  扫描端口，确保没有恶意行为\nnetcat -l $PORT | tee>(md5sum ->mydata-orig.md5) |\ngzip | tee>(md5sum - | sed 's/-$/mydata.lz2/'>mydata-gz.md5)>mydata.gz\n\n#  检查解压缩结果：\n  gzip -d<mydata.gz | md5sum -c mydata-orig.md5)\n#  对原件的MD5校验用来检查标准输入，并且探测压缩当中出现的问题。\n\n#  Bill Davidsen 贡献了这个例子\n#+ （ABS指南作者做了轻微修改）。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("cat <(ls -l)\n# 等价于\tls -l | cat\n\nsort -k 9 <(ls -l /bin) <(ls -l /usr/bin) <(ls -l /usr/X11R6/bin)\n#  列出 3 个主要 'bin' 目录的文件，按照文件名排序。\n#  注意，有三个（数一下）单独的命令输送给了 'sort'。\n\ndiff <(command1) <(command2)    # 比较命令输出结果的不同之处。\n\ntar cf >(bzip2 -c > file.tar.bz2) $directory_name\n\n#  调用 \"tar cf /dev/fd/?? $directory_name\"，然后 \"bzip2 -c > file.tar.bz2\"。\n#\n#  因为 /dev/fd/<n> 系统特性\n#  不需要在两个命令之间使用管道符\n#\n#  这个可以模拟\n#\nbzip2 -c < pipe > file.tar.bz2&\ntar cf pipe $directory_name\nrm pipe\n#\t或者\nexec 3>&1\ntar cf /dev/fd/4 $directory_name 4>&1 >&3 3>&- | bzip2 -c > file.tar.bz2 3>&-\nexec 3>&-\n\n# 致谢：Stéphane Chazelas\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("p",[s._v("在子shell中 "),a("a",{attrs:{href:"http://tldp.org/LDP/abs/html/gotchas.html#BADREAD0",target:"_blank",rel:"noopener noreferrer"}},[s._v("echo 命令用管道输送给 while-read 循环"),a("OutboundLink")],1),s._v("时会出现问题，下面是避免的方法：")]),s._v(" "),a("p",[a("strong",[s._v("例23-1 不用 fork 的代码块重定向。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/bash\n\n#  wr-ps.bash: 使用进程替换的 while-read 循环。\n\n#  示例由 Tomas Pospisek 贡献。\n# （ABS指南作者做了大量改动。）\n\necho\n\necho "random input" | while read i\ndo\n  global=3D": Not available outside the loop."\n  # ... 因为在子 shell 中运行。\ndone\n\necho "\\$global (从子进程之外) = $global"\n# $global (从子进程之外) =\n\necho; echo "--"; echo\n\nwhile read i\ndo\n  echo $i\n  global=3D": Available outside the loop."\n  # ... 因为没有在子 shell 中运行。\ndone < <( echo "random input" )\n#    ^ ^\n\necho "\\$global (使用进程替换) = $global"\n#  随机输入\n#  $global (使用进程替换)= 3D: Available outside the loop.\n\n\necho; echo "##########"; echo\n\n\n\n# 同样道理 . . .\n\ndeclare -a inloop\nindex=0\ncat $0 | while read line\ndo\n  inloop[$index]="$line"\n  ((index++))\n  # 在子 shell 中运行，所以 ...\ndone\necho "OUTPUT = "\necho ${inloop[*]}           # ... 什么也没有显示。\n\n\necho; echo "--"; echo\n\n\ndeclare -a outloop\nindex=0\nwhile read line\ndo\n  outloop[$index]="$line"\n  ((index++))\n  # 没有在子 shell 中运行，所以 ...\ndone < <( cat $0 )\necho "OUTPUT = "\necho ${outloop[*]}          # ... 整个脚本的结果显示出来。\n\nexit $?\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br")])]),a("p",[s._v("下面是个类似的例子。")]),s._v(" "),a("p",[a("strong",[s._v("例 23-2. 重定向进程替换的输出到一个循环内")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#!/bin/bash\n# psub.bash\n#  受 Diego Molina 启发（感谢！）。\n\ndeclare -a array0\nwhile read\ndo\n  array0[${#array0[@]}]=\"$REPLY\"\ndone < <( sed -e 's/bash/CRASH-BANG!/' $0 | grep bin | awk '{print $1}' )\n#  由进程替换来设置'read'默认变量（$REPLY）。\n#+ 然后将变量复制到一个数组。\n\necho \"${array0[@]}\"\n\nexit $?\n\n# ====================================== #\n# 运行结果：\nbash psub.bash\n\n#!/bin/CRASH-BANG! done #!/bin/CRASH-BANG!\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("一个读者发来一个有趣的进程替换例子，如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# SuSE 发行版中提取的脚本片段：\n\n# --------------------------------------------------------------#\nwhile read  des what mask iface; do\n# 一些命令 ...\ndone < <(route -n)  \n#    ^ ^  第一个 < 是重定向，第二个是进程替换。\n\n#  为了测试，我们让它来做点儿事情。\nwhile read  des what mask iface; do\n  echo $des $what $mask $iface\ndone < <(route -n)  \n\n# 输出内容:\n# Kernel IP routing table\n# Destination Gateway Genmask Flags Metric Ref Use Iface\n# 127.0.0.0 0.0.0.0 255.0.0.0 U 0 0 0 lo\n# --------------------------------------------------------------#\n\n#  正如 Stéphane Chazelas 指出的,\n#+ 一个更容易理解的等价代码如下：\nroute -n |\n  while read des what mask iface; do   # 通过管道输出设置的变量\n    echo $des $what $mask $iface\n  done  #  这段代码的结果更上面的相同。\n        #  但是，Ulrich Gayer 指出 . . .\n        #+ 这段简化版等价代码在 while 循环里用了子 shell，\n        #+ 因此当管道终止时变量都消失了。\n\n# --------------------------------------------------------------#\n\n#  然而，Filip Moritz 说上面的两个例子有一个微妙的区别，\n#+ 见下面的代码\n\n(\nroute -n | while read x; do ((y++)); done\necho $y # $y is still unset\n\nwhile read x; do ((y++)); done < <(route -n)\necho $y # $y has the number of lines of output of route -n\n)\n\n#  更通俗地说（译者注：原文本行少了注释符）\n(\n: | x=x\n# 似乎启动了子 shell ，就像\n: | ( x=x )\n# 而\nx=x < <(:)\n# 并没有。\n)\n#  这个方法在解析 csv 和类似格式时很有用。\n#  也就是在效果上，原始 SuSE 系统的代码片段就是做这个用的。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br")])]),a("p",[s._v("注解 [1]\n这个与命名管道（使用临时文件）的效果相同，而且事实上，进程替换也曾经用过命名管道。")])])}),[],!1,null,null,null);n.default=r.exports}}]);