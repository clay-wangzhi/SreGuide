import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as p}from"./app-1a5afd71.js";const t={},e=p(`<h1 id="_9-3-继承、多态和mixin" tabindex="-1"><a class="header-anchor" href="#_9-3-继承、多态和mixin" aria-hidden="true">#</a> 9.3 继承、多态和Mixin</h1><h2 id="继承基本概念" tabindex="-1"><a class="header-anchor" href="#继承基本概念" aria-hidden="true">#</a> 继承基本概念</h2><p>面向对象三要素之一，继承 Inheritance</p><p>人类和猫类都继承自动物类。 个体继承自父母，继承了父母的一部分特征，但也可以有自己的个性。 在面向对象的世界中，从父类继承，就可以直接拥有父类的属性和方法，这样可减少代码冗余、多复用。子类也可以定义自己的属性和方法。</p><p>看一个不用继承的例子</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">shout</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Animal shouts&#39;</span><span class="token punctuation">)</span>

a <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span>shout<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">shout</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Cat shouts&#39;</span><span class="token punctuation">)</span>

c <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span>shout<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的2个类虽然有关系，但是定义时并没有建立这种关系，而是各自完成定义。 动物类和猫类都会叫，但是它们的叫法有区别，所以分别定义。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_name <span class="token operator">=</span> name

    <span class="token keyword">def</span> <span class="token function">shout</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 一个通用的叫方法</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{} shouts&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_name

a <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token string">&#39;monster&#39;</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span>shout<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

cat <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">&#39;garfield&#39;</span><span class="token punctuation">)</span>
cat<span class="token punctuation">.</span>shout<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">&#39;ahuang&#39;</span><span class="token punctuation">)</span>
dog<span class="token punctuation">.</span>shout<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例可以看出，通过继承，猫类、狗类不用写代码，直接继承了父类的属性和方法。</p><p><strong>继承</strong> class Cat(Animal) 这种形式就是从父类继承，括号中写上继承的类的列表。 继承可以让子类从父类获取特征（属性和方法）</p><p><strong>父类</strong> Animal就是Cat的父类，也称为基类、超类。</p><p><strong>子类</strong> Cat就是Animal的子类，也称为派生类。</p><h2 id="类继承的定义" tabindex="-1"><a class="header-anchor" href="#类继承的定义" aria-hidden="true">#</a> 类继承的定义</h2><p>格式如下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> 子类名<span class="token punctuation">(</span>基类<span class="token number">1</span><span class="token punctuation">[</span><span class="token punctuation">,</span>基类<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	语句块
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果类定义时，没有基类列表，等同于继承自 object 。在 Python3 中，object 类是所有对象的根基类。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
	<span class="token keyword">pass</span>
<span class="token comment"># 等价于</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，上例在 Python2 中，两种写法是不同的。</p><p>Python 支持多继承，继承也可以多级。</p><p>查看继承的特殊属性和方法有</p><table><thead><tr><th>特殊属性和方法</th><th>含义</th></tr></thead><tbody><tr><td>_<em>bases</em>_</td><td>类的基类元组</td></tr><tr><td>_<em>base</em>_</td><td>类的基类元组的第一项</td></tr><tr><td>_<em>mro</em>_</td><td>显示方法查找顺序，基类的元组</td></tr><tr><td>mro()方法</td><td>同上，返回列表</td></tr><tr><td>_<em>subclasses</em>_()</td><td>类的子类列表</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>__base__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>__bases__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>mro<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>__mro__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">.</span>mro<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="python-不通版本的类" tabindex="-1"><a class="header-anchor" href="#python-不通版本的类" aria-hidden="true">#</a> Python 不通版本的类</h2><p>Python2.2之前类是没有共同的祖先的，之后，引入object类，它是所有类的共同祖先类 object。 Python2 中为了兼容，分为古典类（旧式类）和新式类。 Python3 中全部都是新式类。 新式类都是继承自 object的，新式类可以使用super。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 以下代码在Python2.x中运行</span>
<span class="token comment"># 古典类（旧式类）</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span> <span class="token keyword">pass</span>
<span class="token comment"># 新式类</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">pass</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>__bases__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span>__bases__<span class="token punctuation">)</span>
<span class="token comment"># 古典类</span>
a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># &lt;type &#39;instance&#39;&gt;</span>
<span class="token comment"># 新式类</span>
b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="继承中的访问控制" tabindex="-1"><a class="header-anchor" href="#继承中的访问控制" aria-hidden="true">#</a> 继承中的访问控制</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>
    __a <span class="token operator">=</span> <span class="token number">10</span>
    _b <span class="token operator">=</span> <span class="token number">20</span>
    c <span class="token operator">=</span> <span class="token number">30</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__d <span class="token operator">=</span> <span class="token number">40</span>
        self<span class="token punctuation">.</span>_e <span class="token operator">=</span> <span class="token number">50</span>
        self<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token number">60</span>
        self<span class="token punctuation">.</span>__a <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">def</span> <span class="token function">showa</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__a<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__a<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__showb</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_b<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__a<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__a<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __a <span class="token operator">=</span> <span class="token number">100</span>
    _b <span class="token operator">=</span> <span class="token number">200</span>

c <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span>showa<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 11 10</span>
c<span class="token punctuation">.</span>_Animal__showb<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 200, 11, 10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token comment"># 30</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>_Animal__d<span class="token punctuation">)</span> <span class="token comment">#40</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>_e<span class="token punctuation">,</span> c<span class="token punctuation">.</span>f<span class="token punctuation">,</span> c<span class="token punctuation">.</span>_Animal__a<span class="token punctuation">)</span> <span class="token comment"># 50,60,11</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>_Animal__a<span class="token punctuation">,</span> c<span class="token punctuation">.</span>_Cat__a<span class="token punctuation">)</span> <span class="token comment"># 11 100</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span> <span class="token comment">#</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从父类继承，自己没有的，就可以到父类中找。</p><p>私有的都是不可以访问的，但是本质上依然是改了名称放在这个属性所在类或实例的__dict__中。</p><p>知道这个新名称就可以直接找到这个隐藏的变量，这是个黑魔法技巧，慎用。</p><p><strong>总结</strong> 继承时，公有成员，子类和实例都可以随意访问；私有成员被隐藏，子类和实例不可直接访问，但私有变量所在的类内的方法中可以访问这个私有变量。</p><p>Python通过自己一套实现，实现和其它语言一样的面向对象的继承机制。</p><p><strong>实例属性查找顺序</strong></p><p><code>实例的__dict__</code> → <code>类__dict__</code> →如果有继承→ <code>父类 __dict__</code> 如果搜索这些地方后没有找到就会抛异常，先找到就立即返回了。</p><h2 id="方法的重写、覆盖override" tabindex="-1"><a class="header-anchor" href="#方法的重写、覆盖override" aria-hidden="true">#</a> 方法的重写、覆盖override</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">shout</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Animal shouts&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 覆盖了父类方法</span>
    <span class="token keyword">def</span> <span class="token function">shout</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;miao&#39;</span><span class="token punctuation">)</span>

a <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span>shout<span class="token punctuation">(</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span>shout<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Cat<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
<span class="token comment"># Animal shouts</span>
<span class="token comment"># miao</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Cat中能否覆盖自己的方法吗？ Cat中能否对父类方法做个增强，不需要完全重写？</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">shout</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Animal shout&#39;</span><span class="token punctuation">)</span>
        
<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 覆盖了父类方法</span>
    <span class="token keyword">def</span> <span class="token function">shout</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;miao&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 覆盖了自身的方法，显式调用了父类的方法</span>
    <span class="token keyword">def</span> <span class="token function">shout</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">super</span><span class="token punctuation">(</span>Cat<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shout<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Cat<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>shout<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 等价于super()</span>
        self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>shout<span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token comment"># 不推荐</span>
a <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span>shout<span class="token punctuation">(</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span>shout<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Cat<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>super()可以访问到父类的类属性。 静态方法和类方法，是特殊的方法，也是类属性，所以访问方式一样。</p><h2 id="继承时使用初始化" tabindex="-1"><a class="header-anchor" href="#继承时使用初始化" aria-hidden="true">#</a> 继承时使用初始化</h2><p>先看下面一段代码，有没有问题</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>a <span class="token operator">=</span> a

<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>b <span class="token operator">=</span> b
        self<span class="token punctuation">.</span>c <span class="token operator">=</span> c
    <span class="token keyword">def</span> <span class="token function">printv</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>b<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment"># 出错吗？ 出错，没定义</span>

f <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">)</span>
f<span class="token punctuation">.</span>printv<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例代码可知：</p><p>如果类B定义时声明继承自类A，则在类B中<code>__bases__</code>中是可以看到类A。 但是这和是否调用类A的构造方法是两回事。</p><p>如果B中调用了父类A的构造方法，就可以拥有父类的属性了。如何理解这一句话呢？ 观察B的实例 f 的<code>__dict__</code>中的属性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>a <span class="token operator">=</span> a
        self<span class="token punctuation">.</span>__d <span class="token operator">=</span> d

<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>
        A<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> b <span class="token operator">+</span> c<span class="token punctuation">,</span> b <span class="token operator">-</span> c<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>b <span class="token operator">=</span> b
        self<span class="token punctuation">.</span>c <span class="token operator">=</span> c
    <span class="token keyword">def</span> <span class="token function">printv</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>b<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment"># 出错吗？</span>

f <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">)</span>
f<span class="token punctuation">.</span>printv<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为好的习惯，如果父类定义了<code>__init__</code>方法，你就该在子类的<code>__init__</code>中调用它。 那么，子类什么时候自动调用父类的<code>__init__</code>方法呢？ 示例1</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>a1 <span class="token operator">=</span> <span class="token string">&#39;a1&#39;</span>
        self<span class="token punctuation">.</span>__a2 <span class="token operator">=</span> <span class="token string">&#39;a2&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;init in A&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>B实例的初始化会自动调用基类A的<code>__init__</code>方法</p><p>示例2</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>a1 <span class="token operator">=</span> <span class="token string">&#39;a1&#39;</span>
        self<span class="token punctuation">.</span>__a2 <span class="token operator">=</span> <span class="token string">&#39;a2&#39;</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;init in A&#39;</span><span class="token punctuation">)</span>
        
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>b1 <span class="token operator">=</span> <span class="token string">&#39;b1&#39;</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;init in B&#39;</span><span class="token punctuation">)</span>
        
b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>B实例一旦定义了初始化<code>__init__</code>方法，就不会自动调用父类的初始化<code>__init__</code>方法，需要手动调用。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>a1 <span class="token operator">=</span> <span class="token string">&#39;a1&#39;</span>
        self<span class="token punctuation">.</span>__a2 <span class="token operator">=</span> <span class="token string">&#39;a2&#39;</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;init in A&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment">#super().__init__()</span>
        <span class="token comment">#super(B, self).__init__()</span>
        self<span class="token punctuation">.</span>b1 <span class="token operator">=</span> <span class="token string">&#39;b1&#39;</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;init in B&#39;</span><span class="token punctuation">)</span>
        A<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        
b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span> <span class="token comment"># 注意__a2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong></p><ul><li>如果在子类中覆盖了父类的<code>__init__</code>方法，那么在子类的<code>__init__</code>方法中，应该显式调用父类的<code>__init__</code>方法</li><li>Python中并不限制在子类的<code>__init__</code>方法中调用父类的<code>__init__</code>方法的位置，但一般都应该尽早的调用</li><li>推荐使用 <code>super().__init__() </code>或<code> super(B, self).__init__()</code></li></ul><h2 id="单继承" tabindex="-1"><a class="header-anchor" href="#单继承" aria-hidden="true">#</a> 单继承</h2><p>上面的例子中，类的继承列表中只有一个类，这种继承称为单一继承。</p><p>OCP 原则：多用“继承”、少修改</p><p>继承的用途：在子类上实现对基类的增强，实现多态</p><h2 id="多态" tabindex="-1"><a class="header-anchor" href="#多态" aria-hidden="true">#</a> 多态</h2><p>在面向对象中，父类、子类通过继承联系在一起，如果可以通过一套方法，就可以实现不同表现，就是多态。多态的前提：继承、覆盖</p><h2 id="多继承" tabindex="-1"><a class="header-anchor" href="#多继承" aria-hidden="true">#</a> 多继承</h2><p>一个类继承自多个类就是多继承，它将具有多个类的特征。</p><h3 id="多继承弊端" tabindex="-1"><a class="header-anchor" href="#多继承弊端" aria-hidden="true">#</a> 多继承弊端</h3><p>多继承很好的模拟了世界，因为事物很少是单一继承，但是舍弃简单，必然引入复杂性，带来了冲突。</p><p>如同一个孩子继承了来自父母双方的特征。那么到底眼睛像爸爸还是妈妈呢？孩子究竟该像谁多一点呢？</p><p>多继承的实现会导致编译器设计的复杂度增加，所以有些高级编程语言舍弃了类的多继承。</p><p>C++支持多继承；Java舍弃了多继承。</p><p>Java中，一个类可以实现多个接口，一个接口也可以继承多个接口。Java的接口很纯粹，只是方法的声明，继承者必须实现这些方法，就具有了这些能力，就能干什么。</p><p>多继承可能会带来二义性，例如，猫和狗都继承自动物类，现在如果一个类多继承了猫和狗类，猫和狗都有shout方法，子类究竟继承谁的shout呢？</p><p>解决方案 实现多继承的语言，要解决二义性，深度优先或者广度优先。</p><h3 id="python多继承实现" tabindex="-1"><a class="header-anchor" href="#python多继承实现" aria-hidden="true">#</a> Python多继承实现</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">className</span><span class="token punctuation">(</span>基类<span class="token number">1</span>， 基类<span class="token number">2</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    类体
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/inher.png" alt="inher"></p><p>左图是多继承（菱形继承），右图是单一继承</p><p>多继承带来路径选择问题，究竟继承哪个父类的特征呢</p><p>Python使用 MRO（method resolution order方法解析顺序）解决基类搜索顺序问题。</p><ul><li>历史原因，MRO有三个搜索算法： <ul><li>经典算法，按照定义从左到右，深度优先策略。2.2版本之前 左图的MRO是MyClass,D,B,A,C,A</li><li>新式类算法，是经典算法的升级，深度优先，重复的只保留最后一个。2.2版本 左图的MRO是MyClass,D,B,C,A,object</li><li>C3算法，在类被创建出来的时候，就计算出一个MRO有序列表。2.3之后支持，Python3唯一支持的算法 左图中的MRO是MyClass,D,B,C,A,object的列表 C3算法解决多继承的二义性</li></ul></li></ul><p>经典算法有很大的问题，如果C中有方法覆盖了A的方法，也不会访问到C的方法，因为先访问A的（深度优先）。</p><p>新式类算法，依然采用了深度优先，解决了重复问题，但是同经典算法一样，没有解决继承的单调性。</p><p>C3算法，解决了继承的单调性，它阻止创建之前版本产生二义性的代码。求得的MRO 本质是为了线性化，且确定了顺序。</p><p>单调性：假设有A、B、C三个类，C的mro是[C, A, B]，那么C的子类的mro中，A、B的顺序一致就是单调的。</p><h3 id="多继承的缺点" tabindex="-1"><a class="header-anchor" href="#多继承的缺点" aria-hidden="true">#</a> 多继承的缺点</h3><p>当类很多且继承复杂的情况下，继承路径太多，很难说清什么样的继承路径。</p><p>Python语法是允许多继承，但Python代码是解释执行，只有执行到的时候，才发现错误。 团队协作开发，如果引入多继承，那代码很有可能不可控。</p><p>不管编程语言是否支持多继承，都应当避免多继承。</p><p>Python的面向对象，我们看到的太灵活了，太开放了，所以要团队守规矩。</p><h2 id="mixin" tabindex="-1"><a class="header-anchor" href="#mixin" aria-hidden="true">#</a> Mixin</h2><p>在Python的很多类的实现中，都可以看到一个Mixin的名字，这种类是什么呢？</p><p>类有下面的继承关系</p><p>文档Document类是其他所有文档类的抽象基类； Word、Pdf类是Document的子类。</p><p>需求：为Document子类提供打印能力</p><p>思路： 1、在Document中提供print方法 假设已经有了下面3个类</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Document</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>content <span class="token operator">=</span> content
    <span class="token keyword">def</span> <span class="token function">print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 抽象方法</span>
        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
<span class="token keyword">class</span> <span class="token class-name">Word</span><span class="token punctuation">(</span>Document<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">pass</span> <span class="token comment"># 其他功能略去</span>
<span class="token keyword">class</span> <span class="token class-name">Pdf</span><span class="token punctuation">(</span>Document<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">pass</span> <span class="token comment"># 其他功能略去</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基类提供的方法可以不具体实现，因为它未必适合子类的打印，子类中需要覆盖重写。</p><p>基类中只定义，不实现的方法，称为“抽象方法”。在Python中，如果采用这种方式定义的抽象方法，子类可以不实现，直到子类使用该方法的时候才报错。</p><p>print算是一种能力 —— 打印功能，不是所有的Document的子类都需要的，所有，从这个角度出发，上面的基类Document设计有点问题。</p><p>2、需要打印的子类上增加</p><p>如果在现有子类Word或Pdf上直接增加，虽然可以，却违反了OCP的原则，所以可以继承后增加打印功能。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Document</span><span class="token punctuation">:</span> <span class="token comment"># 第三方库，不允许修改</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>content <span class="token operator">=</span> content
<span class="token keyword">class</span> <span class="token class-name">Word</span><span class="token punctuation">(</span>Document<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">pass</span> <span class="token comment"># 第三方库，不允许修改</span>
<span class="token keyword">class</span> <span class="token class-name">Pdf</span><span class="token punctuation">(</span>Document<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">pass</span> <span class="token comment"># 第三方库，不允许修改</span>
<span class="token comment"># 单继承</span>
<span class="token keyword">class</span> <span class="token class-name">PrintableWord</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>content<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>PrintableWord<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>PrintableWord<span class="token punctuation">.</span>mro<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
pw <span class="token operator">=</span> PrintableWord<span class="token punctuation">(</span><span class="token string">&#39;test string&#39;</span><span class="token punctuation">)</span>
pw<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看似不错，如果需要还要提供其他能力，如何继承？</p><p>例如，如果该类用于网络，还应具备序列化的能力，在类上就应该实现序列化。</p><p>可序列化还可能分为使用pickle、json、messagepack等。</p><p>这个时候发现，为了</p><p>增加一种能力，就要增加一次继承，类可能太多了，继承的方式不是很好了。</p><p>功能太多，A类需要某几样功能，B类需要另几样功能，它们需要的是多个功能的自由组合，继承实现很繁琐。</p><p>3、Mixin</p><p>先看代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Document</span><span class="token punctuation">:</span> <span class="token comment"># 第三方库，不允许修改</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>content <span class="token operator">=</span> content
<span class="token keyword">class</span> <span class="token class-name">Word</span><span class="token punctuation">(</span>Document<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">pass</span> <span class="token comment"># 第三方库，不允许修改</span>
<span class="token keyword">class</span> <span class="token class-name">Pdf</span><span class="token punctuation">(</span>Document<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">pass</span> <span class="token comment"># 第三方库，不允许修改</span>
<span class="token keyword">class</span> <span class="token class-name">PrintableMixin</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">&#39;Mixin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">PrintableWord</span><span class="token punctuation">(</span>PrintableMixin<span class="token punctuation">,</span> Word<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">pass</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>PrintableWord<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>PrintableWord<span class="token punctuation">.</span>mro<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mixin就是其它类混合进来，同时带来了类的属性和方法。</p><p><strong>Mixin类</strong></p><p>Mixin 本质上就是多继承实现的。</p><p>Mixin 体现的是一种组合的设计模式。</p><p>在面向对象的设计中，一个复杂的类，往往需要很多功能，而这些功能由来自不同的类提供，这就需要很多的类组合在一起。</p><p>从设计模式的角度来说，多组合，少继承。</p><p>Mixin 类的使用原则</p><ul><li>Mixin类中不应该显式的出现<code>__init__</code>初始化方法</li><li>Mixin 类通常不能独立工作，因为它是准备混入别的类中的部分功能实现</li><li>Mixin 类是类，也可以继承，其祖先类也应是 Mixin 类</li></ul><p>使用时，<strong>Mixin 类通常在继承列表的第一个位置</strong>，例如 <code>class PrintableWord(PrintableMixin, Word): pass</code></p><p>Mixin 类和装饰器，都可以实现对类的增强，这两种方式都可以使用，看个人喜好。</p><p>如果还需要继承就得使用 Mixin 类的方式。</p>`,120),c=[e];function o(i,l){return s(),a("div",null,c)}const k=n(t,[["render",o],["__file","python-oo-inher-pol.html.vue"]]);export{k as default};
