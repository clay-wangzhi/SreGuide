import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as B,o,c as t,b as l,d as e,e as s,a as h}from"./app-6e2a3b53.js";const r={},a=l("h1",{id:"第一章-为什么使用shell编程",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#第一章-为什么使用shell编程","aria-hidden":"true"},"#"),e(" 第一章 为什么使用shell编程")],-1),i=l("blockquote",null,[l("p",null,"没有任何一种程序设计语言是完美的，甚至没有一个最好的语言。只有在特定环境下适合的语言。"),l("p",null,"—— Herbert Mayer")],-1),A=l("p",null,[e("无论你是否打算真正编写shell脚本，只要你想要在一定程度上熟悉系统管理，了解掌握shell脚本的相关知识都是非常有必要的。例如Linux系统在启动的时候会执行"),l("code",null,"/etc/rc.d"),e("目录下的shell脚本来恢复系统配置和准备服务。详细了解这些启动脚本对分析系统行为大有益处，何况，你很有可能会去修改它们呢。")],-1),c=l("p",null,[e("编写shell脚本并不困难，shell脚本由许多小的部分组成，而其中只有数量相当少的与shell本身特性，操作和选项"),l("a",{href:"%E8%BF%99%E4%BA%9B%E6%93%8D%E4%BD%9C%E5%92%8C%E9%80%89%E9%A1%B9%E8%A2%AB%E7%A7%B0%E4%B8%BA%E5%86%85%E5%BB%BA%E5%91%BD%E4%BB%A4%EF%BC%88builtin%EF%BC%89%EF%BC%8C%E6%98%AFshell%E7%9A%84%E5%86%85%E9%83%A8%E7%89%B9%E5%BE%81%E3%80%82"},"^1"),e('有关的部分才需要去学习。Shell语法非常简单朴素，很像是在命令行中调用和连接工具，你只需遵循很少一部分的"规则"就可以了。大部分短小的脚本通常在第一次就可以正常工作，即使是一个稍长一些的脚本，调试起来也十分简单。')],-1),_=l("p",null,"在个人计算机发展的早期，BASIC语言让计算机专业人士能够在早期的微机上编写程序。几十年后，Bash脚本可以让所有仅对Linux或UNIX系统有初步了解的用户在现代计算机上做同样的事。",-1),d={href:"http://www.raspberrypi.org/",target:"_blank",rel:"noopener noreferrer"},u=h('<p>使用shell脚本构建一个复杂应用原型（prototype），不失为是一种虽有缺陷但非常快速的方式。在项目开发初期，使用脚本实现部分功能往往显得十分有用。在使用C/C++，Java，Perl或Python编写最终代码前，可以使用shell脚本测试，修补应用结构，提前发现重大缺陷。</p><p>Shell脚本与经典的UINX哲学相似，将复杂的任务划分为简单的子任务，将组件与工具连接起来。许多人认为比起新一代功能强大、高度集成的语言，例如Perl，shell脚本至少是一种在美学上更加令人愉悦的解决问题的方式，Perl试图做到面面俱到，但你必须强迫自己改变思维方式适应它。</p><p>Herbert Mayer曾说：“有用的语言需要数组、指针以及构建数据结构的通用机制”。如果依据这些标准，那shell脚本距“有用”还差得很远，甚至是“无用”的。</p><h3 id="什么时候不应该使用shell脚本" tabindex="-1"><a class="header-anchor" href="#什么时候不应该使用shell脚本" aria-hidden="true">#</a> 什么时候不应该使用shell脚本</h3><ul><li>资源密集型的任务，尤其是对速度有要求（如排序、散列、递归<a href="%E8%99%BD%E7%84%B6%E9%80%92%E5%BD%92%E5%8F%AF%E4%BB%A5%E5%9C%A8shell%E8%84%9A%E6%9C%AC%E4%B8%AD%E5%AE%9E%E7%8E%B0%EF%BC%8C%E4%BD%86%E6%98%AF%E5%AE%83%E7%9A%84%E6%95%88%E7%8E%87%E5%BE%88%E4%BD%8E%E4%B8%94%E5%AE%9E%E7%8E%B0%E8%B5%B7%E6%9D%A5%E5%BE%88%E5%A4%8D%E6%9D%82%E3%80%81%E4%B8%8D%E5%85%B7%E6%9C%89%E7%BE%8E%E6%84%9F%E3%80%82">^2</a>等）</li><li>需要做大量的数学运算，例如浮点数运算，高精度运算或者复数运算（使用C++或FORTRAN代替）</li><li>有跨平台需求（使用C或者Java代替）</li><li>必须使用结构化编程的复杂应用（如变量类型检查、函数原型等）</li><li>影响系统全局的关键性任务</li><li>对安全性有高要求，需要保证系统的完整性以及阻止入侵、破解、恶意破坏</li><li>项目包含有连锁依赖关系的组件</li><li>需要大量的文件操作（Bash只能访问连续的文件，并且是以一种非常笨拙且低效的逐行访问的方式进行的）</li><li>需要使用多维数组</li><li>需要使用如链表、树等数据结构</li><li>需要产生或操作图像和图形用户接口（GUI）</li><li>需要直接访问系统硬件或外部设备</li><li>需要使用端口或套接字输入输出端口（Socket I/O）</li><li>需要使用库或旧程序的接口</li><li>私有或闭源的项目（Shell脚本直接将源代码公开，所有人都可以看到）</li></ul><p>如果你的应用满足上述任意一条，你可以考虑使用更加强大的脚本语言，如Perl，Tcl，Python，Ruby等，或考虑使用编译型语言，如C，C++或Java等。即使如此，在开发阶段使用shell脚本建立应用原型也是十分有用的。</p>',6),p=l("a",{href:"%E9%A6%96%E5%AD%97%E6%AF%8D%E7%BC%A9%E7%95%A5%E8%AF%8D%E6%98%AF%E7%94%B1%E6%AF%8F%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%A6%96%E5%AD%97%E6%AF%8D%E6%8B%BC%E6%8E%A5%E8%80%8C%E6%88%90%E7%9A%84%E6%98%93%E8%AF%BB%E7%9A%84%E4%BB%A3%E6%9B%BF%E7%9F%AD%E8%AF%AD%E3%80%82%E8%BF%99%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E5%A5%BD%E4%B9%A0%E6%83%AF%EF%BC%8C%E9%80%9A%E5%B8%B8%E4%BC%9A%E5%BC%95%E8%B5%B7%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84%E9%BA%BB%E7%83%A6%E3%80%82"},"^3",-1),C=l("a",{href:"ksh88%E4%B8%AD%E7%9A%84%E8%AE%B8%E5%A4%9A%E7%89%B9%E6%80%A7%EF%BC%8C%E7%94%9A%E8%87%B3%E4%B8%80%E4%BA%9Bksh93%E7%9A%84%E7%89%B9%E6%80%A7%E9%83%BD%E8%A2%AB%E5%90%88%E5%B9%B6%E5%88%B0Bash%E4%B8%AD%E4%BA%86%E3%80%82"},"^4",-1),F={href:"http://www.faqs.org/faqs/unix-faq/shell/csh-whynot/",target:"_blank",rel:"noopener noreferrer"},D=l("code",null,"scriptname.sh",-1),f=l("code",null,"scriptname.bash",-1),m=l("code",null,"chmod u+rx scriptname",-1),b={href:"http://bash.deta.in/abs-guide-latest.tar.bz2",target:"_blank",rel:"noopener noreferrer"},g=l("p",null,[e("除特别说明，本书所有例子均由"),l("a",{href:"mailto:thegrendel.abs@gmail.com"},"本书作者"),e("编写。")],-1),k=l("blockquote",null,[l("p",null,"His countenance was bold and bashed not."),l("p",null,"—— Edmund Spenser")],-1),x=l("p",null,[e("[^5]: 按照惯例，用户编写的Bourne shell脚本应该在文件名后加上"),l("code",null,".sh"),e("的扩展名。而那些系统脚本，比如在"),l("code",null,"/etc/rc.d"),e("中的脚本通常不遵循这种规范。")],-1);function S(w,y){const E=B("ExternalLinkIcon");return o(),t("div",null,[a,i,A,c,l("blockquote",null,[_,l("p",null,[e("我们现在已经可以做出一些又小又快的单板机，比如"),l("a",d,[e("树莓派"),s(E)]),e("。Bash脚本提供了一种发掘这些有趣设备潜力的方式。")])]),u,l("p",null,[e('我们接下来将使用Bash。Bash是"Bourne-Again shell"的首字母缩略词'),p,e("，Bash来源于Stephen Bourne开发的Bourne shell（sh）。如今Bash已成为了大部分UNIX衍生版中shell脚本事实上的标准。本书所涉及的大部分概念在其他shell中也是适用的，例如Korn Shell，Bash从它当中继承了一部分的特性"),C,e("；又如C Shell及其变体（需要注意的是，1993年10月Tom Christiansen在"),l("a",F,[e("Usenet帖子"),s(E)]),e("中指出，因C Shell内部固有的问题，不推荐使用C Shell编程）")]),l("p",null,[e("接下来的部分将是一些编写shell脚本的指导。这些指导很大程度上依赖于实例来阐述shell的特性。本书所有的例子都能够正常工作，并在尽可能的范围内进行过测试，其中的一部分已经运用在实际生产生活中。读者们可以使用这些在存档中的例子（文件名为"),D,e("或"),f,e("）[^5]，赋予它们可执行权限（"),m,e("），然后执行它们看看会发生什么。如果"),l("a",b,[e("存档"),s(E)]),e("不可用，读者朋友也可以从本书的HTML或者PDF版本中复制粘贴代码出来。需要注意的是，在部分例子中使用了一些暂时还未被解释的特性，这需要读者暂时跳过它们。")]),g,k,x])}const P=n(r,[["render",S],["__file","01_shell_programming.html.vue"]]);export{P as default};
