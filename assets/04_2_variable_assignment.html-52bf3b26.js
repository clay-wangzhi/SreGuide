const n=JSON.parse(`{"key":"v-549a3ab9","path":"/code/shell/part2/04_2_variable_assignment.html","title":"4.2 变量赋值","lang":"zh-CN","frontmatter":{"author":"LinuxStory","category":"Linux","tag":["Bash"],"description":"4.2 变量赋值 = 赋值操作符（在其前后没有空白符）。 不要混淆 = 与 -eq，后者用来进行比较而非赋值。 同时也要注意 = 根据使用场景既可作赋值操作符，也可作比较操作符。 样例 4-2. 变量赋值 #!/bin/bash # 非引用形式变量 echo # 什么时候变量是非引用形式，即变量名前没有 '$' 符号的呢？ # 当变量在被赋值而不是被引用时。 # 赋值 a=879 echo \\"The value of \\\\\\"a\\\\\\" is $a.\\" # 使用 'let' 进行赋值 let a=16+5 echo \\"The value of \\\\\\"a\\\\\\" is now $a.\\" echo # 在 'for' 循环中赋值（隐式赋值） echo -n \\"Values of \\\\\\"a\\\\\\" in the loop are: \\" for a in 7 8 9 11 do echo -n \\"$a \\" done echo echo # 在 'read' 表达式中（另一种赋值形式） echo -n \\"Enter \\\\\\"a\\\\\\" \\" read a echo \\"The value of \\\\\\"a\\\\\\" is now $a.\\" echo exit 0","head":[["meta",{"property":"og:url","content":"https://clay-wangzhi.com/code/shell/part2/04_2_variable_assignment.html"}],["meta",{"property":"og:site_name","content":"SRE运维进阶之路"}],["meta",{"property":"og:title","content":"4.2 变量赋值"}],["meta",{"property":"og:description","content":"4.2 变量赋值 = 赋值操作符（在其前后没有空白符）。 不要混淆 = 与 -eq，后者用来进行比较而非赋值。 同时也要注意 = 根据使用场景既可作赋值操作符，也可作比较操作符。 样例 4-2. 变量赋值 #!/bin/bash # 非引用形式变量 echo # 什么时候变量是非引用形式，即变量名前没有 '$' 符号的呢？ # 当变量在被赋值而不是被引用时。 # 赋值 a=879 echo \\"The value of \\\\\\"a\\\\\\" is $a.\\" # 使用 'let' 进行赋值 let a=16+5 echo \\"The value of \\\\\\"a\\\\\\" is now $a.\\" echo # 在 'for' 循环中赋值（隐式赋值） echo -n \\"Values of \\\\\\"a\\\\\\" in the loop are: \\" for a in 7 8 9 11 do echo -n \\"$a \\" done echo echo # 在 'read' 表达式中（另一种赋值形式） echo -n \\"Enter \\\\\\"a\\\\\\" \\" read a echo \\"The value of \\\\\\"a\\\\\\" is now $a.\\" echo exit 0"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-19T13:08:31.000Z"}],["meta",{"property":"article:author","content":"LinuxStory"}],["meta",{"property":"article:tag","content":"Bash"}],["meta",{"property":"article:modified_time","content":"2023-04-19T13:08:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.2 变量赋值\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-19T13:08:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LinuxStory\\"}]}"]]},"headers":[{"level":3,"title":"=","slug":"","link":"#","children":[]}],"git":{"createdTime":1681909711000,"updatedTime":1681909711000,"contributors":[{"name":"clay-wangzhi","email":"clay.wangzhi@gmail.com","commits":1}]},"readingTime":{"minutes":1.44,"words":431},"filePathRelative":"code/shell/part2/04_2_variable_assignment.md","localizedDate":"2023年4月19日","excerpt":"<h1> 4.2 变量赋值</h1>\\n<h3> =</h3>\\n<p>赋值操作符（在其前后没有空白符）。</p>\\n<blockquote>\\n<p><img src=\\"http://tldp.org/LDP/abs/images/caution.gif\\" alt=\\"noitce\\"> 不要混淆 = 与 -eq，后者用来进行比较而非赋值。</p>\\n<p>同时也要注意 = 根据使用场景既可作赋值操作符，也可作比较操作符。</p>\\n</blockquote>\\n<p>样例 4-2. 变量赋值</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token shebang important\\">#!/bin/bash</span>\\n<span class=\\"token comment\\"># 非引用形式变量</span>\\n\\n<span class=\\"token builtin class-name\\">echo</span>\\n\\n<span class=\\"token comment\\"># 什么时候变量是非引用形式，即变量名前没有 '$' 符号的呢？</span>\\n<span class=\\"token comment\\"># 当变量在被赋值而不是被引用时。</span>\\n\\n<span class=\\"token comment\\"># 赋值</span>\\n<span class=\\"token assign-left variable\\">a</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">879</span>\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token string\\">\\"The value of <span class=\\"token entity\\" title=\\"\\\\&quot;\\">\\\\\\"</span>a<span class=\\"token entity\\" title=\\"\\\\&quot;\\">\\\\\\"</span> is <span class=\\"token variable\\">$a</span>.\\"</span>\\n\\n<span class=\\"token comment\\"># 使用 'let' 进行赋值</span>\\n<span class=\\"token builtin class-name\\">let</span> <span class=\\"token assign-left variable\\">a</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">16</span>+5\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token string\\">\\"The value of <span class=\\"token entity\\" title=\\"\\\\&quot;\\">\\\\\\"</span>a<span class=\\"token entity\\" title=\\"\\\\&quot;\\">\\\\\\"</span> is now <span class=\\"token variable\\">$a</span>.\\"</span>\\n\\n<span class=\\"token builtin class-name\\">echo</span>\\n\\n<span class=\\"token comment\\"># 在 'for' 循环中赋值（隐式赋值）</span>\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token parameter variable\\">-n</span> <span class=\\"token string\\">\\"Values of <span class=\\"token entity\\" title=\\"\\\\&quot;\\">\\\\\\"</span>a<span class=\\"token entity\\" title=\\"\\\\&quot;\\">\\\\\\"</span> in the loop are: \\"</span>\\n<span class=\\"token keyword\\">for</span> <span class=\\"token for-or-select variable\\">a</span> <span class=\\"token keyword\\">in</span> <span class=\\"token number\\">7</span> <span class=\\"token number\\">8</span> <span class=\\"token number\\">9</span> <span class=\\"token number\\">11</span>\\n<span class=\\"token keyword\\">do</span>\\n  <span class=\\"token builtin class-name\\">echo</span> <span class=\\"token parameter variable\\">-n</span> <span class=\\"token string\\">\\"<span class=\\"token variable\\">$a</span> \\"</span>\\n<span class=\\"token keyword\\">done</span>\\n\\n<span class=\\"token builtin class-name\\">echo</span>\\n<span class=\\"token builtin class-name\\">echo</span>\\n\\n<span class=\\"token comment\\"># 在 'read' 表达式中（另一种赋值形式）</span>\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token parameter variable\\">-n</span> <span class=\\"token string\\">\\"Enter <span class=\\"token entity\\" title=\\"\\\\&quot;\\">\\\\\\"</span>a<span class=\\"token entity\\" title=\\"\\\\&quot;\\">\\\\\\"</span> \\"</span>\\n<span class=\\"token builtin class-name\\">read</span> a\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token string\\">\\"The value of <span class=\\"token entity\\" title=\\"\\\\&quot;\\">\\\\\\"</span>a<span class=\\"token entity\\" title=\\"\\\\&quot;\\">\\\\\\"</span> is now <span class=\\"token variable\\">$a</span>.\\"</span>\\n\\n<span class=\\"token builtin class-name\\">echo</span>\\n\\n<span class=\\"token builtin class-name\\">exit</span> <span class=\\"token number\\">0</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"LinuxStory"},"autoDesc":true}`);export{n as data};
