import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as r,c as p,b as s,e as n,a}from"./app-20d624c9.js";const l={},t=n(`<h1 id="linux-性能基准测试工具及测试方法" tabindex="-1"><a class="header-anchor" href="#linux-性能基准测试工具及测试方法" aria-hidden="true">#</a> Linux 性能基准测试工具及测试方法</h1><p>上篇文章 todo ，给我们的经验教训，就是上线前，基准测试的重要性，这篇文章着重介绍一下「Linux 性能基准测试工具及测试方法」</p><p>还是老规矩，先请性能领域的大师布伦丹·格雷格（Brendan Gregg）登场 👏👏👏</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/linux_benchmarking_tools.png" alt="linux_benchmarking_tools"></p><p>整理测试指标如下图</p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240301222005893.png" style="zoom:67%;"><blockquote><p>测试环境说明： CentOS7， 4c8g</p></blockquote><h2 id="cpu" tabindex="-1"><a class="header-anchor" href="#cpu" aria-hidden="true">#</a> CPU</h2><p><strong>Super_Pi</strong> 是一种用于计算圆周率π的程序，通常用于测试计算机性能和稳定性。它的主要用途是测量系统的单线程性能，因为它是一个单线程应用程序。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装 bc</span>
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">bc</span>
<span class="token comment"># 测试</span>
<span class="token function">time</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;scale=5000; 4*a(1)&quot;</span> <span class="token operator">|</span> <span class="token function">bc</span> <span class="token parameter variable">-l</span> <span class="token parameter variable">-q</span> <span class="token operator">&amp;&gt;</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 结果分析，看 real 即可，时间越短，性能越好</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11),i=n(`<img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240301220028185.png" alt="" style="zoom:50%;"><p><strong>sysbench</strong> 素数计算</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装 sysbench</span>
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> sysbench
<span class="token comment"># 测试方法: 启动4个线程计算10000事件所花的时间</span>
sysbench cpu <span class="token parameter variable">--threads</span><span class="token operator">=</span><span class="token number">4</span> <span class="token parameter variable">--events</span><span class="token operator">=</span><span class="token number">10000</span> <span class="token parameter variable">--time</span><span class="token operator">=</span><span class="token number">0</span>  run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 结果分析，看 total time 即可，时间越短，性能越好</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),o=n(`<img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240301173055825.png" alt="" style="zoom:50%;"><h2 id="内存" tabindex="-1"><a class="header-anchor" href="#内存" aria-hidden="true">#</a> 内存</h2><p><strong>内存带宽(stream)</strong></p><p>Stream测试是内存测试中业界公认的内存带宽性能测试基准工具</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 编译安装 STREAM</span>
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc gcc-gfortran
<span class="token function">git</span> clone https://github.com/jeffhammond/STREAM.git
<span class="token builtin class-name">cd</span> STREAM/
<span class="token function">make</span>
<span class="token comment"># 指定线程数</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">OMP_NUM_THREADS</span><span class="token operator">=</span><span class="token number">1</span>
./stream_c.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 结果分析，看 Copy、Scale、Add、Triad，数值越大，性能越好</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),c=n(`<img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240301173606072.png" alt="" style="zoom:50%;"><h2 id="磁盘-io" tabindex="-1"><a class="header-anchor" href="#磁盘-io" aria-hidden="true">#</a> 磁盘 IO</h2><blockquote><p>⚠️ 测试时请准备裸的数据盘，测试完成后请重新格式化磁盘</p></blockquote><p>测试方法和结果分析和文件 IO 测试相同，<code>--filename</code> 改为具体的数据盘即可，比如<code>/dev/sda </code>，这里不再赘述</p><h2 id="文件-io" tabindex="-1"><a class="header-anchor" href="#文件-io" aria-hidden="true">#</a> 文件 IO</h2><p><strong>磁盘读、写iops</strong></p><p>iops：磁盘的每秒读写次数，这个是随机读写考察的重点</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装</span>
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> fio
<span class="token comment"># 测试随机读 IOPS</span>
fio <span class="token parameter variable">--ioengine</span><span class="token operator">=</span>libaio <span class="token parameter variable">--bs</span><span class="token operator">=</span>4k <span class="token parameter variable">--direct</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--thread</span> <span class="token parameter variable">--time_based</span> <span class="token parameter variable">--rw</span><span class="token operator">=</span>randread <span class="token parameter variable">--filename</span><span class="token operator">=</span>/home/randread.txt <span class="token parameter variable">--runtime</span><span class="token operator">=</span><span class="token number">60</span> <span class="token parameter variable">--numjobs</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--iodepth</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--group_reporting</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>randread-dep1 <span class="token parameter variable">--size</span><span class="token operator">=</span>1g
<span class="token comment"># 测试随机写 IOPS</span>
fio <span class="token parameter variable">--ioengine</span><span class="token operator">=</span>libaio <span class="token parameter variable">--bs</span><span class="token operator">=</span>4k <span class="token parameter variable">--direct</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--thread</span> <span class="token parameter variable">--time_based</span> <span class="token parameter variable">--rw</span><span class="token operator">=</span>randwrite <span class="token parameter variable">--filename</span><span class="token operator">=</span>/home/randwrite.txt <span class="token parameter variable">--runtime</span><span class="token operator">=</span><span class="token number">60</span> <span class="token parameter variable">--numjobs</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--iodepth</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--group_reporting</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>randread-dep1 <span class="token parameter variable">--size</span><span class="token operator">=</span>1g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 结果分析，看 IOPS 即可，值越大，性能越好</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9),m=n(`<img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240301175213772.png" alt="" style="zoom:50%;"><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240301175504178.png" alt="image-20240301175504178" style="zoom:50%;"><p><strong>磁盘读、写带宽</strong></p><p>bw：磁盘的吞吐量，这个是顺序读写考察的重点</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 测试顺序读</span>
fio <span class="token parameter variable">--ioengine</span><span class="token operator">=</span>libaio <span class="token parameter variable">--bs</span><span class="token operator">=</span>4k <span class="token parameter variable">--direct</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--thread</span> <span class="token parameter variable">--time_based</span> <span class="token parameter variable">--rw</span><span class="token operator">=</span>read <span class="token parameter variable">--filename</span><span class="token operator">=</span>/home/read.txt <span class="token parameter variable">--runtime</span><span class="token operator">=</span><span class="token number">60</span> <span class="token parameter variable">--numjobs</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--iodepth</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--group_reporting</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>randread-dep1 <span class="token parameter variable">--size</span><span class="token operator">=</span>1g
<span class="token comment"># 测试顺序写</span>
fio <span class="token parameter variable">--ioengine</span><span class="token operator">=</span>libaio <span class="token parameter variable">--bs</span><span class="token operator">=</span>4k <span class="token parameter variable">--direct</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--thread</span> <span class="token parameter variable">--time_based</span> <span class="token parameter variable">--rw</span><span class="token operator">=</span>write <span class="token parameter variable">--filename</span><span class="token operator">=</span>/home/write.txt <span class="token parameter variable">--runtime</span><span class="token operator">=</span><span class="token number">60</span> <span class="token parameter variable">--numjobs</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--iodepth</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--group_reporting</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>randread-dep1 <span class="token parameter variable">--size</span><span class="token operator">=</span>1g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 结果分析，看 BW 即可，值越大，性能越好</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),d=n(`<img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240301175906083.png" alt="" style="zoom:50%;"><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240301180201261.png" style="zoom:50%;"><blockquote><p>⚠️ <strong>因地制宜，灵活选取。在基准测试时，一定要注意根据应用程序 I/O 的特点，来具体评估指标。</strong></p><p>比如 etcd 磁盘性能衡量指标为：WAL 文件系统调用 fsync 的延迟分布，当 99% 样本的同步时间小于 10 毫秒就可以认为存储性能能够满足 etcd 的性能要求。</p><p><code>mkdir etcd-bench </code><code>fio --rw=write --ioengine=sync --fdatasync=1 --directory=etcd-bench --size=22m --bs=2300 --name=etcd-bench </code></p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240301180941306.png" style="zoom:50%;"></blockquote><h2 id="网络" tabindex="-1"><a class="header-anchor" href="#网络" aria-hidden="true">#</a> 网络</h2><p><strong>传输速率(pps)</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># server &amp; client 编译安装 netserver</span>
<span class="token function">wget</span> <span class="token parameter variable">-c</span> <span class="token string">&quot;https://codeload.github.com/HewlettPackard/netperf/tar.gz/netperf-2.5.0&quot;</span> <span class="token parameter variable">-O</span> netperf-2.5.0.tar.gz
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc cc 
<span class="token function">tar</span> zxvf netperf-2.5.0.tar.gz
<span class="token builtin class-name">cd</span> netperf-netperf-2.5.0
./configure <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span>

<span class="token comment"># server 端启动 netserver</span>
netserver
<span class="token comment"># 监控数据</span>
sar <span class="token parameter variable">-n</span> DEV <span class="token number">5</span>

<span class="token comment"># client 端测试</span>
netperf <span class="token parameter variable">-t</span> UDP_STREAM <span class="token parameter variable">-H</span> <span class="token operator">&lt;</span>server ip<span class="token operator">&gt;</span> <span class="token parameter variable">-l</span> <span class="token number">100</span> -- <span class="token parameter variable">-m</span> <span class="token number">64</span> <span class="token parameter variable">-R</span> <span class="token number">1</span> <span class="token operator">&amp;</span>
<span class="token comment"># 监控数据</span>
sar <span class="token parameter variable">-n</span> DEV <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 结果分析，看 rxpck/s,txpck/s 值即可，值越大，性能越好</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),b=n(`<img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240301183938233.png" style="zoom:50%;"><p><strong>网络带宽</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># server 端启动 netserver</span>
netserver
<span class="token comment"># 监控数据</span>
sar <span class="token parameter variable">-n</span> DEV <span class="token number">5</span>
 
<span class="token comment"># client 端测试</span>
netperf <span class="token parameter variable">-t</span> TCP_STREAM <span class="token parameter variable">-H</span> <span class="token operator">&lt;</span>server ip<span class="token operator">&gt;</span> <span class="token parameter variable">-l</span> <span class="token number">100</span> -- <span class="token parameter variable">-m</span> <span class="token number">1500</span> <span class="token parameter variable">-R</span> <span class="token number">1</span> <span class="token operator">&amp;</span>
<span class="token comment"># 监控数据</span>
sar <span class="token parameter variable">-n</span> DEV <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 结果分析，看 rxkB/s,txkB/s 值即可，值越大，性能越好</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),v=n(`<img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240301215710451.png" style="zoom:50%;"><h2 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx" aria-hidden="true">#</a> Nginx</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装 ab 工具</span>
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> httpd-tools

<span class="token comment"># 编译安装 wrk</span>
<span class="token function">git</span> clone https://github.com/wg/wrk.git
<span class="token function">make</span>
<span class="token function">cp</span> wrk /usr/local/bin/
 
<span class="token comment"># 测试，-c表示并发连接数1000，-t表示线程数为2，-d 表示测试时间</span>
wrk <span class="token parameter variable">-t12</span> <span class="token parameter variable">-c400</span> <span class="token parameter variable">-d30s</span> <span class="token operator">&lt;</span>URL<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 结果分析，Requests/sec 为 QPS</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),u=n(`<img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240301222852837.png" alt="image-20240301222852837" style="zoom:50%;"><h2 id="自动化压测脚本" tabindex="-1"><a class="header-anchor" href="#自动化压测脚本" aria-hidden="true">#</a> 自动化压测脚本</h2><blockquote><p>压测需要大量采样，并实时观察</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/clay-wangzhi/bench.git
<span class="token function">bash</span> bench.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),k=a("img",{src:"https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240301225244059.png",style:{zoom:"50%"}},null,-1),g=a("p",null,"更多测试方法，详见 https://github.com/clay-wangzhi/bench",-1),h=a("p",null,"我是 Clay，下期见 👋",-1),y=a("hr",null,null,-1),f=a("blockquote",null,[a("ul",null,[a("li",null,[a("p",null,"欢迎订阅我的公众号「SRE运维进阶之路」或关注我的 Github https://github.com/clay-wangzhi/wiki 查看最新文章")]),a("li",null,[a("p",null,[s("欢迎加我微信"),a("code",null,"sre-k8s-ai"),s("，与我讨论云原生、稳定性相关内容")])])])],-1),_=a("img",{src:"https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/weixin-20240220180036567.png",alt:"weixin",style:{zoom:"33%"}},null,-1);function x(z,w){return r(),p("div",null,[t,s(),i,s(),o,s(),c,s(),m,s(),d,s(),b,s(),v,s(),u,s(),k,g,h,y,f,_])}const E=e(l,[["render",x],["__file","sysbench.html.vue"]]);export{E as default};
