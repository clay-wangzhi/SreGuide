import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as p}from"./app-1a5afd71.js";const t={},e=p(`<h1 id="_3-2-列表、集合、字典解析式" tabindex="-1"><a class="header-anchor" href="#_3-2-列表、集合、字典解析式" aria-hidden="true">#</a> 3.2 列表、集合、字典解析式</h1><h2 id="列表解析式" tabindex="-1"><a class="header-anchor" href="#列表解析式" aria-hidden="true">#</a> 列表解析式</h2><p>列表解析式 List Comprehension，也叫列表推导式。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 生成一个列表，元素0~9，将每一个元素加1后的平方值组成新的列表</span>
x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 列表解析式</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>语法</p><ul><li>[返回值 for 元素 in 可迭代对象 if 条件]</li><li>使用中括号[]，内部是 for 循环，if 条件语句可选</li><li>返回一个新的列表</li></ul><p>列表解析式是一种语法糖</p><ul><li>编译器会优化，不会因为简写而影响效率，反而因优化提高了效率</li><li>减少程序员工作量，减少出错</li><li>简化了代码，增强了可读性</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">[</span>expr <span class="token keyword">for</span> item <span class="token keyword">in</span> iterable <span class="token keyword">if</span> cond1 <span class="token keyword">if</span> cond2<span class="token punctuation">]</span>
等价于
ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> iterable<span class="token punctuation">:</span>
    <span class="token keyword">if</span> cond1<span class="token punctuation">:</span>
    	<span class="token keyword">if</span> cond2<span class="token punctuation">:</span>
        	ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>expr<span class="token punctuation">)</span>
<span class="token comment">#</span>
<span class="token punctuation">[</span>expr <span class="token keyword">for</span> i <span class="token keyword">in</span> iterable1 <span class="token keyword">for</span> j <span class="token keyword">in</span> iterable2 <span class="token punctuation">]</span>
等价于
ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> iterable1<span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> iterable2<span class="token punctuation">:</span>
        ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>expr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 因为循环或判断只有一个，一斜到底，所以结果相同</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token operator">&gt;</span><span class="token number">4</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token keyword">if</span> j<span class="token operator">&gt;</span><span class="token number">23</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token operator">&gt;</span><span class="token number">4</span> <span class="token keyword">if</span> j<span class="token operator">&gt;</span><span class="token number">23</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token operator">&gt;</span><span class="token number">4</span> <span class="token keyword">and</span> j<span class="token operator">&gt;</span><span class="token number">23</span><span class="token punctuation">]</span>
<span class="token comment"># 都是[(5, 24), (6, 24)]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="集合解析式" tabindex="-1"><a class="header-anchor" href="#集合解析式" aria-hidden="true">#</a> 集合解析式</h2><p>语法</p><ul><li>{返回值 for 元素 in 可迭代对象 if 条件}</li><li>列表解析式的中括号换成大括号{}就变成了集合解析式</li><li>立即返回一个集合</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment"># 可以吗？ 不可以 list是不可hash的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字典解析式" tabindex="-1"><a class="header-anchor" href="#字典解析式" aria-hidden="true">#</a> 字典解析式</h2><p>语法</p><ul><li>{key:value for 元素 in 可迭代对象 if 条件}</li><li>列表解析式的中括号换成大括号{}，元素的构造使用 key:value 形式</li><li>立即返回一个字典</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># print({[x]:[x,x+1] for x in range(10)}) # 错误 key要求 可hash</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>y <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># 输出多少个元素？ 返回三个元素，key值唯一，{&#39;0&#39;: 3, &#39;1&#39;: 3, &#39;2&#39;: 3}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>Python2 引入列表解析式</li><li>Python2.4 引入生成器表达式</li><li>Python3 引入集合、字典解析式，并迁移到了2.7</li></ul><p>一般来说，应该多应用解析式，简短、高效。如果一个解析式非常复杂，难以读懂，要考虑拆解成for循环。</p><p>生成器和迭代器是不同的对象，但都是可迭代对象。</p><p>如果不需要立即获得所有可迭代对象的元素，在Python 3中，推荐使用惰性求值的迭代器。</p><table><thead><tr><th>内建函数</th><th>函数签名</th><th>说明</th></tr></thead><tbody><tr><td>sorted</td><td>sorted(iterable[,key][,reverse])</td><td>默认升序，对可迭代对象排序<br>立即返回列表</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 排序一定是容器内全体参与</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;ABC&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","python-analytic-expre.html.vue"]]);export{r as default};
