const e=JSON.parse('{"key":"v-4a7628de","path":"/code/shell/part5/20_3_applications.html","title":"20.3 应用程序","lang":"zh-CN","frontmatter":{"author":"LinuxStory","category":"Linux","tag":["Bash"],"description":"20.3 应用程序 使用 I/O 重定向可以同时解析和固定命令输出的片段(see 样例 15-7). 这也使得可以生成报告和日志文件. 样例 20-12. 日志记录事件 #!/bin/bash # logevents.sh # 作者: Stephane Chazelas. # 用于 ABS 许可指南. # 事件记录到文件. # 必须 root 身份执行 (可以写入 /var/log). ROOT_UID=0 # 只有 $UID 为 0 的用户具有 root 权限. E_NOTROOT=67 # 非 root 会报错. if [ \\"$UID\\" -ne \\"$ROOT_UID\\" ] then echo \\"Must be root to run this script.\\" exit $E_NOTROOT fi FD_DEBUG1=3 FD_DEBUG2=4 FD_DEBUG3=5 # === 取消下面两行注释来激活脚本. === # LOG_EVENTS=1 # LOG_VARS=1 log() # 时间和日期写入日志文件. { echo \\"$(date) $*\\" &gt;&amp;7 # *追加* 日期到文件. # ^^^^^^^ 命令替换 # 见下文. } case $LOG_LEVEL in 1) exec 3&gt;&amp;2 4&gt; /dev/null 5&gt; /dev/null;; 2) exec 3&gt;&amp;2 4&gt;&amp;2 5&gt; /dev/null;; 3) exec 3&gt;&amp;2 4&gt;&amp;2 5&gt;&amp;2;; *) exec 3&gt; /dev/null 4&gt; /dev/null 5&gt; /dev/null;; esac FD_LOGVARS=6 if [[ $LOG_VARS ]] then exec 6&gt;&gt; /var/log/vars.log else exec 6&gt; /dev/null # 清空输出. fi FD_LOGEVENTS=7 if [[ $LOG_EVENTS ]] then # exec 7 &gt;(exec gawk \'{print strftime(), $0}\' &gt;&gt; /var/log/event.log) # 上述行在最近高于 bash 2.04 版本会失败，为什么? exec 7&gt;&gt; /var/log/event.log # 追加到 \\"event.log\\". log # 写入时间和日期. else exec 7&gt; /dev/null # 清空输出. fi echo \\"DEBUG3: beginning\\" &gt;&amp;${FD_DEBUG3} ls -l &gt;&amp;5 2&gt;&amp;4 # 命令1 &gt;&amp;5 2&gt;&amp;4 echo \\"Done\\" # 命令2 echo \\"sending mail\\" &gt;&amp;${FD_LOGEVENTS} # 输出信息 \\"sending mail\\" 到文件描述符 #7. exit 0","head":[["meta",{"property":"og:url","content":"https://clay-wangzhi.com/code/shell/part5/20_3_applications.html"}],["meta",{"property":"og:site_name","content":"SRE运维进阶之路"}],["meta",{"property":"og:title","content":"20.3 应用程序"}],["meta",{"property":"og:description","content":"20.3 应用程序 使用 I/O 重定向可以同时解析和固定命令输出的片段(see 样例 15-7). 这也使得可以生成报告和日志文件. 样例 20-12. 日志记录事件 #!/bin/bash # logevents.sh # 作者: Stephane Chazelas. # 用于 ABS 许可指南. # 事件记录到文件. # 必须 root 身份执行 (可以写入 /var/log). ROOT_UID=0 # 只有 $UID 为 0 的用户具有 root 权限. E_NOTROOT=67 # 非 root 会报错. if [ \\"$UID\\" -ne \\"$ROOT_UID\\" ] then echo \\"Must be root to run this script.\\" exit $E_NOTROOT fi FD_DEBUG1=3 FD_DEBUG2=4 FD_DEBUG3=5 # === 取消下面两行注释来激活脚本. === # LOG_EVENTS=1 # LOG_VARS=1 log() # 时间和日期写入日志文件. { echo \\"$(date) $*\\" &gt;&amp;7 # *追加* 日期到文件. # ^^^^^^^ 命令替换 # 见下文. } case $LOG_LEVEL in 1) exec 3&gt;&amp;2 4&gt; /dev/null 5&gt; /dev/null;; 2) exec 3&gt;&amp;2 4&gt;&amp;2 5&gt; /dev/null;; 3) exec 3&gt;&amp;2 4&gt;&amp;2 5&gt;&amp;2;; *) exec 3&gt; /dev/null 4&gt; /dev/null 5&gt; /dev/null;; esac FD_LOGVARS=6 if [[ $LOG_VARS ]] then exec 6&gt;&gt; /var/log/vars.log else exec 6&gt; /dev/null # 清空输出. fi FD_LOGEVENTS=7 if [[ $LOG_EVENTS ]] then # exec 7 &gt;(exec gawk \'{print strftime(), $0}\' &gt;&gt; /var/log/event.log) # 上述行在最近高于 bash 2.04 版本会失败，为什么? exec 7&gt;&gt; /var/log/event.log # 追加到 \\"event.log\\". log # 写入时间和日期. else exec 7&gt; /dev/null # 清空输出. fi echo \\"DEBUG3: beginning\\" &gt;&amp;${FD_DEBUG3} ls -l &gt;&amp;5 2&gt;&amp;4 # 命令1 &gt;&amp;5 2&gt;&amp;4 echo \\"Done\\" # 命令2 echo \\"sending mail\\" &gt;&amp;${FD_LOGEVENTS} # 输出信息 \\"sending mail\\" 到文件描述符 #7. exit 0"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-19T13:08:31.000Z"}],["meta",{"property":"article:author","content":"LinuxStory"}],["meta",{"property":"article:tag","content":"Bash"}],["meta",{"property":"article:modified_time","content":"2023-04-19T13:08:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"20.3 应用程序\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-19T13:08:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LinuxStory\\"}]}"]]},"headers":[],"git":{"createdTime":1681909711000,"updatedTime":1681909711000,"contributors":[{"name":"clay-wangzhi","email":"clay.wangzhi@gmail.com","commits":1}]},"readingTime":{"minutes":1.16,"words":349},"filePathRelative":"code/shell/part5/20_3_applications.md","localizedDate":"2023年4月19日","excerpt":"<h1> 20.3 应用程序</h1>\\n<p>使用 I/O 重定向可以同时解析和固定命令输出的片段(see <a href=\\"http://tldp.org/LDP/abs/html/internal.html#READREDIR\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">样例 15-7</a>). 这也使得可以生成报告和日志文件.</p>\\n<p>样例 20-12. 日志记录事件</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>#!/bin/bash\\n# logevents.sh\\n# 作者: Stephane Chazelas.\\n# 用于 ABS 许可指南.\\n\\n# 事件记录到文件.\\n# 必须 root 身份执行 (可以写入 /var/log).\\n\\nROOT_UID=0     # 只有 $UID 为 0 的用户具有 root 权限.\\nE_NOTROOT=67   # 非 root 会报错.\\n\\n\\nif [ \\"$UID\\" -ne \\"$ROOT_UID\\" ]\\nthen\\n  echo \\"Must be root to run this script.\\"\\n  exit $E_NOTROOT\\nfi  \\n\\n\\nFD_DEBUG1=3\\nFD_DEBUG2=4\\nFD_DEBUG3=5\\n\\n# === 取消下面两行注释来激活脚本. ===\\n# LOG_EVENTS=1\\n# LOG_VARS=1\\n\\n\\nlog()  # 时间和日期写入日志文件.\\n{\\necho \\"$(date)  $*\\" &gt;&amp;7     # *追加* 日期到文件.\\n#     ^^^^^^^  命令替换\\n                           # 见下文.\\n}\\n\\n\\n\\ncase $LOG_LEVEL in\\n 1) exec 3&gt;&amp;2         4&gt; /dev/null 5&gt; /dev/null;;\\n 2) exec 3&gt;&amp;2         4&gt;&amp;2         5&gt; /dev/null;;\\n 3) exec 3&gt;&amp;2         4&gt;&amp;2         5&gt;&amp;2;;\\n *) exec 3&gt; /dev/null 4&gt; /dev/null 5&gt; /dev/null;;\\nesac\\n\\nFD_LOGVARS=6\\nif [[ $LOG_VARS ]]\\nthen exec 6&gt;&gt; /var/log/vars.log\\nelse exec 6&gt; /dev/null                     # 清空输出.\\nfi\\n\\nFD_LOGEVENTS=7\\nif [[ $LOG_EVENTS ]]\\nthen\\n  # exec 7 &gt;(exec gawk \'{print strftime(), $0}\' &gt;&gt; /var/log/event.log)\\n  # 上述行在最近高于 bash 2.04 版本会失败，为什么?\\n  exec 7&gt;&gt; /var/log/event.log              # 追加到 \\"event.log\\".\\n  log                                      # 写入时间和日期.\\nelse exec 7&gt; /dev/null                     # 清空输出.\\nfi\\n\\necho \\"DEBUG3: beginning\\" &gt;&amp;${FD_DEBUG3}\\n\\nls -l &gt;&amp;5 2&gt;&amp;4                             # 命令1 &gt;&amp;5 2&gt;&amp;4\\n\\necho \\"Done\\"                                # 命令2 \\n\\necho \\"sending mail\\" &gt;&amp;${FD_LOGEVENTS}\\n# 输出信息 \\"sending mail\\" 到文件描述符 #7.\\n\\n\\nexit 0\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"LinuxStory"},"autoDesc":true}');export{e as data};
