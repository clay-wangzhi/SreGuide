import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as p}from"./app-95912f92.js";const t={},e=p(`<h1 id="_9-2-访问控制和属性装饰器" tabindex="-1"><a class="header-anchor" href="#_9-2-访问控制和属性装饰器" aria-hidden="true">#</a> 9.2 访问控制和属性装饰器</h1><h2 id="访问控制" tabindex="-1"><a class="header-anchor" href="#访问控制" aria-hidden="true">#</a> 访问控制</h2><p><strong>私有（Private） 成员</strong></p><p>在 Python 中，在类变量或实例变量前使用两个下划线的变量，称为私有成员，包括私有属性、私有方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span>
        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> age

    <span class="token keyword">def</span> <span class="token function">__showage</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__age<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>__name<span class="token punctuation">)</span>  <span class="token comment"># 都不可以调用</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>__showage<span class="token punctuation">)</span>
tom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>__name<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>__showage<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在类的定义范围内，使用前置双下划线的标识符，在类外部不能直接访问。</p><p><strong>私有成员本质</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> age

    <span class="token keyword">def</span> <span class="token function">__showage</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__age<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
tom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
<span class="token comment"># 结果如下</span>
<span class="token punctuation">{</span><span class="token string">&#39;__module__&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;__init__&#39;</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>function Person<span class="token punctuation">.</span>__init__ at <span class="token number">0x0000029B2B86BB80</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token string">&#39;_Person__showage&#39;</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>function Person<span class="token punctuation">.</span>__showage at <span class="token number">0x0000029B2B86BC10</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token string">&#39;__dict__&#39;</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>attribute <span class="token string">&#39;__dict__&#39;</span> of <span class="token string">&#39;Person&#39;</span> objects<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token string">&#39;__weakref__&#39;</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>attribute <span class="token string">&#39;__weakref__&#39;</span> of <span class="token string">&#39;Person&#39;</span> objects<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token string">&#39;__doc__&#39;</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&#39;_Person__name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_Person__age&#39;</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开类字典和实例字典，一目了然，都被悄悄的改了名称，所以使用定义的名字就访问不了了。</p><p>名称都被前置了<code>_类名</code>前缀。</p><p>如果知道了改后的名称，照样可以访问，就绕过了Python做的限制。</p><blockquote><p>Python就没有真正的私有成员！但是请遵守这个约定，不要在类外面访问类私有或者实例的私有成员。因为类的作用就是封装，私有成员就是要被隐藏的数据或方法。</p></blockquote><p><strong>保护成员</strong></p><p>在类变量或实例变量前使用一个下划线的变量，称为保护成员。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>_age <span class="token operator">=</span> age

    <span class="token keyword">def</span> <span class="token function">_showage</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_age<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
tom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
tom<span class="token punctuation">.</span>_showage<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>_name<span class="token punctuation">,</span> tom<span class="token punctuation">.</span>_age<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保护成员不是 Python 中定义的，是 Python 编程者自我约定俗称的，请遵守这个约定。</p><p><strong>总结</strong></p><p>在 Python 中使用 _单下划线或者__双下划线来表示一个成员被保护或者私有化隐藏起来。</p><p>但是，不管使用什么样的访问控制，都不能真正的阻止用户修改类的成员。Python 中没有绝对的安全的保护成员或者私有成员。</p><p>因此，前导的下划线只是一种警告或者提醒，请遵守这个约定。</p><p>在 Pycharm 中，已经对访问私有、保护成员访问的时候不会直接提示，就是一种善意的提醒。</p><h2 id="属性装饰器" tabindex="-1"><a class="header-anchor" href="#属性装饰器" aria-hidden="true">#</a> 属性装饰器</h2><p>一般好的设计是：把实例的某些属性保护起来，不让外部直接访问，外部使用 getter 读取属性和 setter 方法设置属性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_name <span class="token operator">=</span> name

    <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_name

    <span class="token keyword">def</span> <span class="token function">set_name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_name <span class="token operator">=</span> value

tom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
tom<span class="token punctuation">.</span>set_name<span class="token punctuation">(</span><span class="token string">&#39;Jerry&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 提供了 property 装饰器，简化调用。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_name <span class="token operator">=</span> name

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_name

    <span class="token decorator annotation punctuation">@name<span class="token punctuation">.</span>setter</span>
    <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_name <span class="token operator">=</span> value

    <span class="token decorator annotation punctuation">@name<span class="token punctuation">.</span>deleter</span>
    <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;del name&#39;</span><span class="token punctuation">)</span>

tom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
tom<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Jerry&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token keyword">del</span> tom<span class="token punctuation">.</span>name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特别注意：使用 property 装饰器的时候这三个方法同名</p><p>property 装饰器</p><ul><li>后面跟的函数名就是以后的属性名。它就是getter。这个必须有，有了它至少是只读属性</li><li>setter 装饰器 <ul><li>与属性名同名，且接收2个参数，第一个是 self， 第二个是将要赋值的值。有了它，属性可写</li></ul></li><li>deleter 装饰器 <ul><li>可以控制是否删除属性。很少用</li></ul></li><li>property 装饰器必须在前，setter、deleter 装饰器在后</li><li>property 装饰器能通过简单的方式，把对方法的操作编程对属性的访问，并起到了一定隐藏效果</li></ul><p>其他方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_name <span class="token operator">=</span> name

    <span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_name

    <span class="token keyword">def</span> <span class="token function">set_name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_name <span class="token operator">=</span> value

    <span class="token keyword">def</span> <span class="token function">del_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># del self._name</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;del name&#39;</span><span class="token punctuation">)</span>

    name <span class="token operator">=</span> <span class="token builtin">property</span><span class="token punctuation">(</span>get_name<span class="token punctuation">,</span> set_name<span class="token punctuation">,</span> del_name<span class="token punctuation">)</span>

tom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
tom<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Jerry&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token keyword">del</span> tom<span class="token punctuation">.</span>name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种定义方式，适合 get_name、set_name、del_name 还可以单独使用，即可以当方法使用。</p>`,32),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","access-control.html.vue"]]);export{k as default};
