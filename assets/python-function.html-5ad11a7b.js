import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e}from"./app-970b2c74.js";const l={},i=e(`<h1 id="_4-1-函数的定义-调用-返回值" tabindex="-1"><a class="header-anchor" href="#_4-1-函数的定义-调用-返回值" aria-hidden="true">#</a> 4.1 函数的定义 &amp; 调用 &amp; 返回值</h1><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><p>数学定义</p><ul><li>y=f(x) ，y是x的函数，x是自变量。y=f(x0, x1, ..., xn)</li></ul><p>Python函数</p><ul><li>由若干语句组成的语句块、函数名称、参数列表构成，它是组织代码的最小单元</li><li>完成一定的功能</li></ul><p>函数的作用</p><ul><li>结构化编程对代码的最基本的封装，一般按照功能组织一段代码</li><li>封装的目的为了复用，减少冗余代码</li><li>代码更加简洁美观、可读易懂</li></ul><p>函数的分类</p><ul><li>内建函数，如max()、reversed()等</li><li>库函数，如math.ceil()等</li><li>自定义函数，使用def关键字定义</li></ul><h2 id="函数定义" tabindex="-1"><a class="header-anchor" href="#函数定义" aria-hidden="true">#</a> 函数定义</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">:</span>
	函数体（代码块）
	<span class="token punctuation">[</span><span class="token keyword">return</span> 返回值<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数名就是标识符，命名要求一样</li><li>语句块必须缩进，约定4个空格</li><li>Python的函数若没有return语句，会隐式返回一个None值</li><li>定义中的参数列表称为形式参数，只是一种符号表达（标识符），简称形参</li></ul><h2 id="函数调用" tabindex="-1"><a class="header-anchor" href="#函数调用" aria-hidden="true">#</a> 函数调用</h2><ul><li>函数定义，只是声明了一个函数，它不能被执行，需要调用执行</li><li>调用的方式，就是函数名后加上小括号，如有必要在括号内填写上参数</li><li>调用时写的参数是实际参数，是实实在在传入的值，简称实参</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 函数定义</span>
	result <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token comment"># 函数体</span>
	<span class="token keyword">return</span> result <span class="token comment"># 返回值</span>

out <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># 函数调用，可能有返回值，使用变量接收这个返回值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span> <span class="token comment"># print函数加上括号也是调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码解释：</p><ul><li>定义一个函数add，及函数名是add，能接受2个参数</li><li>该函数计算的结果，通过返回值返回，需要return语句</li><li>调用时，通过函数名add后加2个参数，返回值可使用变量接收</li><li>函数名也是标识符</li><li>返回值也是值</li><li>定义需要在调用前，也就是说调用时，已经被定义过了，否则抛NameError异常</li><li>函数是可调用的对象，callable(add)返回True</li></ul><h2 id="函数返回值" tabindex="-1"><a class="header-anchor" href="#函数返回值" aria-hidden="true">#</a> 函数返回值</h2><ul><li><p>Python 函数使用 return 语句返回“返回值”</p></li><li><p>所有函数都有返回值，如果没有return语句，隐式调用return None</p></li><li><p>return 语句并不一定是函数的语句块的最后一条语句</p></li><li><p>一个函数可以存在多个return语句，但是只有一条可以被执行。如果没有一条return语句被执行到，隐式调用return None</p></li><li><p>如果有必要，可以显示调用return None，可以简写为return</p></li><li><p>如果函数执行了return语句，函数就会返回，当前被执行的return语句之后的其它语句就不会被执行了</p></li><li><p>返回值的作用：结束函数调用、返回“返回值”</p></li><li><p>函数不能同时返回多个值</p></li><li><p>return 1, 3, 5 看似返回多个值，隐式的被python封装成了一个元组</p></li><li><p>x, y, z = showlist() 使用解构提取返回值更为方便</p></li></ul>`,20),t=[i];function p(r,o){return a(),s("div",null,t)}const d=n(l,[["render",p],["__file","python-function.html.vue"]]);export{d as default};
