const n=JSON.parse(`{"key":"v-0786bde2","path":"/code/python/python-oo-inher-pol.html","title":"9.3 继承、多态和Mixin","lang":"zh-CN","frontmatter":{"category":"Python","description":"9.3 继承、多态和Mixin 继承基本概念 面向对象三要素之一，继承 Inheritance 人类和猫类都继承自动物类。 个体继承自父母，继承了父母的一部分特征，但也可以有自己的个性。 在面向对象的世界中，从父类继承，就可以直接拥有父类的属性和方法，这样可减少代码冗余、多复用。子类也可以定义自己的属性和方法。 看一个不用继承的例子 class Animal: def shout(self): print('Animal shouts') a = Animal() a.shout() class Cat: def shout(self): print('Cat shouts') c = Cat() c.shout()","head":[["meta",{"property":"og:url","content":"https://clay-wangzhi.com/code/python/python-oo-inher-pol.html"}],["meta",{"property":"og:site_name","content":"SRE运维进阶之路"}],["meta",{"property":"og:title","content":"9.3 继承、多态和Mixin"}],["meta",{"property":"og:description","content":"9.3 继承、多态和Mixin 继承基本概念 面向对象三要素之一，继承 Inheritance 人类和猫类都继承自动物类。 个体继承自父母，继承了父母的一部分特征，但也可以有自己的个性。 在面向对象的世界中，从父类继承，就可以直接拥有父类的属性和方法，这样可减少代码冗余、多复用。子类也可以定义自己的属性和方法。 看一个不用继承的例子 class Animal: def shout(self): print('Animal shouts') a = Animal() a.shout() class Cat: def shout(self): print('Cat shouts') c = Cat() c.shout()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-19T13:08:31.000Z"}],["meta",{"property":"article:author","content":"Clay"}],["meta",{"property":"article:modified_time","content":"2023-04-19T13:08:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9.3 继承、多态和Mixin\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-19T13:08:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Clay\\",\\"url\\":\\"https://clay-wangzhi.com\\"}]}"]]},"headers":[{"level":2,"title":"继承基本概念","slug":"继承基本概念","link":"#继承基本概念","children":[]},{"level":2,"title":"类继承的定义","slug":"类继承的定义","link":"#类继承的定义","children":[]},{"level":2,"title":"Python 不通版本的类","slug":"python-不通版本的类","link":"#python-不通版本的类","children":[]},{"level":2,"title":"继承中的访问控制","slug":"继承中的访问控制","link":"#继承中的访问控制","children":[]},{"level":2,"title":"方法的重写、覆盖override","slug":"方法的重写、覆盖override","link":"#方法的重写、覆盖override","children":[]},{"level":2,"title":"继承时使用初始化","slug":"继承时使用初始化","link":"#继承时使用初始化","children":[]},{"level":2,"title":"单继承","slug":"单继承","link":"#单继承","children":[]},{"level":2,"title":"多态","slug":"多态","link":"#多态","children":[]},{"level":2,"title":"多继承","slug":"多继承","link":"#多继承","children":[{"level":3,"title":"多继承弊端","slug":"多继承弊端","link":"#多继承弊端","children":[]},{"level":3,"title":"Python多继承实现","slug":"python多继承实现","link":"#python多继承实现","children":[]},{"level":3,"title":"多继承的缺点","slug":"多继承的缺点","link":"#多继承的缺点","children":[]}]},{"level":2,"title":"Mixin","slug":"mixin","link":"#mixin","children":[]}],"git":{"createdTime":1681909711000,"updatedTime":1681909711000,"contributors":[{"name":"clay-wangzhi","email":"clay.wangzhi@gmail.com","commits":1}]},"readingTime":{"minutes":11.85,"words":3554},"filePathRelative":"code/python/python-oo-inher-pol.md","localizedDate":"2023年4月19日","excerpt":"<h1> 9.3 继承、多态和Mixin</h1>\\n<h2> 继承基本概念</h2>\\n<p>面向对象三要素之一，继承 Inheritance</p>\\n<p>人类和猫类都继承自动物类。\\n个体继承自父母，继承了父母的一部分特征，但也可以有自己的个性。\\n在面向对象的世界中，从父类继承，就可以直接拥有父类的属性和方法，这样可减少代码冗余、多复用。子类也可以定义自己的属性和方法。</p>\\n<p>看一个不用继承的例子</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Animal</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">shout</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Animal shouts'</span><span class=\\"token punctuation\\">)</span>\\n\\na <span class=\\"token operator\\">=</span> Animal<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\na<span class=\\"token punctuation\\">.</span>shout<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Cat</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">shout</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Cat shouts'</span><span class=\\"token punctuation\\">)</span>\\n\\nc <span class=\\"token operator\\">=</span> Cat<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\nc<span class=\\"token punctuation\\">.</span>shout<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"Clay"},"autoDesc":true}`);export{n as data};
