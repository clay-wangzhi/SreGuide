import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-fb0a644a.js";const p={},e=t(`<h1 id="_7-1-操作文件和目录" tabindex="-1"><a class="header-anchor" href="#_7-1-操作文件和目录" aria-hidden="true">#</a> 7.1 操作文件和目录</h1><h2 id="文件io操作" tabindex="-1"><a class="header-anchor" href="#文件io操作" aria-hidden="true">#</a> 文件IO操作</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><strong>open</strong></td><td>打开</td></tr><tr><td><strong>read</strong></td><td>读取</td></tr><tr><td><strong>write</strong></td><td>写入</td></tr><tr><td><strong>close</strong></td><td>关闭</td></tr><tr><td>readline</td><td>行读取</td></tr><tr><td>readlines</td><td>多行读取</td></tr></tbody></table><h3 id="open-方法" tabindex="-1"><a class="header-anchor" href="#open-方法" aria-hidden="true">#</a> open 方法</h3><p><code>open(file, mode=&#39;r&#39;, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</code></p><p>打开一个文件，返回一个文件对象(流对象)和文件描述符。打开文件失败，则返回异常</p><p>基本使用：创建一个文件test，然后打开它，用完<strong>关闭</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token comment"># file对象</span>
<span class="token comment"># windows &lt;_io.TextIOWrapper name=&#39;test&#39; mode=&#39;r&#39; encoding=&#39;cp936&#39;&gt;</span>
<span class="token comment"># linux &lt;_io.TextIOWrapper name=&#39;test&#39; mode=&#39;r&#39; encoding=&#39;UTF-8&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 读取文件</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 关闭文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件操作中，最常用的操作就是读和写。</p><p>文件访问的模式有两种：文本模式和二进制模式。不同模式下，操作函数不尽相同，表现的结果也不一样。</p><blockquote><p>注：windows中使用codepage代码页，可以认为每一个代码页就是一张编码表。cp936等同于GBK。</p></blockquote><h3 id="open-参数" tabindex="-1"><a class="header-anchor" href="#open-参数" aria-hidden="true">#</a> open 参数</h3><p><strong>file</strong></p><p>打开或者要创建的文件名。如果不指定路径，默认是当前路径</p><p><strong>mode 模式</strong></p><table><thead><tr><th>模式描述字符</th><th>意义</th></tr></thead><tbody><tr><td>r</td><td>缺省模式，只读打开</td></tr><tr><td>w</td><td>只写打开</td></tr><tr><td>x</td><td>创建并写入一个新文件</td></tr><tr><td>a</td><td>只写打开，追加内容</td></tr><tr><td>b</td><td>二进制模式</td></tr><tr><td>t</td><td>缺省模式，文本模式</td></tr><tr><td>+</td><td>读或写打开后，使用+来增加缺失的写或读的能力</td></tr></tbody></table><p>模式对于IO操作来说，其实只有读和写两种：</p><ul><li>只读 r</li><li>只写 w、x、a</li><li>增加缺失能力 +</li></ul><p>r 模式</p><ul><li>只读打开文件，如果使用write方法，会抛异常</li><li>如果文件不存在，抛出FileNotFoundError异常</li></ul><p>w 模式</p><ul><li>表示只写方式打开，如果读取则抛出异常</li><li>如果文件不存在，则直接创建文件</li><li>如果文件存在，则清空文件内容</li></ul><p>x 模式</p><ul><li>文件不存在，创建文件，并只写方式打开</li><li>文件存在，抛出 FileExistsError 异常</li></ul><p>a 模式</p><ul><li>文件存在，只写打开，追加内容</li><li>文件不存在，则创建后，只写打开，追加内容</li></ul><p>wxa 模式都可以产生新文件</p><ul><li>w 不管文件存在与否，都会生成全新内容的文件</li><li>a 不管文件是否存在，都能在打开的文件尾部追加</li><li>x 必须要求文件事先不存在，自己要造一个新文件</li></ul><p>文本模式 t</p><ul><li>字符流，将文件的字节按照某种字符编码理解，按照字符操作。open 的默认 mode 就是rt。</li></ul><p>二进制模式 b</p><ul><li>字节流，将文件就按照字节理解，与字符编码无关。二进制模式操作时，字节操作使用bytes类型</li></ul><p>+ 模式</p><ul><li>为r、w、a、x提供缺失的读或写功能，但是，获取文件对象依旧按照r、w、a、x自己的特征。</li><li>+模式不能单独使用，可以认为它是为前面的模式字符做增强功能的。</li></ul><p><strong>encoding：编码，仅文本模式使用</strong></p><p>None 表示使用缺省编码，依赖操作系统。windows、linux下测试如下代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;啊&#39;</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>windows 下缺省 GBK（0xB0A1），Linux 下缺省 UTF-8（0xE5 95 8A）</p><p><strong>文件指针</strong></p><p>mode=r，指针起始在0</p><p>mode=a，指针起始在EOF</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb+&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b&#39;abc&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rt+&#39;</span><span class="token punctuation">)</span> <span class="token comment"># windows下打开</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;啊&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 从什么地方开始写几个字节？</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;啊&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;啊&#39;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;啊&#39;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;gbk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="read" tabindex="-1"><a class="header-anchor" href="#read" aria-hidden="true">#</a> read</h3><p>read(size=-1)</p><ul><li>size 表示读取的多少个字符或字节；负数或者 None 表示读取到 EOF</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>filename <span class="token operator">=</span> <span class="token string">&#39;test.txt&#39;</span>
f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&#39;w+&#39;</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;百度站长&#39;</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 按字符</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 按字节</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;百度站长&#39;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;gbk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建议，使用文件对象时，一定要指定编码，而不是使用默认编码</p><h3 id="write" tabindex="-1"><a class="header-anchor" href="#write" aria-hidden="true">#</a> write</h3><ul><li>write(s)，文本模式时，从当前指针处把字符串 s 写入到文件中并返回写入字符的个数；二进制时将 bytes写入文件并返回写入字节数</li><li>writelines(lines)，将字符串列表写入文件</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>filename <span class="token operator">=</span> <span class="token string">&#39;test.txt&#39;</span>
f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&#39;w+&#39;</span><span class="token punctuation">)</span>
lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123\\n&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baidu&#39;</span><span class="token punctuation">]</span> <span class="token comment"># 需提供换行符</span>
<span class="token comment"># for line in lines:</span>
<span class="token comment"># f.write(line)</span>
f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>lines<span class="token punctuation">)</span>
f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 回到开始</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>close</strong></p><p>flush并关闭文件对象。文件已经关闭，再次关闭没有任何效果。可以查看文件对象的closed属性，判断是否关闭</p><h2 id="上下文管理" tabindex="-1"><a class="header-anchor" href="#上下文管理" aria-hidden="true">#</a> 上下文管理</h2><p>文件对象这种打开资源并一定要关闭的对象，为了保证其打开后一定关闭，为其提供了上下文支持。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>filename <span class="token operator">=</span> <span class="token string">&#39;test.txt&#39;</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>closed<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># r模式写入失败，抛异常</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>closed<span class="token punctuation">)</span> <span class="token comment"># with中不管是否抛异常，with结束时都会保证关闭文件对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> 文件对象 <span class="token keyword">as</span> 标识符<span class="token punctuation">:</span> <span class="token comment"># 等同于 标识符 = 文件对象</span>
    <span class="token keyword">pass</span> <span class="token comment"># 标识符可以在内部使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上下文管理</p><ol><li>使用with关键字，上下文管理针对的是with后的对象</li><li>使用with ... as 关键字</li><li>上下文管理的语句块并不会开启新的作用域</li></ol><p>文件对象上下文管理</p><ol><li>进入with 时，with 后的文件对象是被管理对象</li><li>as 子句后的标识符，指向 with 后的文件对象</li><li>with 语句块执行完的时候，会自动关闭文件对象</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>filename <span class="token operator">=</span> <span class="token string">&#39;test.txt&#39;</span>
f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
<span class="token keyword">with</span> f <span class="token keyword">as</span> f2<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f <span class="token keyword">is</span> f2<span class="token punctuation">)</span> <span class="token comment"># True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>文件的遍历</strong></p><p>类似于日志文件，文件需要遍历，最常用的方式就是逐行遍历。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>filename <span class="token operator">=</span> <span class="token string">&#39;test.txt&#39;</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span> <span class="token comment"># 文件对象时可迭代对象，逐行遍历</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 带换行符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路径操作" tabindex="-1"><a class="header-anchor" href="#路径操作" aria-hidden="true">#</a> 路径操作</h2><h3 id="os-path-模块" tabindex="-1"><a class="header-anchor" href="#os-path-模块" aria-hidden="true">#</a> os.path 模块</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># os模块常用函数</span>
<span class="token keyword">from</span> os <span class="token keyword">import</span> path

p <span class="token operator">=</span> path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">&#39;/etc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sysconfig&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;network&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 拼接</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 存在</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 分割</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 路径和基名</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 绝对路径</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>splitdrive<span class="token punctuation">(</span><span class="token string">&#39;o:/temp/test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># windows方法</span>

<span class="token comment"># 打印父目录</span>
p1 <span class="token operator">=</span> path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>
<span class="token keyword">while</span> p1 <span class="token operator">!=</span> path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p1 <span class="token operator">=</span> path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>os.path模块操作的都是字符串。</p><h3 id="path-类" tabindex="-1"><a class="header-anchor" href="#path-类" aria-hidden="true">#</a> Path 类</h3><p>从3.4开始Python提供了pathlib模块，使用Path类操作目录更加方便。</p><p><strong>初始化</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path

p <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 当前目录， Path()、Path(&#39;.&#39;)、Path(&#39;&#39;)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
p <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c/d&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 当前目录下的a/b/c/d</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
p <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">&#39;/etc&#39;</span><span class="token punctuation">,</span> Path<span class="token punctuation">(</span><span class="token string">&#39;sysconfig&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;network/ifcfg&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 根下的etc目录</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>拼接</strong></p><p><em>操作符 /</em></p><ul><li>Path对象 / Path对象</li><li>Path对象 / 字符串</li><li>字符串 / Path对象</li></ul><p>joinpath</p><ul><li>joinpath(*other) 在当前Path路径上连接多个字符串返回新路径对象</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path

p <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token punctuation">)</span>
p <span class="token operator">=</span> p <span class="token operator">/</span> <span class="token string">&#39;a&#39;</span>
p1 <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">/</span> p
p2 <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>
p3 <span class="token operator">=</span> p2 <span class="token operator">/</span> p1
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>parts<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e/f&#39;</span><span class="token punctuation">,</span> Path<span class="token punctuation">(</span><span class="token string">&#39;g/h&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>分解</strong></p><p>parts属性，会返回目录各部分的元组</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>p <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">&#39;/a/b/c/d&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>parts<span class="token punctuation">)</span> <span class="token comment"># 最左边的/是根目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>父目录</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path
p <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">&#39;/clay/mysql/install/mysql.tar.gz&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>parent<span class="token punctuation">)</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> p<span class="token punctuation">.</span>parents<span class="token punctuation">:</span> <span class="token comment"># 可迭代对象</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>目录组成部分</strong></p><p>name、stem、suffix、suffixes、with_suffix(suffix)、with_name(name)</p><ul><li>name 目录的最后一个部分</li><li>suffix 目录中最后一个部分的扩展名</li><li>stem 目录最后一个部分，没有后缀</li><li>name = stem + suffix</li></ul><p>suffixes 返回多个扩展名列表</p><ul><li>with_suffix(suffix) 有扩展名则替换，无则补充扩展名</li><li>with_name(name) 替换目录最后一个部分并返回一个新的路径</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path

p <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">&#39;/clay/mysql/install/mysql.tar.gz&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>parent<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>stem<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>suffix<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>suffixes<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>with_name<span class="token punctuation">(</span><span class="token string">&#39;redis&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>with_name<span class="token punctuation">(</span><span class="token string">&#39;redis&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>with_suffix<span class="token punctuation">(</span><span class="token string">&#39;.zip&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>全局方法</strong></p><ul><li>cwd() 返回当前工作目录</li><li>home() 返回当前家目录</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path

p <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">&#39;/clay/mysql/install/mysql.tar.gz&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>home<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Path<span class="token punctuation">.</span>home<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>判断方法</strong></p><ul><li>exists() 目录或文件是否存在</li><li>is_dir() 是否是目录，目录存在返回True</li><li>is_file() 是否是普通文件，文件存在返回True</li><li>is_symlink() 是否是软链接</li><li>is_socket() 是否是socket文件</li><li>is_block_device() 是否是块设备</li><li>is_char_device() 是否是字符设备</li><li>is_absolute() 是否是绝对路径</li></ul><blockquote><p>注意：文件只有存在，才能知道它是什么类型文件</p></blockquote><p><strong>绝对路径</strong></p><ul><li>resolve() 非Windows，返回一个新的路径，这个新路径就是当前Path对象的绝对路径，如果是软链接则直接被解析。</li><li>absolute() 获取绝对路径。</li></ul><p><strong>通配符</strong></p><ul><li>glob(pattern) 通配给定的模式，返回生成器对象</li><li>rglob(pattern) 通配给定的模式，递归目录，返回生成器对象</li><li>? 代表一个字符</li><li>* 表示任意个字符</li><li>[abc]或[a-z] 表示一个字符</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">list</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">&#39;test*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 返回当前目录对象下的test开头的文件</span>
<span class="token builtin">list</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">&#39;**/*.py&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 递归所有目录，等同rglob</span>
<span class="token builtin">list</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">&#39;**/*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

g <span class="token operator">=</span> p<span class="token punctuation">.</span>rglob<span class="token punctuation">(</span><span class="token string">&#39;*.py&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 生成器，递归</span>
<span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>
<span class="token builtin">list</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>rglob<span class="token punctuation">(</span><span class="token string">&#39;*.???&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 匹配扩展名为3个字符的文件</span>
<span class="token builtin">list</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>rglob<span class="token punctuation">(</span><span class="token string">&#39;[a-z]*.???&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 匹配字母开头的且扩展名是3个字符的文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>其他操作</strong></p><ul><li><p>rmdir() 删除空目录。没有提供判断目录为空的方法</p></li><li><p>touch(mode=0o666, exist_ok=True) 创建一个文件</p></li><li><p>as_uri() 将路径返回成URI，例如&#39;file:///etc/passwd&#39;</p></li><li><p>mkdir(mode=0o777, parents=False, exist_ok=False)</p><p>parents，是否创建父目录，True等同于mkdir -p。False时，父目录不存在，则抛出 FileNotFoundError exist_ok参数，在3.5版本加入。False时，路径存在，抛出FileExistsError；True时， FileExistsError被忽略</p></li><li><p>iterdir() 迭代当前目录，不递归</p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path

p <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">&#39;o:/a/b/c/d&#39;</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span>p <span class="token operator">/</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>touch<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> p<span class="token punctuation">.</span>parents<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>parents<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iterdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 不支持负索引</span>
	<span class="token keyword">if</span> x<span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;dir =&#39;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
	<span class="token keyword">elif</span> x<span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;file =&#39;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
	<span class="token keyword">else</span><span class="token punctuation">:</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;other =&#39;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>stat 相当于stat命令</li><li>lstat 使用方法同stat()，但如果是符号链接，则显示符号链接本身的文件信息</li></ul><h2 id="shutil-模块" tabindex="-1"><a class="header-anchor" href="#shutil-模块" aria-hidden="true">#</a> shutil 模块</h2><p>文件拷贝：使用打开2个文件对象，源文件读取内容，写入目标文件中来完成拷贝过程。但是这样丢失 stat 数据信息（权限等），因为根本没有复制这些信息过去。</p><p>目录复制又怎么办呢？</p><p>Python 提供了一个方便的库 shutil（高级文件操作）。</p><h3 id="copy-复制" tabindex="-1"><a class="header-anchor" href="#copy-复制" aria-hidden="true">#</a> copy 复制</h3><p><code>copyfileobj(fsrc, fdst[, length])</code> 文件对象的复制，fsrc和fdst是open打开的文件对象，复制内容。fdst要求可写。 length 指定了表示buffer的大小；</p><p><code>copyfile(src, dst, *, follow_symlinks=True)</code> 复制文件内容，不含元数据。src、dst为文件的路径字符串 本质上调用的就是copyfileobj，所以不带元数据二进制内容复制。</p><p><code>copymode(src, dst, *, follow_symlinks=True)</code> 仅仅复制权限。</p><p><code>copystat(src, dst, *, follow_symlinks=True)</code> 复制元数据，stat包含权限</p><p><code>copy(src, dst, *, follow_symlinks=True)</code> 复制文件内容、权限和部分元数据，不包括创建时间和修改时间。</p><p>本质上调用的是 <code>copyfile(src, dst, follow_symlinks=follow_symlinks)</code><code>copymode(src, dst, follow_symlinks=follow_symlinks)</code></p><p><code>copy2</code> 比copy多了复制全部元数据，但需要平台支持。 本质上调用的是 <code>copyfile(src, dst, follow_symlinks=follow_symlinks)</code><code>copystat(src, dst, follow_symlinks=follow_symlinks)</code></p><p><code>copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,ignore_dangling_symlinks=False)</code><strong>递归复制</strong>目录。默认使用copy2，也就是带更多的元数据复制。 src、dst必须是目录，src必须存在，dst必须<strong>不存在</strong> ignore = func ，提供一个 callable(src, names) -&gt; ignored_names。提供一个函数，它会被调用。src是源目录，names 是 os.listdir(src) 的结果，就是列出 src 中的文件名，返回值是要被过滤的文件名的 set类型数据。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">ignore</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> names<span class="token punctuation">)</span><span class="token punctuation">:</span>
	ig <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> names<span class="token punctuation">)</span> <span class="token comment"># 忽略a开头的</span>
	<span class="token keyword">return</span> <span class="token builtin">set</span><span class="token punctuation">(</span>ig<span class="token punctuation">)</span>

shutil<span class="token punctuation">.</span>copytree<span class="token punctuation">(</span><span class="token string">&#39;o:/temp&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;o:/tt/o&#39;</span><span class="token punctuation">,</span>ignore<span class="token operator">=</span>ignore<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rm-删除" tabindex="-1"><a class="header-anchor" href="#rm-删除" aria-hidden="true">#</a> rm 删除</h3><p><code>shutil.rmtree(path, ignore_errors=False, onerror=None)</code></p><p>递归删除。如同 rm -rf 一样危险，慎用。</p><p>它不是原子操作，有可能删除错误，就会中断，已经删除的就删除了。</p><p>ignore_errors为true，忽略错误。当为False或者omitted时onerror生效。</p><p>onerror为callable，接受函数function、path和execinfo。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span><span class="token string">&#39;O:/tmp&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 类似 rm -rf</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="move-移动" tabindex="-1"><a class="header-anchor" href="#move-移动" aria-hidden="true">#</a> move 移动</h3><p><code>move(src, dst, copy_function=copy2)</code></p><p>递归移动文件、目录到目标，返回目标。</p><p>本身使用的是 os.rename方法。</p><p>如果不支持rename，如果是目录则copytree再删除源目录。</p><p>默认使用copy2方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">&#39;o:/a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;o:/aaa&#39;</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">&#39;o:/t.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;o:/temp/t&#39;</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">&#39;test3&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/tmp/py/test300&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>shutil还有打包功能。生成tar并压缩。支持zip、gz、bz、xz。</p>`,133),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","python-dir-file-pro.html.vue"]]);export{k as default};
