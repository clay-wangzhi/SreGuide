import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as p}from"./app-f536079c.js";const t={},e=p(`<h1 id="_2-3-4-列表-list-元组-tuple" tabindex="-1"><a class="header-anchor" href="#_2-3-4-列表-list-元组-tuple" aria-hidden="true">#</a> 2.3.4 列表 list &amp; 元组 tuple</h1><h2 id="列表-list" tabindex="-1"><a class="header-anchor" href="#列表-list" aria-hidden="true">#</a> 列表 list</h2><ul><li>一个排列整齐的队伍，Python采用顺序表实现</li><li>列表内的个体称作元素，由若干元素组成列表</li><li>元素可以是任意对象（数字、字符串、对象、列表等）</li><li>列表内元素有顺序，可以使用索引</li><li>线性的数据结构</li><li>使用 [ ] 表示</li><li>列表是可变的</li></ul><p>列表是非常重要的数据结构，对其内存结构和操作方法必须烂熟于心。</p><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><ul><li>list() -&gt; new empty list</li><li>list(iterable) -&gt; new list initialized from iterable&#39;s items</li><li>[]</li><li>列表不能一开始就定义大小</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>ls1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
ls2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
ls3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;ab&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># 列表是一个容器，元素可以是其它类型</span>
ls4 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 非常常用的构造方式，将一个可迭代对象转换为一个列表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h3><ul><li>索引，也叫下标</li><li>正索引：从左至右，从0开始，为列表中每一个元素编号 <ul><li>如果列表有元素，索引范围[0, 长度-1]</li></ul></li><li>负索引：从右至左，从-1开始 <ul><li>如果列表有元素，索引范围[-长度, -1]</li></ul></li><li>正、负索引不可以超界，否则引发异常IndexError</li><li>为了理解方便，可以认为列表是从左至右排列的，左边是头部，右边是尾部，左边是下界，右边是 上界</li><li>列表通过索引访问，list[index] ，index就是索引，使用中括号访问</li></ul><p>使用索引定位访问元素的时间复杂度为O(1)，这是最快的方式，是列表最好的使用方式。</p><h3 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> 查询</h3><ul><li>index(value,[start,[stop]]) <ul><li>通过值value，从指定区间查找列表内的元素是否匹配</li><li>匹配第一个就立即返回索引</li><li>匹配不到，抛出异常ValueError</li></ul></li><li>count(value) <ul><li>返回列表中匹配value的次数</li></ul></li><li>时间复杂度 <ul><li>index和count方法都是O(n)</li><li>随着列表数据规模的增大，而效率下降</li></ul></li><li>len() 列表的长度</li></ul><h3 id="修改" tabindex="-1"><a class="header-anchor" href="#修改" aria-hidden="true">#</a> 修改</h3><p>索引定位元素，然后修改。注意索引不能超界</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>ls1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
ls1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="增加单个元素" tabindex="-1"><a class="header-anchor" href="#增加单个元素" aria-hidden="true">#</a> 增加单个元素</h3><ul><li>append(object) -&gt; None <ul><li>列表尾部追加元素，返回None</li><li>返回None就意味着没有新的列表产生，就地修改</li><li>定位时间复杂度是O(1)</li></ul></li><li>insert(index, object) -&gt; None <ul><li>在指定的索引index处插入元素object</li><li>返回None就意味着没有新的列表产生，就地修改</li><li>定位时间复杂度是O(1)</li></ul></li><li>索引能超上下界吗？ <ul><li>超越上界，尾部追加</li><li>超越下界，头部追加</li></ul></li></ul><h3 id="增加多个元素" tabindex="-1"><a class="header-anchor" href="#增加多个元素" aria-hidden="true">#</a> 增加多个元素</h3><ul><li><p>extend(iteratable) -&gt; None</p><ul><li>将可迭代对象的元素追加进来，返回None</li><li>就地修改，本列表自身扩展</li></ul></li><li><p>+ -&gt; list</p><ul><li>连接操作，将两个列表连接起来，产生新的列表，原列表不变</li><li>本质上调用的是魔术方法__add__()方法</li></ul></li><li><p>* -&gt; list</p><ul><li>重复操作，将本列表元素重复n次，返回新的列表</li></ul></li></ul><p>在Python中一切皆对象，而对象都是引用类型，可以理解为一个地址指针指向这个对象。</p><p>但是，字面常量字符串、数值等表现却不像引用类型，暂时可以称为简单类型。</p><p>而列表、元组、字典，包括以后学习的类和实例都可以认为是引用类型。</p><p>你可以认为简单类型直接存在列表中，而引入类型只是把引用地址存在了列表中。</p><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h3><ul><li>remove(value) -&gt; None <ul><li>从左至右查找第一个匹配value的值，找到就移除该元素，并返回None，否则ValueError</li><li>就地修改</li></ul></li><li>pop([index]) -&gt; item <ul><li>不指定索引index，就从列表尾部弹出一个元素</li><li>指定索引index，就从索引处弹出一个元素，索引超界抛出IndexError错误</li></ul></li><li>clear() -&gt; None <ul><li>清除列表所有元素，剩下一个空列表</li></ul></li></ul><h3 id="in-成员操作" tabindex="-1"><a class="header-anchor" href="#in-成员操作" aria-hidden="true">#</a> in 成员操作</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;a&#39;</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
	<span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列表复制" tabindex="-1"><a class="header-anchor" href="#列表复制" aria-hidden="true">#</a> 列表复制</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>
c <span class="token operator">=</span> a
c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token comment"># 还相等吗？  不相等</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token comment"># 相等吗？ 相等</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> a<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token comment"># 相等</span>
a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token comment"># 不相等</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> a<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token comment"># True</span>
a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token comment"># False</span>
a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token comment"># True</span>
a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>列表的内存模型和深浅拷贝</strong></p><ul><li>shadow copy <ul><li>影子拷贝，也叫浅拷贝。遇到引用类型数据，仅仅复制一个引用而已</li></ul></li><li>deep copy <ul><li>深拷贝，往往会递归复制一定深度</li></ul></li></ul><p>一般情况下，大多数语言提供的默认复制行为都是浅拷贝。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> copy
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>
a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token comment"># False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Python内建数据类型，内部都实现了 == ，它的意思是内容比较</p></blockquote><h3 id="python-内存管理" tabindex="-1"><a class="header-anchor" href="#python-内存管理" aria-hidden="true">#</a> Python 内存管理</h3><p>后续补充</p><h2 id="元组-tuple" tabindex="-1"><a class="header-anchor" href="#元组-tuple" aria-hidden="true">#</a> 元组 tuple</h2><ul><li>一个有序的元素组成的集合</li><li>使用小括号 ( ) 表示</li><li>元组是不可变对象</li></ul><h3 id="初始化-1" tabindex="-1"><a class="header-anchor" href="#初始化-1" aria-hidden="true">#</a> 初始化</h3><ul><li>tuple() -&gt; empty tuple</li><li>tuple(iterable) -&gt; tuple initialized from iterable&#39;s items</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 空元组</span>
t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment"># 必须有这个逗号</span>
t3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span>
t4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
t5 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span>
t6 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
t7 <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 空元组</span>
t8 <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
t9 <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="索引-1" tabindex="-1"><a class="header-anchor" href="#索引-1" aria-hidden="true">#</a> 索引</h3><p>索引和列表规则一样，不可以超界</p><h3 id="查询-1" tabindex="-1"><a class="header-anchor" href="#查询-1" aria-hidden="true">#</a> 查询</h3><p>方法和列表一样，时间复杂度也一样。index、count、len等</p><h3 id="增删改" tabindex="-1"><a class="header-anchor" href="#增删改" aria-hidden="true">#</a> 增删改</h3><p>元组元素的个数在初始化的时候已经定义好了，所以不能为元组增加元素、也不能从中删除元素、也不能修改元素的内容。</p>`,49),l=[e];function o(i,c){return s(),a("div",null,l)}const k=n(t,[["render",o],["__file","list-tuple-data.html.vue"]]);export{k as default};
