import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as e,e as r}from"./app-691f2d69.js";const l={},n=r('<h1 id="_2-nginx架构基础" tabindex="-1"><a class="header-anchor" href="#_2-nginx架构基础" aria-hidden="true">#</a> 2. nginx架构基础</h1><h2 id="_1-nginx请求处理流程" tabindex="-1"><a class="header-anchor" href="#_1-nginx请求处理流程" aria-hidden="true">#</a> 1 Nginx请求处理流程</h2><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20200310164648893.png" alt=""></p><h2 id="_2-nginx进程结构" tabindex="-1"><a class="header-anchor" href="#_2-nginx进程结构" aria-hidden="true">#</a> 2 Nginx进程结构</h2><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20200310164732720.png" alt=""></p><h2 id="_3-nginx进程管理-信号" tabindex="-1"><a class="header-anchor" href="#_3-nginx进程管理-信号" aria-hidden="true">#</a> 3 Nginx进程管理：信号</h2><h3 id="_3-1-master进程" tabindex="-1"><a class="header-anchor" href="#_3-1-master进程" aria-hidden="true">#</a> 3.1 Master进程</h3><ul><li>监控worker进程 <ul><li>CHLD</li></ul></li><li>管理worker进程</li><li>接收信号 <ul><li>TERM，INT</li><li>QUIT</li><li>HUP</li><li>USR1</li><li>USR2</li><li>WINCH</li></ul></li></ul><h3 id="_3-2-worker进程" tabindex="-1"><a class="header-anchor" href="#_3-2-worker进程" aria-hidden="true">#</a> 3.2 Worker进程</h3><ul><li>接收信号 <ul><li>TERM，INT</li><li>QUIT</li><li>USR1</li><li>WINCH</li></ul></li></ul><h3 id="_3-3-nginx命令行" tabindex="-1"><a class="header-anchor" href="#_3-3-nginx命令行" aria-hidden="true">#</a> 3.3 nginx命令行</h3><ul><li>reload：HUP</li><li>reopen：USR1</li><li>stop：TERM</li><li>quit：QUIT</li></ul><h2 id="_4-reload-流程" tabindex="-1"><a class="header-anchor" href="#_4-reload-流程" aria-hidden="true">#</a> 4 reload 流程</h2><p>1）向master进程发送HUP信号（reload命令）</p><p>2）master进程校验配置语法是否正确</p><p>3）master进行打开新的监听端口</p><p>4）master进程用新配置启动新的worker子进程</p><p>5）master进程向老worker子进程发送QUIT信号</p><p>6）老worker进程关闭监听句柄，处理完当前连接后结束进程</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20200310170519124.png" alt=""></p><h2 id="_5-热升级流程" tabindex="-1"><a class="header-anchor" href="#_5-热升级流程" aria-hidden="true">#</a> 5 热升级流程</h2><p>1）将旧Ningx文件换成新Nginx文件（注意备份）</p><p>2）向master进程发送USR2信号</p><p>3）master进程修改pid文件名，加后缀.oldbin（进程自动改的，不需要手动改）</p><p>4）master进程用新Nginx文件启动新master进程</p><p>5）向老master进程发送QUIT信号，关闭老master</p><p>6）回滚：向老master发送HUP，向新master发送QUIT</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20200310171424958.png" alt=""></p><h2 id="_6-worker进程-优雅的关闭" tabindex="-1"><a class="header-anchor" href="#_6-worker进程-优雅的关闭" aria-hidden="true">#</a> 6 worker进程：优雅的关闭</h2><p>1）设置定时器<code>worker_shutdown_timeout</code></p><p>2）关闭监听句柄</p><p>3）关闭空闲连接</p><p>4）在循环中等待全部连接关闭</p><p>5）退出进程</p><h2 id="_7-网络相关" tabindex="-1"><a class="header-anchor" href="#_7-网络相关" aria-hidden="true">#</a> 7 网络相关</h2><h3 id="_7-1-网络传输" tabindex="-1"><a class="header-anchor" href="#_7-1-网络传输" aria-hidden="true">#</a> 7.1 网络传输</h3><ul><li>应用层</li><li>传输层</li><li>网络层</li><li>链路层</li><li>物理层</li></ul><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20200310172023302.png" alt=""></p><h3 id="_7-2-tcp流与报文" tabindex="-1"><a class="header-anchor" href="#_7-2-tcp流与报文" aria-hidden="true">#</a> 7.2 TCP流与报文</h3><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20200310172138764.png" alt=""></p><h3 id="_7-3-tcp协议与非阻塞接口" tabindex="-1"><a class="header-anchor" href="#_7-3-tcp协议与非阻塞接口" aria-hidden="true">#</a> 7.3 TCP协议与非阻塞接口</h3><ul><li>读事件 <ul><li>Accept建立连接</li><li>Read读消息</li></ul></li><li>写事件 <ul><li>Write写信息</li></ul></li></ul><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20200310172800752.png" alt=""></p><h2 id="_8-nginx事件循环" tabindex="-1"><a class="header-anchor" href="#_8-nginx事件循环" aria-hidden="true">#</a> 8 Nginx事件循环</h2><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20200310173131875.png" alt=""></p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20200310173315213.png" alt=""></p><h3 id="_8-1-epoll" tabindex="-1"><a class="header-anchor" href="#_8-1-epoll" aria-hidden="true">#</a> 8.1 epoll</h3><p><strong>前提</strong></p><p>高并发连接中，每次处理的活跃连接数量占比很小</p><p><strong>实现</strong></p><p>红黑树，链表</p><p><strong>使用</strong></p><p>创建，操作（添加/修改/删除），获取句柄，关闭</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20200310173757670.png" alt=""></p><h2 id="_9-模块分类" tabindex="-1"><a class="header-anchor" href="#_9-模块分类" aria-hidden="true">#</a> 9 模块分类</h2><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20200310174353557.png" alt=""></p>',56),h=[n];function s(t,c){return i(),e("div",null,h)}const o=a(l,[["render",s],["__file","framework.html.vue"]]);export{o as default};
