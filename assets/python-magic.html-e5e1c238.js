import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-6e2a3b53.js";const p={},e=t(`<h1 id="_11-魔术方法" tabindex="-1"><a class="header-anchor" href="#_11-魔术方法" aria-hidden="true">#</a> 11 魔术方法</h1><h2 id="实例化" tabindex="-1"><a class="header-anchor" href="#实例化" aria-hidden="true">#</a> 实例化</h2><table><thead><tr><th>方法</th><th>意义</th></tr></thead><tbody><tr><td><code>__new__</code></td><td>实例化一个对象<br>该方法需要返回一个值，如果该值不是 cls 的实例，则不会调用 <code>__init__</code><br>该方法永远都是静态方法</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>
        <span class="token comment">#return super().__new__(cls)</span>
        <span class="token comment">#return 1</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        
a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__new__</code> 方法很少使用，即使创建了该方法，也会使用 <code>return super().__new__(cls)</code> 基类object的 <code>__new__</code> 方法来创建实例并返回。</p><h2 id="可视化" tabindex="-1"><a class="header-anchor" href="#可视化" aria-hidden="true">#</a> 可视化</h2><table><thead><tr><th>方法</th><th>意义</th></tr></thead><tbody><tr><td><code>__str__</code></td><td>str()函数、format()函数、print()函数调用，需要返回对象的字符串表达。如果没<br>有定义，就去调用<code>__repr__</code> 方法返回字符串表达，如果 <code>__repr__</code> 没有定义，就直接返回对象的内存地址信息</td></tr><tr><td><code>__repr__</code></td><td>内建函数repr()对一个对象获取字符串表达。<br>调用 <code>__repr__</code> 方法返回字符串表达，如果 <code>__repr__</code> 也没有定义，就直接返回 object 的定义就是显示内存地址信息</td></tr><tr><td><code>__bytes__</code></td><td>bytes() 函数调用，返回一个对象的 bytes 表达，即返回 bytes 对象</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;repr: {},{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;str: {},{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__bytes__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment">#return &quot;{} is {}&quot;.format(self.name, self.age).encode()</span>
        <span class="token keyword">import</span> json
        <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
<span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># print函数使用__str__</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># []使用__str__，但其内部使用__repr__</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># []使用__str__，其中的元素使用str()函数也调用__str__</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hash" tabindex="-1"><a class="header-anchor" href="#hash" aria-hidden="true">#</a> hash</h2><table><thead><tr><th>方法</th><th>意义</th></tr></thead><tbody><tr><td><code>__hash__</code></td><td>内建函数 hash() 调用的返回值，返回一个整数。如果定义这个方法该类的实例就<br>可hash。</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name

    <span class="token keyword">def</span> <span class="token function">__hash__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 可hash 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># (tom, tom)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># [tom, tom]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;~~~~~~~~~~~~~~~~~~~~&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># {1}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># {&#39;tom&#39;}</span>
a1 <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span>
a2 <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span>
s <span class="token operator">=</span> <span class="token punctuation">{</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">}</span> <span class="token comment"># set</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment"># 去重了吗 没有 {tom, tom}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">hash</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 1, 1</span>
t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t1 <span class="token keyword">is</span> t2<span class="token punctuation">)</span> <span class="token comment"># 3.7+是True，3.6及以下是False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t1 <span class="token operator">==</span> t2<span class="token punctuation">)</span> <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">hash</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">hash</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#(tom,)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中， A的实例放在set中，它们hash值是相同的，为什么不能去重？ hash值相同就会去重吗？</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name

    <span class="token keyword">def</span> <span class="token function">__hash__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>

    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 这个函数作用？</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name <span class="token operator">==</span> other<span class="token punctuation">.</span>name

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;~~~~~~~~~~~~~~~~~~~~&#39;</span><span class="token punctuation">)</span>
s <span class="token operator">=</span> <span class="token punctuation">{</span>A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment"># set</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>方法</th><th>意义</th></tr></thead><tbody><tr><td><code>__eq__</code></td><td>对应==操作符，判断2个对象内容是否相等，返回bool值<br>定义了这个方法，如果不提供 <code>__hash__</code> 方法，那么实例将不可hash了</td></tr></tbody></table><p><code>__hash__</code> 方法只是返回一个hash值作为set的key，但是 去重 ，还需要 <code>__eq__</code> 来判断2个对象是否相等。 hash值相等，只是hash冲突，不能说明两个对象是相等的。</p><p>因此，一般来说提供 <code>__hash__</code> 方法是为了作为set或者dict的key，如果 去重 要同时提供 <code>__eq__</code> 方法。</p><p>不可 hash 对象 isinstance(p1, collections.Hashable) 一定为 False。 去重 需要提供 <code>__eq__</code> 方法。</p><p><strong>思考：</strong> list类实例为什么不可hash？</p><p>源码中有一句 <code>__hash__ = None</code>，也就是如果调用 <code>__hash__ ()</code>相当于None()，一定报错。 所有类都继承object，而这个类是具有 <code>__hash__ ()</code>方法的，如果一个类不能被hash，就把 <code>__hash__</code> 设置为None。</p><h2 id="bool" tabindex="-1"><a class="header-anchor" href="#bool" aria-hidden="true">#</a> bool</h2><table><thead><tr><th>方法</th><th>意义</th></tr></thead><tbody><tr><td><code>__bool__</code></td><td>内建函数bool()，或者对象放在逻辑表达式的位置，调用这个函数返回布尔值。<br>没有定义 <code>__bool__</code> ()，就找 <code>__len__</code> ()返回长度，非0为真。<br>如果 <code>__len__</code> ()也没有定义，那么所有实例都返回真</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span> <span class="token keyword">pass</span>
a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#True</span>

<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__bool__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># False</span>

<span class="token keyword">if</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Real B instance&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>C<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># False</span>

<span class="token keyword">if</span> C<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Real C instance&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符重载" tabindex="-1"><a class="header-anchor" href="#运算符重载" aria-hidden="true">#</a> 运算符重载</h2><p>operator 模块提供以下的特殊方法，可以将类的实例使用下面的操作符来操作</p><table><thead><tr><th>运算符</th><th>特殊方法</th><th>含义</th></tr></thead><tbody><tr><td>&lt;, &lt;=, ==, &gt;,<br>&gt;=, !=</td><td><code>__lt__</code>,<code>__le__</code>,<code>__eq__</code>,<code>__gt__</code>,<code>__ge__</code>,<code>__ne__</code></td><td>比较运算符</td></tr><tr><td>+, -, *, /, %,<br>//, **,<br>divmod</td><td><code>__add__</code>,<code>__sub__</code>,<code>__mul__</code>,<code>__truediv__</code>,<br><code>__mod__</code>,<code>__floordiv__</code>,<code>__pow__</code>,<code>__divmod__</code></td><td>算数运算符，移位、<br>位运算也有对应的方<br>法</td></tr><tr><td>+=, -=, *=,<br>/=, %=, //=,<br>**=</td><td><code>__iadd__</code>,<code>__isub__</code>,<code>__imul__</code>,<code>__itruediv__</code>,<br><code>__imod__</code>,<code>__ifloordiv__</code>,<code>__ipow__</code>,</td><td></td></tr></tbody></table><p>实现自定义类的实例的大小比较（非常重要，排序时使用）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name <span class="token operator">==</span> other<span class="token punctuation">.</span>name <span class="token keyword">and</span> self<span class="token punctuation">.</span>age <span class="token operator">==</span> other<span class="token punctuation">.</span>age

    <span class="token keyword">def</span> <span class="token function">__gt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> other<span class="token punctuation">.</span>age

    <span class="token keyword">def</span> <span class="token function">__ge__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>age <span class="token operator">&gt;=</span> other<span class="token punctuation">.</span>age

tom <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span>
jerry <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom <span class="token operator">==</span> jerry<span class="token punctuation">,</span> tom <span class="token operator">!=</span> jerry<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom <span class="token operator">&gt;</span> jerry<span class="token punctuation">,</span> tom <span class="token operator">&lt;</span> jerry<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom <span class="token operator">&gt;=</span> jerry<span class="token punctuation">,</span> tom <span class="token operator">&lt;=</span> jerry<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__eq__</code> 等于可以推断不等于 <code>__gt__</code> 大于可以推断小于 <code>__ge__</code> 大于等于可以推断小于等于 也就是用3个方法，就可以把所有比较解决了</p><p>实现两个学生的成绩差</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score

tom <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>
jerry <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>score <span class="token operator">-</span> jerry<span class="token punctuation">.</span>score<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score

    <span class="token keyword">def</span> <span class="token function">__sub__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>score <span class="token operator">-</span> other<span class="token punctuation">.</span>score

tom <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>
jerry <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>score <span class="token operator">-</span> jerry<span class="token punctuation">.</span>score<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>tom <span class="token operator">-</span> jerry<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;~~~~~~~~~~~~~~~~~~~~~~~~~~~&#39;</span><span class="token punctuation">)</span>
jerry <span class="token operator">-=</span> tom <span class="token comment"># 调用什么</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>jerry<span class="token punctuation">)</span> <span class="token comment"># 显示什么 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score

    <span class="token keyword">def</span> <span class="token function">__sub__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>score <span class="token operator">-</span> other<span class="token punctuation">.</span>score

    <span class="token keyword">def</span> <span class="token function">__isub__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment">#return A(self.name, self.score - other.score)</span>
        self<span class="token punctuation">.</span>score <span class="token operator">-=</span> other<span class="token punctuation">.</span>score
        <span class="token keyword">return</span> self
    
    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&lt;A name={}, score={}&gt;&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>score<span class="token punctuation">)</span>

tom <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>
jerry <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>score <span class="token operator">-</span> jerry<span class="token punctuation">.</span>score<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom <span class="token operator">-</span> jerry<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;~~~~~~~~~~~~~~~~~~~~~~~~~~~&#39;</span><span class="token punctuation">)</span>
jerry <span class="token operator">-=</span> tom <span class="token comment"># 调用什么</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>jerry<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思考：list的+和+=的区别。tuple呢？</p><h2 id="上下文管理" tabindex="-1"><a class="header-anchor" href="#上下文管理" aria-hidden="true">#</a> 上下文管理</h2><p>文件 IO 操作可以对文件对象使用上下文管理，使用 with...as 语法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
	<span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>仿照上例写一个自己的类，实现上下文管理</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
	<span class="token keyword">pass</span>

<span class="token keyword">with</span> Point<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span> <span class="token comment"># AttributeError: __exit__</span>
	<span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示属性错误，没有 <code>__exit__</code> ，看了需要这个属性 某些版本会显示没有 <code>__enter__</code></p><h3 id="上下文管理对象" tabindex="-1"><a class="header-anchor" href="#上下文管理对象" aria-hidden="true">#</a> 上下文管理对象</h3><p>当一个对象同时实现了 <code>__enter__ </code>()和 <code>__exit__</code> ()方法，它就属于上下文管理的对象</p><table><thead><tr><th>方法</th><th>意义</th></tr></thead><tbody><tr><td><code>__enter__</code></td><td>进入与此对象相关的上下文。如果存在该方法，with 语法会把该方法的返回值作<br>为绑定到 as 子句中指定的变量上</td></tr><tr><td><code>__exit__</code></td><td>退出与此对象相关的上下文</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time

<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;init ~~~~~~~~&#39;</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;init over&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;enter ~~~~~~~~&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;exit ============&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> Point<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;in with-------------&#39;</span><span class="token punctuation">)</span>

    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;with over&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;=======end==========&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 输出结果为</span>
init <span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>
init over
enter <span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>
<span class="token keyword">in</span> <span class="token keyword">with</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
<span class="token keyword">with</span> over
exit <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>end<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例化对象的时候，并不会调用enter，进入with语句块调用 <code>__enter__</code> 方法，然后执行语句体，最后离开 with 语句块的时候，调用 <code>__exit__</code> 方法。</p><p>with 可以开启一个上下文运行环境，在执行前做一些准备工作，执行后做一些收尾工作。</p><p>注意，with并不开启一个新的作用域。</p><h3 id="上下文管理的安全性" tabindex="-1"><a class="header-anchor" href="#上下文管理的安全性" aria-hidden="true">#</a> 上下文管理的安全性</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time

<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;init ~~~~~~~~&#39;</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;init over&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;enter ~~~~~~~~&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;exit ============&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> Point<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;in with-------------&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;with over&#39;</span><span class="token punctuation">)</span>
    
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;=======end==========&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出在抛出异常的情况下，with的<code>__exit__</code>照样执行，<strong>上下文管理是安全的</strong>。</p><h3 id="with-语句" tabindex="-1"><a class="header-anchor" href="#with-语句" aria-hidden="true">#</a> with 语句</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># t3.py文件中写入下面代码</span>
<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;init&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;enter&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">)</span>

f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;t3.py&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> f <span class="token keyword">as</span> p<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f <span class="token keyword">is</span> p<span class="token punctuation">)</span> <span class="token comment"># 打印什么 True</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token comment"># 打印什么 True</span>

p <span class="token operator">=</span> f <span class="token operator">=</span> <span class="token boolean">None</span>
p <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> p <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;in with-------------&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>p <span class="token operator">==</span> f<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;with over&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;=======end==========&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题在于 <code>__enter__</code> 方法上，它将自己的返回值赋给f。修改上例</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># t3.py文件中写入下面代码</span>
<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;init&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;enter&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self

    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">)</span>
p <span class="token operator">=</span> f <span class="token operator">=</span> <span class="token boolean">None</span>
p <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> p <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;in with-------------&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>p <span class="token operator">==</span> f<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;with over&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;=======end==========&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>with 语法，会调用 with 后的对象的<code>__enter__</code>方法，如果有 as，则将该方法的返回值赋给 as 子句的变量</p><p>上例，可以等价为<code>f = p.__enter__()</code></p><h3 id="上下文应用场景" tabindex="-1"><a class="header-anchor" href="#上下文应用场景" aria-hidden="true">#</a> 上下文应用场景</h3><ol><li>增强功能 在代码执行的前后增加代码，以增强其功能。类似装饰器的功能。</li><li>资源管理 打开了资源需要关闭，例如文件对象、网络连接、数据库连接等</li><li>权限验证 在执行代码之前，做权限的验证，在<code> __enter__</code> 中处理</li></ol><h3 id="contextlib-contextmanager" tabindex="-1"><a class="header-anchor" href="#contextlib-contextmanager" aria-hidden="true">#</a> contextlib.contextmanager</h3><p>contextlib.contextmanager 它是一个装饰器实现上下文管理，装饰一个函数，而不用像类一样实现<code>__enter__</code> 和 <code>__exit__</code> 方法。</p><p>对下面的函数有要求：必须有yield，也就是这个函数必须返回一个生成器，且只有yield一个值。</p><p>也就是这个装饰器接收一个生成器对象作为参数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> contextlib

<span class="token decorator annotation punctuation">@contextlib<span class="token punctuation">.</span>contextmanager</span>
<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;enter&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 相当于__enter__()</span>
    <span class="token keyword">yield</span> <span class="token comment"># yield 5，yield的值只能有一个，相当于作为__enter__方法的返回值</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 相当于__exit__()</span>

<span class="token keyword">with</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token comment">#raise Exception()</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>f 接收 yield 语句的返回值。</p><p>上面的程序看似不错但是，增加一个异常试一试，发现不能保证 exit 的执行，怎么办？ 增加 try finally。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> contextlib

<span class="token decorator annotation punctuation">@contextlib<span class="token punctuation">.</span>contextmanager</span>
<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;enter&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 相当于__enter__()</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> <span class="token comment"># yield 5，yield的值只能有一个，相当于作为__enter__方法的返回值</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 相当于__exit__()</span>

<span class="token keyword">with</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例这么做有什么意义呢？ 当 yield 发生处为生成器函数增加了上下文管理。这是为函数增加上下文机制的方式。</p><ul><li>把 yield 之前的当做<code>__enter__</code>方法执行</li><li>把 yield 之后的当做<code>__exit__</code>方法执行</li><li>把 yield 的值作为<code>__enter__</code>的返回值</li></ul><p>练习：为add函数计时</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> contextlib
<span class="token keyword">import</span> datetime
<span class="token keyword">import</span> time

<span class="token decorator annotation punctuation">@contextlib<span class="token punctuation">.</span>contextmanager</span>
<span class="token keyword">def</span> <span class="token function">timeit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;enter&#39;</span><span class="token punctuation">)</span>
    start <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">)</span>
        delta <span class="token operator">=</span> <span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;delta = {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y

<span class="token keyword">with</span> timeit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong></p><p>如果业务逻辑简单可以使用函数加 contextlib.contextmanager 装饰器方式，如果业务复杂，用类的方 式加 <code>__enter__</code> 和 <code>__exit__</code> 方法方便。</p><h2 id="反射概念" tabindex="-1"><a class="header-anchor" href="#反射概念" aria-hidden="true">#</a> 反射概念</h2><p>概述</p><p>运行时，runtime，区别于编译时，指的是程序被加载到内存中执行的时候。 反射，reflection，指的是运行时获取类型定义信息。 一个对象能够在运行时，像照镜子一样，反射出其类型信息。 简单说，在Python中，能够通过一个对象，找出其type、class、attribute 或 method 的能力，称为反射或者自省。 具有反射能力的函数有 type()、isinstance()、callable()、dir()、getattr() 等</p><table><thead><tr><th>内建函数</th><th>意义</th></tr></thead><tbody><tr><td>getattr(object, name[, default])</td><td>通过name返回object的属性值。当属性不存在，将使用default返回，如果<br>没有default，则抛出AttributeError。name必须为字符串</td></tr><tr><td>setattr(object, name, value)</td><td>object的属性存在，则覆盖，不存在，新增</td></tr><tr><td>hasattr(object, name)</td><td>判断对象是否有这个名字的属性，name必须为字符串</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y

p1 <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为上面 Point 类增加打印的方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y

p1 <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">setattr</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token builtin">setattr</span><span class="token punctuation">(</span>Point<span class="token punctuation">,</span> <span class="token string">&#39;__str__&#39;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> self<span class="token punctuation">:</span> <span class="token string">&quot;&lt;Point {},{}&gt;&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反射相关的魔术方法 <code>__getattr__()</code> 、 <code>__setattr__()</code> 、 <code>__delattr__()</code> 这三个魔术方法，分别测试这三个方法</p><h3 id="getattr" tabindex="-1"><a class="header-anchor" href="#getattr" aria-hidden="true">#</a> <code>__getattr__()</code></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y

    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;getattr~~~&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">100</span>

p1 <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>z<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例属性查找顺序为：</p><p><code>__instance.__dict__ --&gt; instance.__class__.__dict__ --&gt; 继承的祖先类（直到object）的__dict__ --&gt; 找不到 --&gt; 调用__getattr__()</code></p><h3 id="setattr" tabindex="-1"><a class="header-anchor" href="#setattr" aria-hidden="true">#</a> <code>__setattr__()</code></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y

    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;getattr~~~&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">100</span>

    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;setattr~~~, {}={}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>

p1 <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>p1 的实例字典里面什么都没有，而且访问x和y属性的时候竟然访问到了<code>__getattr__()</code>，为什么？</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y

    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;getattr~~~&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">100</span>

    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;setattr~~~, {}={}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token comment"># setattr(self, key, value) # 对吗 不对，self会产生递归</span>

p1 <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__setattr__()</code> 方法，可以拦截对实例属性的增加、修改操作，如果要设置生效，需要自己操作实例 的 <code>__dict__</code> 。</p><h3 id="delattr" tabindex="-1"><a class="header-anchor" href="#delattr" aria-hidden="true">#</a> <code>__delattr__()</code></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
    Z <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y

    <span class="token keyword">def</span> <span class="token function">__delattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;delattr, {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>

p1 <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">del</span> p1<span class="token punctuation">.</span>x
<span class="token keyword">del</span> p1<span class="token punctuation">.</span>y
<span class="token keyword">del</span> p1<span class="token punctuation">.</span>Z
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Point<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
<span class="token keyword">del</span> Point<span class="token punctuation">.</span>Z
<span class="token keyword">print</span><span class="token punctuation">(</span>Point<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过实例删除属性，就会尝试调用该魔术方法。</p><h2 id="getattribute" tabindex="-1"><a class="header-anchor" href="#getattribute" aria-hidden="true">#</a> <code>__getattribute__</code></h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
    Z <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y


p1 <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Point<span class="token punctuation">.</span>Z<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>Z<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>

<span class="token comment"># 为Point类增加__getattribute__，观察变化</span>
<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
    Z <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y

    <span class="token keyword">def</span> <span class="token function">__getattribute__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>

p1 <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Point<span class="token punctuation">.</span>Z<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>Z<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例的所有的属性访问，第一个都会调用 <code>__getattribute__</code> 方法，它阻止了属性的查找，该方法应该返回（计算后的）值或者抛出一个 AttributeError 异常。</p><ul><li>它的return值将作为属性查找的结果。</li><li>如果抛出AttributeError异常，则会直接调用 <code>__getattr__ </code>方法，因为表示属性没有找到。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>
    Z <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y

    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;missing {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__getattribute__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># print(item)</span>
        <span class="token comment"># raise AttributeError(&#39;Not Found&#39;)</span>
        <span class="token comment"># return self.__dict__[item] # 不能用，会产生递归</span>
        <span class="token comment"># pass</span>
        <span class="token comment"># return object.__getattribute__(self, item)</span>
        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__getattribute__<span class="token punctuation">(</span>item<span class="token punctuation">)</span>

p1 <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Point<span class="token punctuation">.</span>Z<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>Z<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__getattribute__</code> 方法中为了避免在该方法中无限的递归，它的实现应该永远调用基类的同名方法以访问需要的任何属性，例如 <code>object.__getattribute__(self, name) </code>。</p><p>注意，除非你明确地知道 <code>__getattribute__</code> 方法用来做什么，否则不要使用它。</p><p><strong>总结</strong></p><table><thead><tr><th>魔术方法</th><th>意义</th></tr></thead><tbody><tr><td><code>__getattr__()</code></td><td>当通过搜索实例、实例的类及祖先类查不到属性，就会调用此方法</td></tr><tr><td><code>__setattr__()</code></td><td>通过 <code>.</code>访问实例属性，进行增加、修改都要调用它</td></tr><tr><td><code>__delattr__()</code></td><td>当通过实例来删除属性时调用此方法</td></tr><tr><td><code>__getattribute__()</code></td><td>实例所有的属性调用都从这个方法开始</td></tr></tbody></table><p>实例属性查找顺序：</p><p><code>实例调用__getattribute__() --&gt; instance.__dict__ --&gt; instance.__class__.__dict__ --&gt; 继承的祖先类（直到object）的__dict__ --&gt; 调用__getattr__()</code></p>`,103),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","python-magic.html.vue"]]);export{k as default};
