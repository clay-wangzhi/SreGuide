import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,e}from"./app-3644928f.js";const t={},l=e(`<h1 id="k8s-负载感知调度实践-koordinator-crane" tabindex="-1"><a class="header-anchor" href="#k8s-负载感知调度实践-koordinator-crane" aria-hidden="true">#</a> K8s 负载感知调度实践（koordinator &amp; crane）</h1><p>上篇 “深入了解 kube-scheduler” ，已经知道 kube-scheduler 的工作流程，以及如何实现自定义插件。koordinator 和 crane 都是基于Scheduler Framework 进行实现的 负载感知插件。本文不再赘述，感兴趣可以看上篇文章。</p><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>原生 Kubernetes 调度器仅基于资源的 Request 进行调度，在生产环境资源的真实使用率和申请率往往相差巨大，造成<strong>资源浪费</strong>的同时也会造成节点的负<strong>载不均衡</strong>。</p><h2 id="开源方案对比-koordinator-vs-crane" tabindex="-1"><a class="header-anchor" href="#开源方案对比-koordinator-vs-crane" aria-hidden="true">#</a> 开源方案对比 koordinator VS crane</h2><p><strong>crane-scheduler 架构</strong></p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20241024143748739.png" style="zoom:67%;"><blockquote><p>前置条件是安装了 Prometheus ， 从 Prometheus 中获取数据。</p></blockquote><p><strong>koord-scheduler 架构</strong></p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20241024144013602.png" alt=""></p><blockquote><p>监控指标是从 koordlet 中获取， koordlet 是一个 daemonset 类型的插件，负责收集指标，并存储在本地 Prometheus 中</p></blockquote><p><strong>对比</strong></p><table><thead><tr><th></th><th>crane-scheduler</th><th>koord-scheduler</th></tr></thead><tbody><tr><td>指标收集周期</td><td>依赖于外置 Prometheus 的收集周期，默认为 30s （颗粒度较粗，不容易收集到突刺）</td><td>ds 方式 的 koordlet 插件收集， 相当于每个 Node 节点都有一个 Prometheus， 收集周期默认为 1s</td></tr><tr><td>数值类型</td><td>avg 、max</td><td>avg、p50、p90、p95、p99</td></tr><tr><td>在离线混部</td><td>不支持</td><td>支持<br>在线 Pod(LSE/LSR/LS）和离线 Pod（BE）</td></tr><tr><td>hotValue 资源预估</td><td>支持</td><td>支持</td></tr><tr><td>使用率 分母</td><td>宿主机 Total 资源（不合理）</td><td>Node allocatable (合理)</td></tr></tbody></table><p>综上，选用 koord-scheduler 。</p><h2 id="koordinator-使用实践" tabindex="-1"><a class="header-anchor" href="#koordinator-使用实践" aria-hidden="true">#</a> koordinator 使用实践</h2><p>新增 UsageAggregatedDuration 为 18h 的时间段</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl <span class="token parameter variable">-n</span> koordinator-system edit  cm slo-controller-config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token key atrule">colocation-config</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
    {
      &quot;enable&quot;: true,
      &quot;metricAggregatePolicy&quot;: {
        &quot;durations&quot;: [
          &quot;5m&quot;,
          &quot;10m&quot;,
          &quot;30m&quot;,
          &quot;24h&quot;
        ]
      }
    }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 koordlet 中 Prometheus 的存储时间</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl <span class="token parameter variable">-n</span> koordinator-system edit ds koordlet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">args</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token punctuation">-</span>addr=<span class="token punctuation">:</span><span class="token number">9316</span>
        <span class="token punctuation">-</span> <span class="token punctuation">-</span>cgroup<span class="token punctuation">-</span>root<span class="token punctuation">-</span>dir=/host<span class="token punctuation">-</span>cgroup/
        <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>logtostderr=true
        <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>tsdb<span class="token punctuation">-</span>retention<span class="token punctuation">-</span>duration=18h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以使用promtool 工具进入 Pod 查看数据： ./promtool tsdb list /metric-data/</p></blockquote><p>修改 阈值 触发规则， 需要重启 koord-scheduler 才生效。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl <span class="token parameter variable">-n</span> koordinator-system edit cm  koord-scheduler-config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>            <span class="token key atrule">aggregated</span><span class="token punctuation">:</span>
              <span class="token key atrule">usageThresholds</span><span class="token punctuation">:</span>
                <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">55</span>
                <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token number">85</span>
              <span class="token key atrule">usageAggregationType</span><span class="token punctuation">:</span> <span class="token string">&quot;p99&quot;</span>
              <span class="token key atrule">scoreAggregationType</span><span class="token punctuation">:</span> <span class="token string">&quot;p99&quot;</span>
            <span class="token key atrule">estimatedScalingFactors</span><span class="token punctuation">:</span>
              <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">85</span>
              <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token number">70</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl <span class="token parameter variable">-n</span> koordinator-system rollout restart deployment koord-scheduler
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>考虑到 公有云资源 可能有自己的 调度实现， 所以只改 IDC 机房的调度器，增加 mutatingwebhook 进行拦截修改，有问题可以快速回退。</p><p>生效方式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl label ns <span class="token variable">\${NsName}</span> koordinator-injection<span class="token operator">=</span>enabled
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>回退方式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl label ns <span class="token variable">\${NsName}</span> koordinator-injection-
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>源代码地址：https://github.com/koordinator-sh/koordinator</p><p>魔改代码地址：https://github.com/clay-wangzhi/koordinator</p><p>魔改代码 快速部署：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/clay-wangzhi/koordinator
<span class="token builtin class-name">cd</span> koordinator/manifests
kubectl apply <span class="token parameter variable">-f</span> setup/
kubectl apply <span class="token parameter variable">-f</span> koordlet/
kubectl apply <span class="token parameter variable">-f</span> koord-scheduler/
kubectl apply <span class="token parameter variable">-f</span> koord-manager/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>1） 找出 负载较高的 Node</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl <span class="token function">top</span> <span class="token function">node</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nk</span> <span class="token number">3</span>
kubectl get nodemetrics.slo.koordinator.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2） 给一个 负载较高的 Node + 几个 负载正常的 Node 打标签</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl label <span class="token function">node</span> <span class="token variable"><span class="token variable">$(</span>NodeName<span class="token variable">)</span></span> <span class="token assign-left variable">test</span><span class="token operator">=</span>true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3）找到应用所在 Ns，打标，设置 SchedulerName 为 koord-scheduler 是通过 mutatingwebhook 实现的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl label ns <span class="token variable">\${NsName}</span> koordinator-injection<span class="token operator">=</span>enabled
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4）找一个应用，加上节点亲和性 和 Pod 反亲和性， 并把副本数 设置为 和 打标的 Node 数 相等</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">4</span>
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">affinity</span><span class="token punctuation">:</span>
        <span class="token key atrule">nodeAffinity</span><span class="token punctuation">:</span>
          <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>
            <span class="token key atrule">nodeSelectorTerms</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>
              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> test
                <span class="token key atrule">operator</span><span class="token punctuation">:</span> In
                <span class="token key atrule">values</span><span class="token punctuation">:</span>
                <span class="token punctuation">-</span> <span class="token string">&quot;true&quot;</span>
        <span class="token key atrule">podAntiAffinity</span><span class="token punctuation">:</span>
          <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">labelSelector</span><span class="token punctuation">:</span>
              <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>
              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> appid
                <span class="token key atrule">operator</span><span class="token punctuation">:</span> In
                <span class="token key atrule">values</span><span class="token punctuation">:</span>
                <span class="token punctuation">-</span> $(AppidName)
            <span class="token key atrule">topologyKey</span><span class="token punctuation">:</span> kubernetes.io/hostname
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5）查看结果，当有一个 Pod 处于 Pending ，且时间 Reson 包涵如下字样，代表设置成功</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20241024172736806.png" alt=""></p><p>参考链接：</p><ul><li>Crane-Scheduler:真实工作负载感知的调度器设计与实现：https://cloud.tencent.com/developer/article/2296515?areaId=106005</li><li>koordinator 负载感知调度：https://koordinator.sh/zh-Hans/docs/user-manuals/load-aware-scheduling</li></ul><p>我是 Clay，下期见 👋</p><hr><blockquote><ul><li><p>欢迎订阅我的公众号「SRE运维进阶之路」或关注我的 Github https://github.com/clay-wangzhi/SreGuide 查看最新文章</p></li><li><p>欢迎加我微信<code>sre-k8s-ai</code>，与我讨论云原生、稳定性相关内容</p></li></ul></blockquote><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/weixin-20240615194414355.png" alt="weixin" style="zoom:50%;">`,52),i=[l];function o(c,r){return n(),s("div",null,i)}const u=a(t,[["render",o],["__file","loadaware-scheduler.html.vue"]]);export{u as default};
