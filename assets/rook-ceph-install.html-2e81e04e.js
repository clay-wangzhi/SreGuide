import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as t,c as i,a as e,b as s,d as a,e as l}from"./app-b1cf59f4.js";const p={},c=e("h1",{id:"rook-ceph-安装配置",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#rook-ceph-安装配置","aria-hidden":"true"},"#"),s(" Rook-Ceph 安装配置")],-1),d=e("p",null,"在容器世界中，无状态是一个核心原则，然而我们始终需要保存数据，并提供给他人进行访问。所以就需要一个方案用于保持数据，以备重启之需。",-1),u=e("p",null,"在 Kubernetes 中，PVC 是管理有状态应用的一个推荐方案。有了 PVC 的帮助，Pod 可以申请并连接到存储卷，这些存储卷在 Pod 生命周期结束之后，还能独立存在。",-1),b=e("p",null,"PVC 在存储方面让开发和运维的职责得以分离。运维人员负责供应存储，而开发人员则可以在不知后端细节的情况下，申请使用这些存储卷。",-1),m=e("p",null,"PVC 由一系列组件构成：",-1),h={href:"https://kubernetes.io/docs/concepts/storage/volumes/#persistentvolumeclaim",target:"_blank",rel:"noopener noreferrer"},v={href:"https://kubernetes.io/docs/concepts/storage/persistent-volumes/",target:"_blank",rel:"noopener noreferrer"},k=e("code",null,"StorageClass",-1),g={href:"https://kubernetes.io/docs/concepts/storage/storage-classes/",target:"_blank",rel:"noopener noreferrer"},_=e("p",null,"物理存储：实际连接和加载的存储卷。",-1),f=e("p",null,"分布式存储系统是一个有效的解决有状态工作负载高可用问题的方案。Ceph 就是一个分布式存储系统，近年来其影响主键扩大。Rook 是一个编排器，能够支持包括 Ceph 在内的多种存储方案。Rook 简化了 Ceph 在 Kubernetes 集群中的部署过程。",-1),x={href:"https://www.cengn.ca/",target:"_blank",rel:"noopener noreferrer"},y=l('<p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/rookceph1.png" alt="images"></p><h2 id="ceph-rook-简介" tabindex="-1"><a class="header-anchor" href="#ceph-rook-简介" aria-hidden="true">#</a> Ceph &amp; Rook 简介</h2><h3 id="ceph-是什么" tabindex="-1"><a class="header-anchor" href="#ceph-是什么" aria-hidden="true">#</a> Ceph 是什么</h3><p>Ceph 是一个分布式存储系统，具备大规模、高性能、无单点失败的特点。Ceph 是一个软件定义的系统，也就是说他可以运行在任何符合其要求的硬件之上。</p><p>Ceph 包括多个组件：</p><p><strong>Ceph Monitors(MON)</strong>：负责生成集群票选机制。所有的集群节点都会向 Mon 进行汇报，并在每次状态变更时进行共享信息。</p><p><strong>Ceph Object Store Devices(OSD)</strong>：负责在本地文件系统保存对象，并通过网络提供访问。通常 OSD 守护进程会绑定在集群的一个物理盘上，Ceph 客户端直接和 OSD 打交道。</p><p><strong>Ceph Manager(MGR)</strong>：提供额外的监控和界面给外部的监管系统使用。</p><p><strong>Reliable Autonomic Distributed Object Stores</strong>：Ceph 存储集群的核心。这一层用于为存储数据提供一致性保障，执行数据复制、故障检测以及恢复等任务。</p><p>为了在 Ceph 上进行读写，客户端首先要联系 MON，获取最新的集群地图，其中包含了集群拓扑以及数据存储位置的信息。Ceph 客户端使用集群地图来获知需要交互的 OSD，从而和特定 OSD 建立联系。</p><h3 id="rook-是什么" tabindex="-1"><a class="header-anchor" href="#rook-是什么" aria-hidden="true">#</a> Rook 是什么</h3>',11),C={href:"https://coreos.com/blog/introducing-operators.html",target:"_blank",rel:"noopener noreferrer"},w=l('<p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/rook-arch.png" alt="rook arch"></p><p>Rook 包含多个组件：</p><p><strong>Rook Operator</strong>：Rook 的核心组件，Rook Operator 是一个简单的容器，自动启动存储集群，并监控存储守护进程，来确保存储集群的健康。</p><p><strong>Rook Agent</strong>：在每个存储节点上运行，并配置一个 FlexVolume 插件，和 Kubernetes 的存储卷控制框架进行集成。Agent 处理所有的存储操作，例如挂接网络存储设备、在主机上加载存储卷以及格式化文件系统等。</p><p><strong>Rook Discovers</strong>：检测挂接到存储节点上的存储设备。</p><p>Rook 还会用 Kubernetes Pod 的形式，部署 Ceph 的 MON、OSD 以及 MGR 守护进程。</p><p>Rook Operator 让用户可以通过 CRD 的是用来创建和管理存储集群。每种资源都定义了自己的 CRD.</p>',7),R={href:"https://rook.github.io/docs/rook/master/cluster-crd.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://rook.github.io/docs/rook/master/pool-crd.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://rook.github.io/docs/rook/master/object-store-crd.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://rook.github.io/docs/rook/master/filesystem-crd.html",target:"_blank",rel:"noopener noreferrer"},E=l(`<h2 id="在-kubernetes-上部署-rook" tabindex="-1"><a class="header-anchor" href="#在-kubernetes-上部署-rook" aria-hidden="true">#</a> 在 Kubernetes 上部署 Rook</h2><h3 id="前提条件" tabindex="-1"><a class="header-anchor" href="#前提条件" aria-hidden="true">#</a> 前提条件</h3><ul><li><p>您已经安装了 Kubernetes 集群，且集群版本不低于 v1.17.0</p><ul><li><p>Kubernetes 集群有至少 3 个工作节点，且每个工作节点都有一块初系统盘以外的 <strong>未格式化</strong> 的裸盘（工作节点是虚拟机时，未格式化的裸盘可以是虚拟磁盘），用于创建 3 个 Ceph OSD；</p></li><li><p>也可以只有 1 个工作节点，挂载了一块 <strong>未格式化</strong> 的裸盘；</p></li><li><p>在节点机器上执行 <code>lsblk -f</code> 指令可以查看磁盘是否需被格式化，输出结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lsblk <span class="token parameter variable">-f</span>
NAME                  FSTYPE      LABEL UUID                                   MOUNTPOINT
vda
└─vda1                LVM2_member       eSO50t-GkUV-YKTH-WsGq-hNJY-eKNf-3i07IB
  ├─ubuntu--vg-root   ext4              c2366f76-6e21-4f10-a8f3-6776212e2fe4   /
  └─ubuntu--vg-swap_1 swap              9492a3dc-ad75-47cd-9596-678e8cf17ff9   <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>
vdb    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>FSTYPE</code> 字段不为空，则表示该磁盘上已经被格式化。在上面的例子中，可以将磁盘 <code>vdb</code> 用于 Ceph 的 OSD，而磁盘 <code>vda</code> 及其分区则不能用做 Ceph 的 OSD。</p></li></ul></li></ul><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone --single-branch <span class="token parameter variable">--branch</span> v1.6.7 https://github.com/rook/rook.git
<span class="token builtin class-name">cd</span> rook/cluster/examples/kubernetes/ceph
kubectl create <span class="token parameter variable">-f</span> crds.yaml <span class="token parameter variable">-f</span> common.yaml <span class="token parameter variable">-f</span> operator.yaml
<span class="token comment"># 修改 cluster.yaml 文件， dashboard 不使用 ssl</span>
kubectl create <span class="token parameter variable">-f</span> cluster.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建 共享文件系统</span>
kubectl create <span class="token parameter variable">-f</span> filesystem.yaml
<span class="token comment"># 提供存储</span>
kubectl create <span class="token parameter variable">-f</span> csi/cephfs/storageclass.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rook-工具箱-dashboard" tabindex="-1"><a class="header-anchor" href="#rook-工具箱-dashboard" aria-hidden="true">#</a> Rook 工具箱 &amp; dashboard</h3><p>1）安装 Rook</p>`,8),B={href:"https://rook.io/docs/rook/v1.1/ceph-toolbox.html",target:"_blank",rel:"noopener noreferrer"},D=e("code",null,"ceph status",-1),V=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 部署 tools:</span>
kubectl apply <span class="token parameter variable">-f</span> toolbox.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦 toolbox 的 Pod 运行成功后，我们就可以使用下面的命令进入到工具箱内部进行操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> kubectl <span class="token parameter variable">-n</span> rook-ceph <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token variable"><span class="token variable">$(</span>kubectl <span class="token parameter variable">-n</span> rook-ceph get pod <span class="token parameter variable">-l</span> <span class="token string">&quot;app=rook-ceph-tools&quot;</span> <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{.items[0].metadata.name}&#39;</span><span class="token variable">)</span></span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如现在我们要查看集群的状态，需要满足下面的条件才认为是健康的：</p><ul><li>所有 mons 应该达到法定数量</li><li>mgr 应该是激活状态</li><li>至少有一个 OSD 处于激活状态</li><li>如果不是 HEALTH_OK 状态，则应该查看告警或者错误信息</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ceph status
ceph status
  cluster:
    id:     dae083e6-8487-447b-b6ae-9eb321818439
    health: HEALTH_OK

  services:
    mon: <span class="token number">3</span> daemons, quorum a,b,c <span class="token punctuation">(</span>age 15m<span class="token punctuation">)</span>
    mgr: a<span class="token punctuation">(</span>active, since 2m<span class="token punctuation">)</span>
    osd: <span class="token number">31</span> osds: <span class="token number">2</span> up <span class="token punctuation">(</span>since 6m<span class="token punctuation">)</span>, <span class="token number">2</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>since 6m<span class="token punctuation">)</span>

  data:
    pools:   <span class="token number">0</span> pools, <span class="token number">0</span> pgs
    objects: <span class="token number">0</span> objects, <span class="token number">0</span> B
    usage:   <span class="token number">79</span> GiB used, <span class="token number">314</span> GiB / <span class="token number">393</span> GiB avail
    pgs:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),K={href:"https://rook.io/docs/rook/v1.1/ceph-common-issues.html",target:"_blank",rel:"noopener noreferrer"},A=l(`<p>2）部署 dashboard：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl apply <span class="token parameter variable">-f</span> dashboard-external-http.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>dashboard 的密码可以通过如下方式获取：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl <span class="token parameter variable">-n</span> rook-ceph get secret rook-ceph-dashboard-password <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&quot;{[&#39;data&#39;][&#39;password&#39;]}&quot;</span> <span class="token operator">|</span> base64 <span class="token parameter variable">--decode</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><ul><li><p>错误一</p><ul><li><p>错误信息：</p><p>Kubernetes安装rook-ceph集群时报MountVolume.SetUp failed for volume “rook-ceph-crash-collector-keyring” : secret “rook-ceph-crash-collector-keyring” not found</p></li><li><p>解决办法：</p><p>删除yaml的创建</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>kubectl delete -f cluster.yaml
kubectl delete -f operator.yaml
kubectl delete -f common.yaml
kubectl delete -f crds.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确认目录下有文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ll /var/lib/rook/ /var/lib/kubelet/plugins/ /var/lib/kubelet/plugins_registry/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除之前失败的创建</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/rook/* /var/lib/kubelet/plugins/* /var/lib/kubelet/plugins_registry/*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>⚠️ 在每个相关节点都执行</p></blockquote><p>重新创建集群</p></li></ul></li><li><p>错误二</p><ul><li><p>错误信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>waiting <span class="token keyword">for</span> a volume to be created, either by external provisioner <span class="token string">&quot;ceph.rook.io/block&quot;</span> or manually created by system administrator
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>解决办法：</p><p>因为自己编写了 pool 和 sc，直接 apply 官方的 rbd 目录里的 stoageclass.yaml</p></li></ul></li><li><p>错误三</p><ul><li><p>错误信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ceph <span class="token parameter variable">-s</span>
  cluster:
    id:     f1731b79-1e9e-447e-9bc4-36b834c19582
    health: HEALTH_WARN
            mons are allowing insecure global_id reclaim

  services:
    mon: <span class="token number">3</span> daemons, quorum bxpp-master-1,bxpp-worker-1,bxpp-worker-2 <span class="token punctuation">(</span>age 25m<span class="token punctuation">)</span>
    mgr: bxpp-worker-1<span class="token punctuation">(</span>active, since 17m<span class="token punctuation">)</span>, standbys: bxpp-master-1, bxpp-worker-2
    mds: cephfs:1 <span class="token punctuation">{</span><span class="token number">0</span><span class="token operator">=</span>bxpp-master-1<span class="token operator">=</span>up:active<span class="token punctuation">}</span> <span class="token number">2</span> up:standby
    osd: <span class="token number">3</span> osds: <span class="token number">3</span> up <span class="token punctuation">(</span>since 16m<span class="token punctuation">)</span>, <span class="token number">3</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>since 16m<span class="token punctuation">)</span>
    rgw: <span class="token number">3</span> daemons active <span class="token punctuation">(</span>bxpp-master-1.rgw0, bxpp-worker-1.rgw0, bxpp-worker-2.rgw0<span class="token punctuation">)</span>

  task status:
    scrub status:
        mds.bxpp-master-1: idle

  data:
    pools:   <span class="token number">6</span> pools, <span class="token number">168</span> pgs
    objects: <span class="token number">211</span> objects, <span class="token number">4.1</span> KiB
    usage:   <span class="token number">328</span> MiB used, <span class="token number">15</span> GiB / <span class="token number">15</span> GiB avail
    pgs:     <span class="token number">168</span> active+clean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>错误原因：低版本bug</p></li><li><p>解决办法：</p><p>升级版本</p><p>或者直接禁用掉此设置（测试环境可）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ceph config <span class="token builtin class-name">set</span> mon mon_warn_on_insecure_global_id_reclaim_allowed <span class="token boolean">false</span>
ceph config <span class="token builtin class-name">set</span> mon auth_allow_insecure_global_id_reclaim <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>错误四</p><ul><li><p>错误信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># ceph -s </span>
  cluster:
    id:     dd1a1ab2-0f34-4936-bc09-87bd40ef5ca0
    health: HEALTH_WARN
            Degraded data redundancy: <span class="token number">183</span>/4019 objects degraded <span class="token punctuation">(</span><span class="token number">4.553</span>%<span class="token punctuation">)</span>, <span class="token number">15</span> pgs degraded, <span class="token number">16</span> pgs undersized
 
  services:
    mon: <span class="token number">3</span> daemons, quorum k8s-01,k8s-02,k8s-03
    mgr: k8s-01<span class="token punctuation">(</span>active<span class="token punctuation">)</span>
    mds: cephfs-2/2/2 up  <span class="token punctuation">{</span><span class="token number">0</span><span class="token operator">=</span>k8s-01<span class="token operator">=</span>up:active,1<span class="token operator">=</span>k8s-03<span class="token operator">=</span>up:active<span class="token punctuation">}</span>, <span class="token number">1</span> up:standby
    osd: <span class="token number">5</span> osds: <span class="token number">5</span> up, <span class="token number">5</span> <span class="token keyword">in</span>
    rgw: <span class="token number">3</span> daemons active
 
  data:
    pools:   <span class="token number">6</span> pools, <span class="token number">288</span> pgs
    objects: <span class="token number">1.92</span> k objects, <span class="token number">1020</span> MiB
    usage:   <span class="token number">7.5</span> GiB used, <span class="token number">342</span> GiB / <span class="token number">350</span> GiB avail
    pgs:     <span class="token number">183</span>/4019 objects degraded <span class="token punctuation">(</span><span class="token number">4.553</span>%<span class="token punctuation">)</span>
             <span class="token number">272</span> active+clean
             <span class="token number">15</span>  active+undersized+degraded
             <span class="token number">1</span>   active+undersized
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>错误原因：这个状态降级的集群可以正常读写数据，undersized是当前存活的PG副本数为2，小于副本数3.将其做此标记，表明存数据副本数不足。</p></li><li><p>解决办法：</p><p>设置存储池的副本数为2</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ceph osd  pool <span class="token builtin class-name">set</span> default.rgw.log size <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,7),G={href:"https://blog.fleeto.us/post/the-ultimate-rook-and-ceph-survival-guide/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://kuboard.cn/learning/k8s-intermediate/persistent/ceph/rook-config.html#%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.itbkz.com/12925.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://rook.io/docs/rook/v1.6/ceph-quickstart.html",target:"_blank",rel:"noopener noreferrer"},j={href:"https://rook.io/docs/rook/v1.6/ceph-filesystem.html",target:"_blank",rel:"noopener noreferrer"},H={href:"https://wiki.shileizcc.com/confluence/display/CEPH/Ceph+Rook+Install",target:"_blank",rel:"noopener noreferrer"},T={href:"https://www.qikqiak.com/post/deploy-ceph-cluster-with-rook/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://dylanyang.top/post/2021/04/25/ceph%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://www.dazhuanlan.com/2019/08/29/5d66a8f505b40/",target:"_blank",rel:"noopener noreferrer"};function I(F,U){const n=r("ExternalLinkIcon");return t(),i("div",null,[c,d,u,b,m,e("ul",null,[e("li",null,[e("p",null,[e("a",h,[s("PVC"),a(n)]),s("：是 Pod 对存储的请求。PVC 会被 Pod 动态加载成为一个存储卷。")])]),e("li",null,[e("p",null,[e("a",v,[s("PV"),a(n)]),s("，可以由运维手工分配，也可以使用 "),k,s(" 动态分配。PV 受 Kubernetes 管理，但并不与特定的 Pod 直接绑定。")])]),e("li",null,[e("p",null,[e("a",g,[s("StorageClass"),a(n)]),s("：由管理员创建，可以用来动态的创建存储卷和 PV。")])])]),_,f,e("p",null,[s("在生产环境中使用 Rook + Ceph 组合的用户正在日益增加，尤其是自建数据中心的用户，"),e("a",x,[s("CENGN"),a(n)]),s("、Gini、GPR 等很多组织都在进行评估。")]),y,e("p",null,[s("Rook 是一个可以提供 Ceph 集群管理能力的 "),e("a",C,[s("Operator"),a(n)]),s("。Rook 使用 CRD 一个控制器来对 Ceph 之类的资源进行部署和管理。")]),w,e("p",null,[e("strong",null,[s("Rook "),e("a",R,[s("Cluster"),a(n)])]),s("：提供了对存储机群的配置能力，用来提供块存储、对象存储以及共享文件系统。每个集群都有多个 Pool。")]),e("p",null,[e("strong",null,[e("a",P,[s("Pool"),a(n)])]),s("：为块存储提供支持。Pool 也是给文件和对象存储提供内部支持。")]),e("p",null,[e("strong",null,[e("a",O,[s("Object Store"),a(n)])]),s("：用 S3 兼容接口开放存储服务。")]),e("p",null,[e("strong",null,[e("a",S,[s("File System"),a(n)])]),s("：为多个 Kubernetes Pod 提供共享存储。")]),E,e("p",null,[s("要验证集群是否处于正常状态，我们可以使用 "),e("a",B,[s("Rook 工具箱"),a(n)]),s(" 来运行 "),D,s(" 命令查看。")]),V,e("p",null,[s("如果群集运行不正常，可以查看 "),e("a",K,[s("Ceph 常见问题"),a(n)]),s("以了解更多详细信息和可能的解决方案。")]),A,e("ul",null,[e("li",null,[e("a",G,[s("Rook & Ceph 简介 | 伪架构师"),a(n)])]),e("li",null,[e("a",N,[s("使用 CephFS 作为存储类 - Rook | Kuboard"),a(n)])]),e("li",null,[e("a",q,[s("Kubernetes安装rook-ceph集群时报MountVolume.SetUp failed for secret "),a(n)])]),e("li",null,[e("a",M,[s("快速安装ceph | rook 官网"),a(n)])]),e("li",null,[e("a",j,[s("共享文件系统 | rook 官网"),a(n)])]),e("li",null,[e("a",H,[s("Ceph Rook Install | shileizcc"),a(n)])]),e("li",null,[e("a",T,[s("使用 Rook 快速搭建 Ceph 集群 | 阳明"),a(n)])]),e("li",null,[e("a",z,[s("Ceph问题处理 | dylanyang"),a(n)])]),e("li",null,[e("a",L,[s("ceph集群故障运维 | 大专栏"),a(n)])])])])}const $=o(p,[["render",I],["__file","rook-ceph-install.html.vue"]]);export{$ as default};
