import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as p}from"./app-79760db3.js";const t={},e=p(`<h1 id="_2-3-python数据类型" tabindex="-1"><a class="header-anchor" href="#_2-3-python数据类型" aria-hidden="true">#</a> 2.3 Python数据类型</h1><h2 id="内建常用数据类型" tabindex="-1"><a class="header-anchor" href="#内建常用数据类型" aria-hidden="true">#</a> 内建常用数据类型</h2><ul><li><p>数值型</p><ul><li>int、float、complex、bool</li></ul></li><li><p>序列 sequence</p><ul><li>字符串 str、字节序列 bytes、bytearray</li><li>列表 list、元组 tuple</li></ul></li><li><p>键值对</p><ul><li>集合 set、字典 dict</li></ul></li></ul><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><ul><li>int、float、complex、bool 也可以当做内建函数对数据进行类型转换</li><li>int(x) 返回一个整数</li><li>float(x) 返回一个浮点数</li><li>complex(x)、complex(x,y) 返回一个复数</li><li>bool(x) 返回布尔值，前面讲过False等价的对象</li></ul><h2 id="封装和解构" tabindex="-1"><a class="header-anchor" href="#封装和解构" aria-hidden="true">#</a> 封装和解构</h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 什么类型, tuple</span>

t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python等式右侧出现逗号分隔的多值的时候，就会将这几个值封装到元组中。这种操作称为封装packing。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment"># 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 中等式右侧是一个容器类型，左侧是逗号分隔的多个标识符，将右侧容器中数据的一个个和左侧 标识符一一对应。这种操作称为解构 unpacking。</p><p>从 Python3 开始，对解构做了很大的改进，现在用起来已经非常的方便快捷。</p><p>封装和解构是非常方便的提取数据的方法，在 Python、JavaScript 等语言中应用极广。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 交换数据</span>
x <span class="token operator">=</span> <span class="token number">4</span>
y <span class="token operator">=</span> <span class="token number">5</span>
t <span class="token operator">=</span> x
x <span class="token operator">=</span> y
y <span class="token operator">=</span> t

<span class="token comment"># 封装和解构，交换</span>
x <span class="token operator">=</span> <span class="token number">10</span>
y <span class="token operator">=</span> <span class="token number">11</span>
x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单解构" tabindex="-1"><a class="header-anchor" href="#简单解构" aria-hidden="true">#</a> 简单解构</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 左右个数相同  ,必须相等</span>
a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>
a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span>
a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token comment"># 非线性结构</span>
a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token comment"># 非线性结构也可以解构</span>
<span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span>
<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="剩余变量解构" tabindex="-1"><a class="header-anchor" href="#剩余变量解构" aria-hidden="true">#</a> 剩余变量解构</h3><p>在 Python3.0 中增加了剩余变量解构（rest）。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">,</span> <span class="token operator">*</span>rest<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">,</span> rest<span class="token punctuation">)</span> <span class="token comment"># &lt;class &#39;list&#39;&gt; [2, 3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标识符 rest 将尽可能收集剩余的数据组成一个列表。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">,</span> <span class="token operator">*</span>_<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token comment"># 在IPython中实验，_是最后一个输出值，这里将把它覆盖</span>
_<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token comment"># 第一个_是什么</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment"># 是什么</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token comment"># 第二个_是什么</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_ 是合法的标识符，这里它没有什么可读性，它在这里的作用就是表示不关心这个变量的值，我不想要。有人把它称作 丢弃(Throwaway)变量。</p><h2 id="线性数据结构" tabindex="-1"><a class="header-anchor" href="#线性数据结构" aria-hidden="true">#</a> 线性数据结构</h2><p>线性表</p><ul><li>线性表（简称表），是一种抽象的数学概念，是一组元素的序列的抽象，它由有穷个元素组成（0 个或任意个）</li><li>顺序表：使用一大块连续的内存顺序存储表中的元素，这样实现的表称为顺序表，或称连续表 <ul><li>在顺序表中，元素的关系使用顺序表的存储顺序自然地表示</li></ul></li><li>链接表：在存储空间中将分散存储的元素链接起来，这种实现称为链接表，简称链表</li></ul><p>列表如同地铁站排好的队伍，有序，可以插队、离队，可以索引。</p><p>链表如同操场上手拉手的小朋友，有序但排列随意。或者可以想象成一串带线的珠子，随意盘放在桌上。也可以离队、插队，也可以索引。</p>`,27),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","type-of-data.html.vue"]]);export{k as default};
