import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as n,e as i}from"./app-1a5afd71.js";const s={},a=i(`<p>用于显示各种网络相关信息，如网络连接，路由表，接口状态 (Interface Statistics)，masquerade 连接，多播成员 (Multicast Memberships) 等等。</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><p>netstat [-acCeFghilMnNoprstuvVwx]</p><h2 id="选项" tabindex="-1"><a class="header-anchor" href="#选项" aria-hidden="true">#</a> 选项</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-a   或–all                           显示所有连线中的Socket
-c   或–continuous               持续列出网络状态
-h  或–help                         在线帮助
-l  或–listening                     显示监控中的服务器的Socket
-n  或–numeric                    不解析主机名
-t  或–tcp                            显示TCP 传输协议的连线状况
-u或–udp                            显示UDP传输协议的连线状况
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：LISTEN和LISTENING的状态只有用-a或者-l才能看到</p><h2 id="网络连接状态详解" tabindex="-1"><a class="header-anchor" href="#网络连接状态详解" aria-hidden="true">#</a> 网络连接状态详解</h2><p>共有12中可能的状态，前面11种是按照TCP连接建立的三次握手和TCP连接断开的四次挥手过程来描述的。 1)、LISTEN:首先服务端需要打开一个socket进行监听，状态为LISTEN./* The socket is listening for incoming connections. 侦听来自远方TCP端口的连接请求 */</p><p>2)、 SYN_SENT:客户端通过应用程序调用connect进行active open.于是客户端tcp发送一个SYN以请求建立一个连接.之后状态置为SYN_SENT./*The socket is actively attempting to establish a connection. 在发送连接请求后等待匹配的连接请求 */</p><p>3)、 SYN_RECV:服务端应发出ACK确认客户端的 SYN,同时自己向客户端发送一个SYN. 之后状态置为SYN_RECV/* A connection request has been received from the network. 在收到和发送一个连接请求后等待对连接请求的确认 */</p><p>4)、ESTABLISHED: 代表一个打开的连接，双方可以进行或已经在数据交互了。/* The socket has an established connection. 代表一个打开的连接，数据可以传送给用户 */</p><p>5)、 FIN_WAIT1:主动关闭(active close)端应用程序调用close，于是其TCP发出FIN请求主动关闭连接，之后进入FIN_WAIT1状态./* The socket is closed, and the connection is shutting down. 等待远程TCP的连接中断请求，或先前的连接中断请求的确认 */</p><p>6)、CLOSE_WAIT:被动关闭(passive close)端TCP接到FIN后，就发出ACK以回应FIN请求(它的接收也作为文件结束符传递给上层应用程序),并进入CLOSE_WAIT./* The remote end has shut down, waiting for the socket to close. 等待从本地用户发来的连接中断请求 */</p><p>7)、FIN_WAIT2:主动关闭端接到ACK后，就进入了 FIN-WAIT-2 ./* Connection is closed, and the socket is waiting for a shutdown from the remote end. 从远程TCP等待连接中断请求 */</p><p>8)、LAST_ACK:被动关闭端一段时间后，接收到文件结束符的应用程 序将调用CLOSE关闭连接。这导致它的TCP也发送一个 FIN,等待对方的ACK.就进入了LAST-ACK ./* The remote end has shut down, and the socket is closed. Waiting for acknowledgement. 等待原来发向远程TCP的连接中断请求的确认 */</p><p>9)、TIME_WAIT:在主动关闭端接收到FIN后，TCP 就发送ACK包，并进入TIME-WAIT状态。/* The socket is waiting after close to handle packets still in the network.等待足够的时间以确保远程TCP接收到连接中断请求的确认 */</p><p>10)、CLOSING: 比较少见./* Both sockets are shut down but we still don’t have all our data sent. 等待远程TCP对连接中断的确认 */</p><p>11)、CLOSED: 被动关闭端在接受到ACK包后，就进入了closed的状态。连接结束./* The socket is not being used. 没有任何连接状态 */</p><p>12)、UNKNOWN: 未知的Socket状态。/* The state of the socket is unknown. */</p><p>SYN: (同步序列编号,Synchronize Sequence Numbers)该标志仅在三次握手建立TCP连接时有效。表示一个新的TCP连接请求。 ACK: (确认编号,Acknowledgement Number)是对TCP请求的确认标志,同时提示对端系统已经成功接收所有数据。 FIN: (结束标志,FINish)用来结束一个TCP回话.但对应端口仍处于开放状态,准备接收后续数据。</p><h2 id="常用实例" tabindex="-1"><a class="header-anchor" href="#常用实例" aria-hidden="true">#</a> 常用实例</h2><p>1） 查看TCP的连接状态</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>netstat -natlp | awk &#39;{print $6}&#39; | sort | uniq -c |sort -rn
netstat -n | awk &#39;/^tcp/ {++S[$NF]};END {for(a in S) print a,S[a]}&#39;
netstat -n | awk &#39;/^tcp/ {print $NF}&#39; | sort |uniq -c | sort -rn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2） 查找请求数较多的前20个IP（常用于查找攻来源）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>netstat -anpl | grep 80 | grep tcp | awk &#39;{print $5}&#39; | awk -F: &#39;{print $1}&#39; | sort | uniq -c | sort -nr | head -20
netstat -ant | awk &#39;/:80/{split($5,ip,&quot;:&quot;)&#39;;++A[ip[1]]}END{for(i in A) print A[i],i}&#39; | sort -rn |head -20 
tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F&quot;.&quot; &#39;{print $1&quot;.&quot;$2&quot;.&quot;$3&quot;.&quot;$4}&#39; | sort | uniq -c | sort -nr | head -20  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),o=[a];function c(r,d){return t(),n("div",null,o)}const u=e(s,[["render",c],["__file","每天一个linux命令（54）-netstat.html.vue"]]);export{u as default};
