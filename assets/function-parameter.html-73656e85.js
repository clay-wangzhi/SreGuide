import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-f1a45f61.js";const p={},t=e(`<h1 id="_4-2-函数参数" tabindex="-1"><a class="header-anchor" href="#_4-2-函数参数" aria-hidden="true">#</a> 4.2 函数参数</h1><p>函数在定义是要定义好形式参数，调用时也提供足够的实际参数，一般来说，形参和实参个数要一致（可变参数除外）。</p><h2 id="实参传参方式" tabindex="-1"><a class="header-anchor" href="#实参传参方式" aria-hidden="true">#</a> 实参传参方式</h2><p>1、位置传参</p><p>定义时def f(x, y, z)， 调用使用 f(1, 3, 5)，按照参数定义顺序传入实参</p><p>2、关键字传参</p><p>定义时def f(x, y, z)，调用使用 f(x=1, y=3, z=5)，使用形参的名字来传入实参的方式，如果使用了形参名字，那么传参顺序就可和定义顺序不同</p><p>要求位置参数必须在关键字参数之前传入，位置参数是按位置对应的</p><blockquote><p>切记：传参指的是调用时传入实参，就2种方式。</p></blockquote><p>下面讲的都是形参定义。</p><h2 id="形参" tabindex="-1"><a class="header-anchor" href="#形参" aria-hidden="true">#</a> 形参</h2><h3 id="形参缺省值" tabindex="-1"><a class="header-anchor" href="#形参缺省值" aria-hidden="true">#</a> 形参缺省值</h3><p>缺省值也称为默认值，可以在函数定义时，为形参增加一个缺省值。其作用：</p><ul><li>参数的默认值可以在未传入足够的实参的时候，对没有给定的参数赋值为默认值</li><li>参数非常多的时候，并不需要用户每次都输入所有的参数，简化函数调用</li></ul><h3 id="可变参数" tabindex="-1"><a class="header-anchor" href="#可变参数" aria-hidden="true">#</a> 可变参数</h3><p>需求：写一个函数，可以对多个数累加求和</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span class="token punctuation">:</span>
	s <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> x <span class="token keyword">in</span> iterable<span class="token punctuation">:</span>
		s <span class="token operator">+=</span> x
	<span class="token keyword">return</span> s

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例，传入可迭代对象，并累加每一个元素。</p><p>也可以使用可变参数完成上面的函数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">*</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> x <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
		<span class="token builtin">sum</span> <span class="token operator">+=</span> x
	<span class="token keyword">return</span> <span class="token builtin">sum</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、可变位置参数</p><ul><li>在形参前使用 * 表示该形参是可变位置参数，可以接受多个实参</li><li>它将收集来的实参组织到一个 tuple 中</li></ul><p>2、可变关键字参数</p><ul><li>在形参前使用 ** 表示该形参是可变关键字参数，可以接受多个关键字参数</li><li>它将收集来的实参的名称和值，组织到一个dict中</li></ul><p>总结：</p><ul><li>有可变位置参数和可变关键字参数</li><li>可变位置参数在形参前使用一个星号*</li><li>可变关键字参数在形参前使用两个星号**</li><li>可变位置参数和可变关键字参数都可以收集若干个实参，可变位置参数收集形成一个tuple，可变关键字参数收集形成一个dict</li><li>混合使用参数的时候，普通参数需要放到参数列表前面，可变参数要放到参数列表的后面，可变位置参数需要在可变关键字参数之前</li></ul><h3 id="keyword-only参数" tabindex="-1"><a class="header-anchor" href="#keyword-only参数" aria-hidden="true">#</a> keyword-only参数</h3><p>在Python3之后，新增了keyword-only参数。</p><p>keyword-only参数：在形参定义时，在一个*星号之后，或一个可变位置参数之后，出现的普通参数，就已经不是普通的参数了，称为keyword-only参数。</p><p>keyword-only参数，言下之意就是这个参数必须采用关键字传参。</p><h3 id="positional-only参数" tabindex="-1"><a class="header-anchor" href="#positional-only参数" aria-hidden="true">#</a> positional-only参数</h3><p>Python 3.8 开始，增加了最后一种形参类型的定义：Positional-only参数。（2019年10月发布3.8.0）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
fn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
fn<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># 错误，仅位置参数，不可以使用关键字传参</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数规则" tabindex="-1"><a class="header-anchor" href="#参数规则" aria-hidden="true">#</a> 参数规则</h3><p>参数列表参数一般顺序是：positional-only参数、普通参数、缺省参数、可变位置参数、keyword-only参数（可带缺省值）、可变关键字参数。 注意：</p><ul><li>代码应该易读易懂，而不是为难别人</li><li>请按照书写习惯定义函数参数</li><li>定义最常用参数为普通参数，可不提供缺省值，必须由用户提供。注意这些参数的顺序，最常用的先定义</li><li>将必须使用名称的才能使用的参数，定义为keyword-only参数，要求必须使用关键字传参</li><li>如果函数有很多参数，无法逐一定义，可使用可变参数。如果需要知道这些参数的意义，则使用可变关键字参数收集</li></ul><h3 id="参数解构" tabindex="-1"><a class="header-anchor" href="#参数解构" aria-hidden="true">#</a> 参数解构</h3><p>参数解构：</p><ul><li>在给函数提供实参的时候，可以在可迭代对象前使用 * 或者 ** 来进行结构的解构，提取出其中所有元素作为函数的实参</li><li>使用 * 解构成位置传参</li><li>使用 ** 解构成关键字传参</li><li>提取出来的元素数目要和参数的要求匹配</li></ul>`,39),l=[t];function o(i,c){return s(),a("div",null,l)}const d=n(p,[["render",o],["__file","function-parameter.html.vue"]]);export{d as default};
