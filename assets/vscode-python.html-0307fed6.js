import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as i,c as r,b as o,d as e,e as a,a as t}from"./app-4800435f.js";const d={},c=t('<h1 id="_1-4-使用-vscode-打造-python-开发环境" tabindex="-1"><a class="header-anchor" href="#_1-4-使用-vscode-打造-python-开发环境" aria-hidden="true">#</a> 1.4 使用 vscode 打造 python 开发环境</h1><h2 id="_1-软件准备" tabindex="-1"><a class="header-anchor" href="#_1-软件准备" aria-hidden="true">#</a> 1 软件准备</h2><p>既然是在 VS Code 中进行 Python 环境配置，在配置之前需要安装好 Python 和 VS Code。</p><h3 id="_1-1-python-安装" tabindex="-1"><a class="header-anchor" href="#_1-1-python-安装" aria-hidden="true">#</a> 1.1 Python 安装</h3>',4),l={href:"https://www.python.org/downloads/release",target:"_blank",rel:"noopener noreferrer"},h=o("code",null,"Anaconda",-1),g=t(`<p>注意区分64位还是32位的。</p><p>安装python的时候，建议将python添加到path环境变量的复选框勾上。</p><p><code>Anaconda</code> 是一个开源的 Python 发行版本，其包含了 <code>conda</code>、Python 等 100 多个科学包及其依赖项。</p><p><code>Anaconda</code> 官方网站下载地址如下：</p><p>https://www.anaconda.com/products/individual</p><p>在 编写此文时，Anaconda 对应的 Python 版本是 Python 3.8，大家可以下载跟电脑系统对应的版本进行安装。</p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20210622103707557.png" alt="image-20210622103707557"></p><h3 id="_1-2-vs-code-安装" tabindex="-1"><a class="header-anchor" href="#_1-2-vs-code-安装" aria-hidden="true">#</a> 1.2 VS Code 安装</h3><p>关于 VS Code 安装，在微软官方网站：https://code.visualstudio.com/ 提供免费下载，VS Code 支持 Windows , Linux , Mac OS 三种操作系统，建议去官方下载，不要在第三方软件下载网站下载，第三方软件下载站的猫腻太多了。</p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20210622103815924.png" alt="image-20210622103815924"></p><h2 id="_2-python-环境配置" tabindex="-1"><a class="header-anchor" href="#_2-python-环境配置" aria-hidden="true">#</a> 2 Python 环境配置</h2><h3 id="_2-1-安装-python-相关插件" tabindex="-1"><a class="header-anchor" href="#_2-1-安装-python-相关插件" aria-hidden="true">#</a> 2.1 安装 Python 相关插件</h3><p><strong>Python插件</strong></p><p>在 VS Code 中配置 Python 环境，第一个要安装的插件，就是 <code>Python</code> 插件。</p><p><code>Python</code> 插件的全称是 <code>Python extension for Visual Studio Code</code>，它是一个 Visual Studio Code 扩展，具有对 Python 语言的丰富支持（对于该语言的所有受支持版本：&gt; = 3.6），包括诸如 IntelliSense，linting，调试，代码导航，代码格式，Jupyter Notebook 支持，重构，变量之类的功能资源管理器，测试资源管理器，代码段等等！</p><p><strong>代码补全插件 Pylance</strong></p><p><code>Pylance</code> 是微软推出的一个快速而且功能丰富的Python语言扩展。<code>Pylance</code> 于 2020年7月发布，目前在 VS Code 市场中，安装量已有 60多万，足见其关注度。</p><p><code>Pylance</code> 主要有如下特性：</p><ul><li>Docstrings</li><li>参数提示</li><li>自动导入</li><li>代码补全</li><li>代码诊断</li><li>引用和跳转</li><li>代码大纲</li><li>类型检查</li><li>支持多工作区</li><li>带有类型信息的签名帮助</li><li>兼容 IntelliCode 和 Jupyter notebook</li></ul><p>需要运行 Python 程序时，可以在程序文件（<code>py文件</code>）里右键，选择 <code>Run Python File in Terminal</code> 来运行程序，或者 点击右上角的绿色三角形来运行程序。</p><p><strong>Jupyter Notebook 支持插件 Jupyter</strong></p><p>众所周知，python 代码，除了通常使用的 <code>.py</code> 文件外，对于数据科学而言, Jupyter Notebook 也是大家的重要选项，因此，VS Code 中也提供了 Jupyter Notebook 的支持插件，在 VS Code 扩展市场中的名称是 <code>Jupyter</code></p><h3 id="_2-2-自动格式化代码配置" tabindex="-1"><a class="header-anchor" href="#_2-2-自动格式化代码配置" aria-hidden="true">#</a> 2.2 自动格式化代码配置</h3><p>Yapf 是谷歌开源的一个用于格式化 Python 代码的工具，可以一键美化代码。支持两种规范：<code>PEP8</code> 和 <code>Google Style</code> 。</p><p>在 VS Code 中使用 <code>yapf</code> 需要先安装该工具，步骤如下：</p><p><strong>step 1：</strong> 打开终端,输入 &quot;pip install yapf&quot;, 安装 <code>yapf</code> ，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> yapf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>step 2：</strong> 在设置中设置使用 <code>yapf</code>，具体设置过程如下：</p><p>在 VS Code 左下角点击设置按钮，选择 “Settings”，如下：</p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20210622111313843.png" alt="image-20210622111313843"></p><p>在下面界面的右上角点击箭头所示，转到 <code>settings.json</code></p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20210622111420975.png" alt="image-20210622111420975"></p><p>在 <code>settings.json</code> 里进行设置 &quot;python.formatting.provider&quot;: &quot;yapf&quot;， 图示如下：</p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20210622111528360.png" alt="image-20210622111528360"></p><p><strong>step 3：</strong> 完成上述设置后，就可以对代码格式进行自动格式化了，快捷键是 Alt+Shift+F 。</p><h2 id="_3-为项目运行时指定特定的python解释器" tabindex="-1"><a class="header-anchor" href="#_3-为项目运行时指定特定的python解释器" aria-hidden="true">#</a> 3 为项目运行时指定特定的python解释器</h2>`,36),m={href:"https://clay-wangzhi.com/code/python/python-virtualenv/#visual-studio-code",target:"_blank",rel:"noopener noreferrer"},y=t(`<h2 id="_4-vscode利用远程服务器环境调试项目" tabindex="-1"><a class="header-anchor" href="#_4-vscode利用远程服务器环境调试项目" aria-hidden="true">#</a> 4 vscode利用远程服务器环境调试项目</h2><p>这个还是很好用的，可以不需要在windows服务器上安装python执行环境了。而且，python中的一些与系统操作相关的模块，windows上安装起来也非常麻烦。</p><p>**step 1：**按下快捷键Ctrl+Shift+X，进入插件管理页面，搜索并安装插件Remote Development</p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/1809823-20191118092715192-399355687.png" alt="img"></p><p>**step 2：**penssh客户端，这里提供一个使用powershell安装的方法</p><p>首先，以管理员身份打开powershell</p><p>然后，输入命令在线查询可获取的安装包 <code>Get-WindowsCapability -Online | ? Name -like &#39;OpenSSH*&#39;</code></p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/1809823-20191118094734763-1541493353.png" alt="img"></p><p>最后，如果状态显示NotPresent的话，可以使用命令进行安装，命令为Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0</p><p>提示：随着 Windows 10 2018 年 4 月更新的发布，OpenSSH 客户端已正式推出并在 Windows 10 中默认安装。</p><p>**step 3：**准备一台centos虚拟机或者ubuntu虚拟机，确保虚拟机上的ssh server服务已经开启，并允许远程连接。比如我准备的是centos7虚拟机，IP地址为192.168.247.133</p><p>**step 4：**按下快捷键ctrl+shift+p 搜索Remote-SSH:Settings，在打开的页面中，点击Edit in settings.json，在其中添加&quot;remote.SSH.showLoginTerminal&quot;: true,如下图:</p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/1809823-20191118100720720-1004879806.png" alt="img"></p><p>**step 5：**点击左下角的绿色图标，选择Remote-SSH：Connect to Host 然后点击 Configure SSH Hosts 然后选择点第一个config，默认应该是一个空白的文件，在其中添加如下的配置：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Host Centos7.5_python3
    HostName 192.168.247.133
    Port 22
    User root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/1809823-20191118101524704-1699733717.png" alt="img"></p><p>备注：其中Host后面的名称，可以随便命名，HostName后面的IP地址是准备的虚拟机IP地址，Port后跟的是ssh server服务监听的端口号，默认是22，User后跟的是远程连接的用户名，我这里使用超级用户连接。</p><p>这里补充一点：</p><p>每次连接远程服务器，打开项目都要输入一次密码，是否很烦？如果有人觉得烦的话，可以先在本地windows系统和远程服务器之间做好ssh免密登陆，然后在上面这个config文件中，在User配置下一行（缩进和User要一致），添加IdentityFile C:\\Users....ssh\\id_rsa即可，其中IdentityFile参数后面跟的是windows上的rsa私钥文件。</p><p>**step 6：**点击vscode左边栏的远程连接图标，如下：</p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/1809823-20191118101908730-1174731395.png" alt="img"></p><p>**step 7：**点击配置后的远程虚拟机名称旁边的那个按钮，输入密码进行登陆到服务器上，如下：</p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/1809823-20191118102152158-767875613.png" alt="img"></p><p>备注，如果vscode初次连接这台虚拟机的话，那么需要等待几分钟，因为vscode要做一些初始化工作。</p><p>**step 8：**连上虚拟机后，可以通过下图中标识的顺序打开远程服务器上的项目，当然每次打开项目都是需要再次输入密码的。这也是为了安全考虑。</p><p>在打开的项目中新建文件，删除文件，修改文件等操作，不需要再次输入密码。</p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/1809823-20191118103510878-1427529685.png" alt="img"></p><p>**step 9：**运行项目或测试脚本的方法</p><p>感觉这个功能，在一定程度上，都可以代替secure crt或xshell远程连接工具和ftp上传下载客户端了。很强大。</p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/1809823-20191118104120944-788931545.png" alt="img"></p><p>补充：</p><p>没有语法检查，代码自动提示和补全功能，开发真的是一个很难受的事情，那么怎么在远程服务器上使用这些功能呢？下面就是补全这一点的方法：</p><p>首先：按下快捷键Ctrl+Shift+X，进入插件管理页面，搜索python，然后，点击Install in SSH:Centos7.5_python3，如下图：</p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/1809823-20191118114031066-1405256168.png" alt="img"></p><p>然后：在打开的项目中，生成launch.json和settings.json这两个配置文件，方法在最上面，和配置windows本地开发环境一样</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2><ul><li>https://www.cnblogs.com/DesignerA/p/11604200.html</li><li>https://mp.weixin.qq.com/s/oOlPoCE0BKpmxADUXfCsQg</li></ul>`,37);function u(b,w){const n=s("ExternalLinkIcon");return i(),r("div",null,[c,o("p",null,[e("关于 Python 的安装，可以从 "),o("a",l,[e("Python 官网下载"),a(n)]),e(" Python 进行安装，也可以通过 "),h,e(" 来安装。")]),g,o("p",null,[o("a",m,[e("详细配置"),a(n)])]),y])}const f=p(d,[["render",u],["__file","vscode-python.html.vue"]]);export{f as default};
