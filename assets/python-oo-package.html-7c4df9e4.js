import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as p}from"./app-3484c079.js";const t={},e=p(`<h1 id="_9-1-类、实例和封装" tabindex="-1"><a class="header-anchor" href="#_9-1-类、实例和封装" aria-hidden="true">#</a> 9.1 类、实例和封装</h1><h2 id="封装" tabindex="-1"><a class="header-anchor" href="#封装" aria-hidden="true">#</a> 封装</h2><p>封装就是定义类，将属性和操作组织在类中</p><h3 id="python-类定义" tabindex="-1"><a class="header-anchor" href="#python-类定义" aria-hidden="true">#</a> Python 类定义</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">:</span>
    语句块
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>必须使用 class 关键字</li><li>类名强烈建议使用<strong>大驼峰</strong>命名方式，即每个单词首字母大写。其本质就是一个标识符</li><li>类定义完成后，就产生了一个<strong>类对象</strong>，绑定到了标识符 ClassName 上</li></ol><p>举例</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;A Example Class&quot;&quot;&quot;</span>
    x <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span> <span class="token comment"># 类属性</span>
    
    <span class="token keyword">def</span> <span class="token function">showme</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 方法，也是属性</span>
        <span class="token keyword">return</span> __class__<span class="token punctuation">.</span>__name__ <span class="token comment"># 返回类的名称</span>
  
<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span> <span class="token comment"># 类名字</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span> <span class="token comment"># 类文档</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>showme<span class="token punctuation">)</span> <span class="token comment"># 类属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类及类属性" tabindex="-1"><a class="header-anchor" href="#类及类属性" aria-hidden="true">#</a> 类及类属性</h3><ul><li>类对象：类也是对象，类的定义执行后会生成一个类对象</li><li>类属性：类定义中的变量和类中定义的方法都是类的属性。上例中类 Person 的 x 和 showme</li><li>类变量：属性也是标识符，也是变量。上例中类 Person 的 x 和 showme</li></ul><p>Person 中， x、foo 都是类的属性，<code>__name__</code>、<code>__doc__</code>是类的特殊属性</p><p>showme 方法是类的属性，如果吃是人类的方法，但是每一个具体的人才能吃东西，也就是说吃是人的实例能调用的方法。</p><p>showme 是方法method，本质上就是普通的函数对象 function，它一般要求至少有一个参数。第一个形式参数可以是 self（self 只是个惯用标识符，可以换名字），这个参数位置就留给了 self。</p><p><strong>self 指代当前实例本身</strong></p><h2 id="实例化" tabindex="-1"><a class="header-anchor" href="#实例化" aria-hidden="true">#</a> 实例化</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 实例化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用上面的语法，在类对象名称后面加上一个括号，就调用类的实例化方法，完成实例化。 实例化就真正创建一个改类的对象（实例 instance）。例如</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 不同的实例</span>
jerry <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 不用的实例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 tom、jerry 都是 Person 类的实例，通过实例化生成了2个不同的实例。</p><p>通常，每次实例化后获得的实例，是不同的实例，即使是使用同样的参数实例化，也得到不一样的对象。</p><p>Python 类实例化后，会自动调用<code>__init__</code>方法。这个方式第一个形式参数必须留给 self, 其他形式参数随意。</p><p><strong>构造的2个阶段</strong></p><p>确切地讲，<code>tom = Person()</code>过程分为2个阶段：实例化和初始化。</p><p><strong><code>__init__</code>方法</strong></p><p>有些人把 Python 的<code>__init__</code>方法称为构造方法或构造器。</p><p>Person() 实例化后，要初始化，要调用的是<code>__init__(self)</code>方法，可以不定义，如果没有定义会在实例化后<strong>隐式</strong>调用其父类的。</p><p>作用：对实例进行初始化</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;init~~~~&#39;</span><span class="token punctuation">)</span>
     
<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token comment"># 不会调用__init__</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 会调用__init__</span>
tom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 会调用__init__</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化函数可以多个参数，请注意第一位置必须是 self， 例如<code>__init__(self, name, age)</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;init~~~~&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age
    
    <span class="token keyword">def</span> <span class="token function">showage</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{} is {}.&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>
       
   
tom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>name<span class="token punctuation">,</span> tom<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
tom<span class="token punctuation">.</span>showage<span class="token punctuation">(</span><span class="token punctuation">)</span>
jerry <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;Jerry&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>jerry<span class="token punctuation">.</span>name<span class="token punctuation">,</span> jerry<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
jerry<span class="token punctuation">.</span>age <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>jerry<span class="token punctuation">.</span>name<span class="token punctuation">,</span> jerry<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
jerry<span class="token punctuation">.</span>showage<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意： <code>__init__()</code>方法不能有返回值，也就是只能是 return None</p></blockquote><p><strong>实例对象 instance</strong></p><p>上例中，类 Person 实例化后获得一个该类的实例，就是实例对象</p><p><code>__init__</code>方法的第一参数 self 就是指代某一个实例自身。</p><p>执行<code>Person(&#39;Tom&#39;, 20)</code>时，调用<code>__init__()</code>方法。self.name 就是 tom 对象的 name，name 是保存在了 tom 对象上，而不是 Person 类上，称为 实例变量。</p><p>类实例化后，得到一个实例对象，调用方法时采用 tomc.showage() 的方式，但是 showage 方法的形参需要一个形参 self, 我们并没有提供，并没有报错，为什么？</p><p><strong>方法绑定</strong></p><p>采用 tom.showage() 的方式调用，实例对象会绑定到方法上。这个 self 就是 tom，指向 当前调用改方法的实例本身。</p><p>tom.showage() 调用时，会把方法的调用者 tom 实例作为第一参数 self 的实参输入<code>__init__()</code>方法。</p><p><strong>self</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;self in init = {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">showme</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;self in showme = {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

tom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;tom = {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>
tom<span class="token punctuation">.</span>showme<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 打印结果为</span>
<span class="token number">1</span> self <span class="token keyword">in</span> init <span class="token operator">=</span> <span class="token number">2921507816448</span>
<span class="token number">3</span> tom <span class="token operator">=</span> <span class="token number">2921507816448</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
<span class="token number">2</span> self <span class="token keyword">in</span> showme <span class="token operator">=</span> <span class="token number">2921507816448</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例说明，self 就是调用者， 就是 tom 对应的实例对象。</p><p>self 这个形参标识符的名字只是一个惯例，它可以修改，但是请不要修改，否则影响代码的可读性。</p><h3 id="实例变量和类变量" tabindex="-1"><a class="header-anchor" href="#实例变量和类变量" aria-hidden="true">#</a> 实例变量和类变量</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    age <span class="token operator">=</span> <span class="token number">3</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name

tom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span>
jerry <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;Jerry&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>name<span class="token punctuation">,</span> tom<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>jerry<span class="token punctuation">.</span>name<span class="token punctuation">,</span> jerry<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>age<span class="token punctuation">)</span>

Person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>age<span class="token punctuation">,</span> tom<span class="token punctuation">.</span>age<span class="token punctuation">,</span> jerry<span class="token punctuation">.</span>age<span class="token punctuation">)</span>

<span class="token comment"># 运行结果</span>
tom <span class="token number">3</span>
Jerry <span class="token number">3</span>
<span class="token number">3</span>
<span class="token number">30</span> <span class="token number">30</span> <span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>实例变量是每一个实例自己的变量，是自己独有的</li><li>类变量是类的变量，是类的所有实例共享的属性或方法</li></ul><h3 id="特殊属性" tabindex="-1"><a class="header-anchor" href="#特殊属性" aria-hidden="true">#</a> 特殊属性</h3><table><thead><tr><th>特殊属性</th><th>含义</th></tr></thead><tbody><tr><td><code>__name__</code></td><td>对象名</td></tr><tr><td><code>__class__</code></td><td>对象的类型</td></tr><tr><td><code>__dict__</code></td><td>对象的属性的字典</td></tr><tr><td><code>__qualname__</code></td><td>类的限定名</td></tr></tbody></table><blockquote><p>注意：Python中每一种对象都拥有不同的属性。函数是对象，类是对象，类的实例也是对象。</p></blockquote><h3 id="属性本质" tabindex="-1"><a class="header-anchor" href="#属性本质" aria-hidden="true">#</a> 属性本质</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    age <span class="token operator">=</span> <span class="token number">3</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;----类----&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>__class__<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">,</span> Person<span class="token punctuation">.</span>__class__ <span class="token keyword">is</span> <span class="token builtin">type</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 类型</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;\\n\\n&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 类字典</span>

tom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;----通过实例访问类----&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>__class__<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token punctuation">,</span> tom<span class="token punctuation">.</span>__class__ <span class="token keyword">is</span> <span class="token builtin">type</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;----实例自己的属性----&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 实例的字典</span>

<span class="token comment"># 结果为</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>类<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;type&#39;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;type&#39;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;__dict__&#39;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>attribute <span class="token string">&#39;__dict__&#39;</span> of <span class="token string">&#39;Person&#39;</span> objects<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;__doc__&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;__init__&#39;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>function Person<span class="token punctuation">.</span>__init__ at <span class="token number">0x000001E279A8BB80</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;__module__&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;__weakref__&#39;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>attribute <span class="token string">&#39;__weakref__&#39;</span> of <span class="token string">&#39;Person&#39;</span> objects<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>通过实例访问类<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;__main__.Person&#39;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;__main__.Person&#39;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span>
Person Person
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;__dict__&#39;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>attribute <span class="token string">&#39;__dict__&#39;</span> of <span class="token string">&#39;Person&#39;</span> objects<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;__doc__&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;__init__&#39;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>function Person<span class="token punctuation">.</span>__init__ at <span class="token number">0x000001E279A8BB80</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;__module__&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;__weakref__&#39;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>attribute <span class="token string">&#39;__weakref__&#39;</span> of <span class="token string">&#39;Person&#39;</span> objects<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>实例自己的属性<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中，可以看到类属性保存在类的<code>__dict__</code>中，实例属性保存在实例的<code>__dict__</code>中，如果从实例访问类的属性，也可以借助<code>__class__</code>找到所属的类，再通过类来访问类属性，例如<code>tom.__class__.age</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    age <span class="token operator">=</span> <span class="token number">3</span>
    height <span class="token operator">=</span> <span class="token number">170</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

tom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 实例化、初始化</span>
jerry <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;Jerry&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>

Person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Person<span class="token punctuation">.</span>age<span class="token punctuation">,</span> tom<span class="token punctuation">.</span>age<span class="token punctuation">,</span> jerry<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment"># 3, 18, 20</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> Person<span class="token punctuation">.</span>height<span class="token punctuation">,</span> tom<span class="token punctuation">.</span>height<span class="token punctuation">,</span> jerry<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token comment"># 170, 170, 170</span>
jerry<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">175</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> Person<span class="token punctuation">.</span>height<span class="token punctuation">,</span> tom<span class="token punctuation">.</span>height<span class="token punctuation">,</span> jerry<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token comment"># 170, 170, 175</span>

tom<span class="token punctuation">.</span>height <span class="token operator">+=</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Person<span class="token punctuation">.</span>height<span class="token punctuation">,</span> tom<span class="token punctuation">.</span>height<span class="token punctuation">,</span> jerry<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token comment"># 170, 180, 175</span>

Person<span class="token punctuation">.</span>height <span class="token operator">+=</span> <span class="token number">15</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Person<span class="token punctuation">.</span>height<span class="token punctuation">,</span> tom<span class="token punctuation">.</span>height<span class="token punctuation">,</span> jerry<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token comment"># 185, 180, 175</span>

Person<span class="token punctuation">.</span>weight <span class="token operator">=</span> <span class="token number">70</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> Person<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> tom<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> jerry<span class="token punctuation">.</span>weight<span class="token punctuation">)</span> <span class="token comment"># 70, 70, 70</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> tom<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span><span class="token string">&#39;height&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 180</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> tom<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span><span class="token string">&#39;weight&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong></p><ul><li>是类的，也是这个类所有实例的，其 实例都可以访问到</li><li>是实例的，就是这个实例自己的，通过类访问不到</li><li>类变量是属于类的变量，这个类的所有实例可以共享这个变量</li></ul><p>对象（实例或类）可以动态的给自己增加一个属性（赋值即定义一个新属性）。这也是动态语言的特性。</p><p><code>实例.__dict__[变量名]</code>和<code>实例.变量</code>都可以访问到实例自己的属性（注意这两种访问是有本质区别的）</p><p>对实例访问来说，实例的同名变量会<strong>隐藏</strong>掉类变量，或者说是覆盖了这个类变量。但是注意类变量还在那里，并没有真正被覆盖。</p><p><strong>实例属性的查找顺序</strong></p><p>指的是实例使用<code>.点号</code>来访问属性，会先找自己的<code>__dict__</code>，如果没有，然后通过属性<code>__class__</code>找到自己的类，再去类的<code>__dict__</code>中找</p><blockquote><p>注意：如果实例使用<code>__dict__[变量名]</code>访问变量，将不会按照上面的查找顺序找变量了，这是指明使用字典的 key 查找，不是属性查找</p></blockquote><p>一般来说，<strong>类变量可使用全大写来命名</strong></p><h3 id="类方法和静态方法" tabindex="-1"><a class="header-anchor" href="#类方法和静态方法" aria-hidden="true">#</a> 类方法和静态方法</h3><p>前面的例子中定义的<code>__init__</code>等方法，这些方法本身都是类的属性，第一个参数必须是 self，而 self 必须指向一个对象，也就是类实例化之后，由实例来调用这个方法。</p><p><strong>普通函数</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">normal_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;普通的函数&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;方法&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 调用</span>
Person<span class="token punctuation">.</span>normal_function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 正常调用</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>normal_function<span class="token punctuation">)</span> <span class="token comment"># 可以， 没调用</span>
<span class="token comment"># print(Person().normal_function()) # 不可以，多传了一个参数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span> <span class="token comment"># </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Person.normal_function()</p><p>可以放在类中定义，因为这个方法只是被 Person 这个类管理的一个普通的函数， normal_function 是 Person 的一个属性而已。</p><p>由于 normal_function 在定义的时候没有指定形参 self，不能用 Person().normal_method() 调用。 原因是，Person() 是实例，实例调用的时候，由于做了实例绑定，那么就需要 normal_method 的第一个形参来接受绑定的实例。</p><blockquote><p>注意：虽然语法是对的，但是，没人会这么用，也就是<strong>禁止</strong>这么写</p></blockquote><p><strong>类方法</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@classmethod</span>
    <span class="token keyword">def</span> <span class="token function">class_method</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;类方法&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{0}&#39;s name = {0.__name__}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">)</span>
        cls<span class="token punctuation">.</span>HEIGHT <span class="token operator">=</span> <span class="token number">170</span>

<span class="token comment"># 调用</span>
Person<span class="token punctuation">.</span>class_method<span class="token punctuation">(</span><span class="token punctuation">)</span>
Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>class_method<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在类定义中，使用 @classmethod 装饰器修饰的方法</li><li>必须至少有一个参数，且第一个参数留给了 cls, cls 指代调用者即类对象自身</li><li>cls 这个标识符可以是任意合法名称，但是为了易读，请不要修改</li><li>通过 cls 可以直接操作类的属性</li></ul><p>通过类、实例都可以非常方便地调用类方法。 classmethod 装饰器 内存 将类或提取实例的 类 注入到类方法的第一个参数中。</p><blockquote><p>注意：无法通过 cls 操作类的实例</p></blockquote><p><strong>静态方法</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    HEIGHT <span class="token operator">=</span> <span class="token number">180</span>

    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">static_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;静态方法&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>HEIGHT<span class="token punctuation">)</span>

<span class="token comment"># 调用</span>
Person<span class="token punctuation">.</span>static_method<span class="token punctuation">(</span><span class="token punctuation">)</span>
Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>static_method<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在类定义中，使用 @staticmethod 装饰器修饰的方法</li><li>调用时，不会隐式的传入参数</li></ul><p>通过类、实例都可以调用静态方法，不会像普通方式、类方法那样注入参数。</p><p>静态方法，只表明这个方法属于这个名词空间。函数归在一起，方便组织管理</p><p><strong>方法的调用</strong></p><p>类可以定义这么多种方法，究竟如何调用他们？</p><p>类几乎可以调用所有内部定义的方法，但是调用普通的方法时会报错，原因是第一参数应该是累的实例。</p><p>实例也几乎可以调用所有的方法，普通的函数 的调用一般不可能出现，因为原则上不允许这么定义。</p><p>总结：</p><ul><li>类除了普通方法都可以调用</li><li>普通方法需要对象的实例作为第一参数</li><li>实例可以调用所有类中定义的方法（包括类方法、静态方法），普通方法传入实例自身，静态方法和类方法内部都要使用实例的类</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>__class__<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span>

tom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>
tom<span class="token punctuation">.</span>method<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>
Person<span class="token punctuation">.</span>method<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>

Person<span class="token punctuation">.</span>method<span class="token punctuation">(</span>tom<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>

tom<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>method<span class="token punctuation">(</span>tom<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tom.method() 调用的时候，会绑定实例，调用 method 方法是，实例 tom 会注入到 method 中，这样第一参数就满足了。</p><p>Person.method() ，使用类调用，不会有实例绑定，调用 method 方法时，就缺少了第一参数，可以手动的填入。</p><h3 id="封装总结" tabindex="-1"><a class="header-anchor" href="#封装总结" aria-hidden="true">#</a> 封装总结</h3><p>面向对象的三要素之一，封装 Encapsulation</p><p>封装</p><ul><li>将数据和操作组织到类中，即属性和方法</li><li>将数据隐藏起来，给使用者提供操作（方法）。使用者通过操作就可以获取或者修改数据。getter 和 setter</li><li>通过访问控制，暴露适当的数据和操作给用户，该隐藏的隐藏起来，例如保护成员和私有成员。</li></ul>`,93),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","python-oo-package.html.vue"]]);export{k as default};
