import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,e}from"./app-5aac8996.js";const t={},l=e(`<h1 id="第六部分-google-shell-风格指南" tabindex="-1"><a class="header-anchor" href="#第六部分-google-shell-风格指南" aria-hidden="true">#</a> 第六部分 Google Shell 风格指南</h1><h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1 背景</h2><h3 id="_1-1-使用哪一种shell" tabindex="-1"><a class="header-anchor" href="#_1-1-使用哪一种shell" aria-hidden="true">#</a> 1.1 使用哪一种Shell</h3><blockquote><p>Bash是唯一被允许执行的shell脚本语言。</p></blockquote><p>可执行文件必须以<code>#!/bin/bash</code>和最小数量的标志开始。请使<code>set</code>来设置shell的选项，使得用<code>bash &lt;script_name&gt;</code>调用你的脚本时不会破坏其功能。</p><p>限制所有的可执行shell脚本为bash使得我们安装在所有计算机中的shell语言保持一致性。</p><h3 id="_1-2-什么时候使用shell" tabindex="-1"><a class="header-anchor" href="#_1-2-什么时候使用shell" aria-hidden="true">#</a> 1.2 什么时候使用Shell</h3><blockquote><p>Shell应该仅仅被用于小功能或者简单的包装脚本。</p></blockquote><p>尽管Shell脚本不是一种开发语言，但在整个谷歌它被用于编写多种实用工具的脚本。这个风格指南更多的是认同它的使用，而不是一个建议，即它可被用于广泛部署。</p><p>以下是一些准则：</p><ul><li>如果你主要是在调用其他的工具并且做一些相对很小数据量的操作，那么使用shell来完成任务是一种可接受的选择。</li><li>如果你在乎性能，那么请选择其他工具，而不是使用shell。</li><li>如果你发现你需要使用数据而不是变量赋值（如 <code>\${PHPESTATUS}</code> ），那么你应该使用Python脚本。</li><li>如果你将要编写的脚本会超过100行，那么你可能应该使用Python来编写，而不是Shell。请记住，当脚本行数增加，尽早使用另外一种语言重写你的脚本，以避免之后花更多的时间来重写。</li></ul><h2 id="_2-shell文件和解释器调用" tabindex="-1"><a class="header-anchor" href="#_2-shell文件和解释器调用" aria-hidden="true">#</a> 2 Shell文件和解释器调用</h2><h3 id="_2-1-文件扩展名" tabindex="-1"><a class="header-anchor" href="#_2-1-文件扩展名" aria-hidden="true">#</a> 2.1 文件扩展名</h3><blockquote><p>可执行文件应该没有扩展名（强烈建议）或者使用.sh扩展名。库文件必须使用.sh作为扩展名，而且应该是不可执行的。</p></blockquote><p>当执行一个程序时，并不需要知道它是用什么语言编写的。而且shell脚本也不要求有扩展名。所以我们更喜欢可执行文件没有扩展名。</p><p>然而，对于库文件，知道其用什么语言编写的是很重要的，有时候会需要使用不同语言编写的相似的库文件。使用.sh这样特定语言后缀作为扩展名，就使得用不同语言编写的具有相同功能的库文件可以采用一样的名称。</p><h3 id="_2-2-suid-sgid" tabindex="-1"><a class="header-anchor" href="#_2-2-suid-sgid" aria-hidden="true">#</a> 2.2 SUID/SGID</h3><blockquote><p>SUID(Set User ID)和SGID(Set Group ID)在shell脚本中是被禁止的。</p></blockquote><p>shell存在太多的安全问题，以致于如果允许SUID/SGID会使得shell几乎不可能足够安全。虽然bash使得运行SUID非常困难，但在某些平台上仍然有可能运行，这就是为什么我们明确提出要禁止它。</p><p>如果你需要较高权限的访问请使用<code>sudo</code>。</p><h2 id="_3-环境" tabindex="-1"><a class="header-anchor" href="#_3-环境" aria-hidden="true">#</a> 3 环境</h2><h3 id="_3-1-stdout-vs-stderr" tabindex="-1"><a class="header-anchor" href="#_3-1-stdout-vs-stderr" aria-hidden="true">#</a> 3.1 STDOUT vs STDERR</h3><blockquote><p>所有的错误信息都应该被导向STDERR。</p></blockquote><p>这使得从实际问题中分离出正常状态变得更容易。</p><p>推荐使用类似如下函数，将错误信息和其他状态信息一起打印出来。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function-name function">err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;[<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> + <span class="token string">&#39;%Y-%m-%dT%H:%M:%S%z&#39;</span><span class="token variable">)</span></span>]: <span class="token variable">$@</span>&quot;</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token operator">!</span> do_something<span class="token punctuation">;</span><span class="token keyword">then</span>
  err <span class="token string">&quot;Unable to do_someting&quot;</span>
  <span class="token builtin class-name">exit</span> <span class="token string">&quot;<span class="token variable">\${E_DID_NOTHING}</span>&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-注释" tabindex="-1"><a class="header-anchor" href="#_4-注释" aria-hidden="true">#</a> 4 注释</h2><h3 id="_4-1-文件头" tabindex="-1"><a class="header-anchor" href="#_4-1-文件头" aria-hidden="true">#</a> 4.1 文件头</h3><blockquote><p>每个文件的开头是其文件内容的描述。</p></blockquote><p>每个文件必须包含一个顶层注释，对其内容进行简要概述。版权声明和作者信息是可选的。</p><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment">#</span>
<span class="token comment"># Perform hot backups of Oracle databases.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-功能注释" tabindex="-1"><a class="header-anchor" href="#_4-2-功能注释" aria-hidden="true">#</a> 4.2 功能注释</h3><blockquote><p>任何不是既明显又短的函数都必须被注释。任何库函数无论其长短和复杂性都必须被注释。</p></blockquote><p>其他人通过阅读注释（和帮助信息，如果有的话）就能够学会如何使用你的程序或库函数，而不需要阅读代码。</p><p>所有的函数注释应该包含：</p><ul><li>函数的描述</li><li>全局变量的使用和修改</li><li>使用的参数说明</li><li>返回值，而不是上一条命令运行后默认的退出状态</li></ul><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment">#</span>
<span class="token comment"># Perform hot backups of Oracle databases.</span>

<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">&#39;/usr/xpg4/bin:/usr/bin:/opt/csw/bin:/opt/goog/bin&#39;</span>

<span class="token comment">#######################################</span>
<span class="token comment"># Cleanup files from the backup dir</span>
<span class="token comment"># Globals:</span>
<span class="token comment">#   BACKUP_DIR</span>
<span class="token comment">#   ORACLE_SID</span>
<span class="token comment"># Arguments:</span>
<span class="token comment">#   None</span>
<span class="token comment"># Returns:</span>
<span class="token comment">#   None</span>
<span class="token comment">#######################################</span>
<span class="token function-name function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">..</span>.
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-实现部分的注释" tabindex="-1"><a class="header-anchor" href="#_4-3-实现部分的注释" aria-hidden="true">#</a> 4.3 实现部分的注释</h3><blockquote><p>注释你代码中含有技巧、不明显、有趣的或者重要的部分。</p></blockquote><p>这部分遵循谷歌代码注释的通用做法。不要注释所有代码。如果有一个复杂的算法或者你正在做一些与众不同的，放一个简单的注释。</p><h3 id="_4-4-todo注释" tabindex="-1"><a class="header-anchor" href="#_4-4-todo注释" aria-hidden="true">#</a> 4.4 TODO注释</h3><blockquote><p>使用TODO注释临时的、短期解决方案的、或者足够好但不够完美的代码。</p></blockquote><p>这与C++指南中的约定相一致。</p><p>TODOs应该包含全部大写的字符串TODO，接着是括号中你的用户名。冒号是可选的。最好在TODO条目之后加上 bug或者ticket 的序号。</p><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># TODO(mrmonkey): Handle the unlikely edge cases (bug ####)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-格式" tabindex="-1"><a class="header-anchor" href="#_5-格式" aria-hidden="true">#</a> 5 格式</h2><h3 id="_5-1-缩进" tabindex="-1"><a class="header-anchor" href="#_5-1-缩进" aria-hidden="true">#</a> 5.1 缩进</h3><blockquote><p>缩进两个空格，没有制表符。</p></blockquote><p>在代码块之间请使用空行以提升可读性。缩进为两个空格。无论你做什么，请不要使用制表符。对于已有文件，保持已有的缩进格式。</p><h3 id="_5-2-行的长度和长字符串" tabindex="-1"><a class="header-anchor" href="#_5-2-行的长度和长字符串" aria-hidden="true">#</a> 5.2 行的长度和长字符串</h3><blockquote><p>行的最大长度为80个字符。</p></blockquote><p>如果你必须写长度超过80个字符的字符串，如果可能的话，尽量使用here document或者嵌入的换行符。长度超过80个字符的文字串且不能被合理地分割，这是正常的。但强烈建议找到一个方法使其变短。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># DO use &#39;here document&#39;s</span>
<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span>END<span class="token punctuation">;</span>
I am an exceptionally long
string.
END

<span class="token comment"># Embedded newlines are ok too</span>
<span class="token assign-left variable">long_string</span><span class="token operator">=</span><span class="token string">&quot;I am an exceptionally
  long string.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-管道" tabindex="-1"><a class="header-anchor" href="#_5-3-管道" aria-hidden="true">#</a> 5.3 管道</h3><blockquote><p>如果一行容不下整个管道操作，那么请将整个管道操作分割成每行一个管段。</p></blockquote><p>如果一行容得下整个管道操作，那么请将整个管道操作写在同一行。</p><p>否则，应该将整个管道操作分割成每行一个管段，管道操作的下一部分应该将管道符放在新行并且缩进2个空格。这适用于使用管道符’|’的合并命令链以及使用’||’和’&amp;&amp;’的逻辑运算链。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># All fits on one line</span>
command1 <span class="token operator">|</span> command2

<span class="token comment"># Long commands</span>
command1 <span class="token punctuation">\\</span>
  <span class="token operator">|</span> command2 <span class="token punctuation">\\</span>
  <span class="token operator">|</span> command3 <span class="token punctuation">\\</span>
  <span class="token operator">|</span> command4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-循环" tabindex="-1"><a class="header-anchor" href="#_5-4-循环" aria-hidden="true">#</a> 5.4 循环</h3><blockquote><p>请将<code>; do</code> ,<code>; then</code>和<code>while</code>,<code>for</code>,<code>if</code>放在同一行。</p></blockquote><p>shell中的循环略有不同，但是我们遵循跟声明函数时的大括号相同的原则。也就是说，<code>; do</code>,<code>; then</code>应该和 if/for/while 放在同一行。<code>else</code>应该单独一行，结束语句应该单独一行并且跟开始语句垂直对齐。</p><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">dir</span> <span class="token keyword">in</span> <span class="token variable">\${dir_to_cleanup}</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;<span class="token variable">\${dir}</span>/<span class="token variable">\${ORACLE_SID}</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    log_date <span class="token string">&quot;Cleaning up old files in <span class="token variable">\${dir}</span>/<span class="token variable">\${ORACLE_SID}</span>&quot;</span>
	<span class="token function">rm</span> <span class="token string">&quot;<span class="token variable">\${dir}</span>/<span class="token variable">\${ORACLE_SID}</span>/&quot;</span>*
	<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$?</span>&quot;</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	  error_message
	<span class="token keyword">fi</span>
  <span class="token keyword">else</span>
    <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;<span class="token variable">\${dir}</span>/<span class="token variable">\${ORACLE_SID}</span>&quot;</span>
	<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$?</span>&quot;</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	  error_message
	<span class="token keyword">fi</span>
  <span class="token keyword">fi</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-case语句" tabindex="-1"><a class="header-anchor" href="#_5-5-case语句" aria-hidden="true">#</a> 5.5 case语句</h3><blockquote><ul><li>通过2个空格缩进可选项。</li></ul></blockquote><ul><li>在同一行可选项的模式右圆括号之后和结束符 <code>;;</code> 之前各需要一个空格。</li><li>长可选项或者多命令可选项应该被拆分成多行，模式、操作和结束符 <code>;;</code> 在不同的行。</li></ul><p>匹配表达式比<code>case</code>和<code>esac</code>缩进一级。多行操作要再缩进一级。一般情况下，不需要引用匹配表达式。模式表达式前面不应该出现左括号。避免使用 ;&amp; 和 ;;&amp; 符号。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">case</span> <span class="token string">&quot;<span class="token variable">\${expression}</span>&quot;</span> <span class="token keyword">in</span>
  a<span class="token punctuation">)</span>
    <span class="token assign-left variable">variable</span><span class="token operator">=</span><span class="token string">&quot;...&quot;</span>
	some_command <span class="token string">&quot;<span class="token variable">\${variable}</span>&quot;</span> <span class="token string">&quot;<span class="token variable">\${other_expr}</span>&quot;</span> <span class="token punctuation">..</span>.
	<span class="token punctuation">;</span><span class="token punctuation">;</span>
  absolute<span class="token punctuation">)</span>
    <span class="token assign-left variable">actions</span><span class="token operator">=</span><span class="token string">&quot;relative&quot;</span>
	another_command <span class="token string">&quot;<span class="token variable">\${actions}</span>&quot;</span> <span class="token string">&quot;<span class="token variable">\${other_expr}</span>&quot;</span> <span class="token punctuation">..</span>.
	<span class="token punctuation">;</span><span class="token punctuation">;</span>
  *<span class="token punctuation">)</span>
    error <span class="token string">&quot;Unexpected expression &#39;<span class="token variable">\${expression}</span>&quot;</span>
	<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要整个表达式可读，简单的命令可以跟模式和<code>;;</code>写在同一行。这通常适用于单字母选项的处理。当单行容不下操作时，请将模式单独放一行，然后是操作，最后结束符<code>;;</code>也单独一行。当操作在同一行时，模式的右括号之后和结束符<code>;;</code>之前请使用一个空格分隔。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">verbose</span><span class="token operator">=</span><span class="token string">&#39;false&#39;</span>
<span class="token assign-left variable">aflag</span><span class="token operator">=</span><span class="token string">&#39;&#39;</span>
<span class="token assign-left variable">bflag</span><span class="token operator">=</span><span class="token string">&#39;&#39;</span>
<span class="token assign-left variable">files</span><span class="token operator">=</span><span class="token string">&#39;&#39;</span>
<span class="token keyword">while</span> <span class="token builtin class-name">getopts</span> <span class="token string">&#39;abf:v&#39;</span> flag<span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token keyword">case</span> <span class="token string">&quot;<span class="token variable">\${flag}</span>&quot;</span> <span class="token keyword">in</span>
    a<span class="token punctuation">)</span> <span class="token assign-left variable">aflag</span><span class="token operator">=</span><span class="token string">&#39;true&#39;</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
	b<span class="token punctuation">)</span> <span class="token assign-left variable">bflag</span><span class="token operator">=</span><span class="token string">&#39;true&#39;</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
	f<span class="token punctuation">)</span> <span class="token assign-left variable">files</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${OPTARG}</span>&quot;</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
	<span class="token function">v</span><span class="token punctuation">)</span> <span class="token assign-left variable">verbose</span><span class="token operator">=</span><span class="token string">&#39;true&#39;</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
	*<span class="token punctuation">)</span> error <span class="token string">&quot;Unexpected option <span class="token variable">\${flag}</span>&quot;</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
   <span class="token keyword">esac</span>
 <span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-6-变量扩展" tabindex="-1"><a class="header-anchor" href="#_5-6-变量扩展" aria-hidden="true">#</a> 5.6 变量扩展</h3><blockquote><p>按优先级顺序：保持跟你所发现的一致；引用你的变量；推荐用<code>\${var}</code>而不是<code>$var</code>，详细解释如下。</p></blockquote><p>这些仅仅是指南，因为作为强制规定似乎饱受争议。</p><p>以下按照优先顺序列出。</p><ol><li>与现存代码中你所发现的保持一致。</li><li>引用变量参阅下面一节，引用。</li><li>除非绝对必要或者为了避免深深的困惑，否则不要用大括号将单个字符的shell特殊变量或定位变量括起来。推荐将其他所有变量用大括号括起来。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Section of recommended cases.</span>

<span class="token comment"># Preferred style for &#39;special&#39; variables:</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Positional: <span class="token variable">$1</span>&quot;</span> <span class="token string">&quot;<span class="token variable">$5</span>&quot;</span> <span class="token string">&quot;<span class="token variable">$3</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Specials: !=<span class="token variable">$!</span>, -=$-, _=<span class="token variable">$_</span>. ?=<span class="token variable">$?</span>, #=<span class="token variable">$#</span> *=<span class="token variable">$*</span> @=<span class="token variable">$@</span> \\$=<span class="token variable">$$</span> ...&quot;</span>

<span class="token comment"># Braces necessary:</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;many parameters: <span class="token variable">\${10}</span>&quot;</span>

<span class="token comment"># Braces avoiding confusion:</span>
<span class="token comment"># Output is &quot;a0b0c0&quot;</span>
<span class="token builtin class-name">set</span> -- a b c
<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">\${1}</span>0<span class="token variable">\${2}</span>0<span class="token variable">\${3}</span>0&quot;</span>

<span class="token comment"># Preferred style for other variables:</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;PATH=<span class="token variable">\${<span class="token environment constant">PATH</span>}</span>, PWD=<span class="token variable">\${<span class="token environment constant">PWD</span>}</span>, mine=<span class="token variable">\${some_var}</span>&quot;</span>
<span class="token keyword">while</span> <span class="token builtin class-name">read</span> f<span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;file=<span class="token variable">\${f}</span>&quot;</span>
<span class="token keyword">done</span> <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">ls</span> <span class="token parameter variable">-l</span> /tmp<span class="token punctuation">)</span>

<span class="token comment"># Section of discouraged cases</span>

<span class="token comment"># Unquoted vars, unbraced vars, brace-quoted single letter</span>
<span class="token comment"># shell specials.</span>
<span class="token builtin class-name">echo</span> <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token variable">$avar</span> <span class="token string">&quot;b=<span class="token variable">$bvar</span>&quot;</span> <span class="token string">&quot;PID=<span class="token variable">\${$}</span>&quot;</span> <span class="token string">&quot;<span class="token variable">\${1}</span>&quot;</span>

<span class="token comment"># Confusing use: this is expanded as &quot;\${1}0\${2}0\${3}0&quot;,</span>
<span class="token comment"># not &quot;\${10}\${20}\${30}</span>
<span class="token builtin class-name">set</span> -- a b c
<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$10</span><span class="token variable">$20</span><span class="token variable">$30</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-7-引用" tabindex="-1"><a class="header-anchor" href="#_5-7-引用" aria-hidden="true">#</a> 5.7 引用</h3><blockquote><ul><li>除非需要小心不带引用的扩展，否则总是引用包含变量、命令替换符、空格或shell元字符的字符串。</li></ul></blockquote><ul><li>推荐引用是单词的字符串（而不是命令选项或者路径名）。</li><li>千万不要引用整数。</li><li>注意 [[ 中模式匹配的引用规则。</li><li>请使用 $@ 除非你有特殊原因需要使用 $* 。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># &#39;Single&#39; quotes indicate that no substitution is desired.</span>
<span class="token comment"># &quot;Double&quot; quotes indicate that substitution is required/tolerated.</span>

<span class="token comment"># Simple examples</span>
<span class="token comment"># &quot;quote command substitutions&quot;</span>
<span class="token assign-left variable">flag</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>some_command and its args <span class="token string">&quot;<span class="token variable">$@</span>&quot;</span> <span class="token string">&#39;quoted separately&#39;</span><span class="token variable">)</span></span>&quot;</span>

<span class="token comment"># &quot;quote variables&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">\${flag}</span>&quot;</span>

<span class="token comment"># &quot;never quote literal integers&quot;</span>
<span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token number">32</span>
<span class="token comment"># &quot;quote command substitutions&quot;, even when you expect integers</span>
<span class="token assign-left variable">number</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>generate_number<span class="token variable">)</span></span>&quot;</span>

<span class="token comment"># &quot;prefer quoting words&quot;, not compulsory</span>
<span class="token builtin class-name">readonly</span> <span class="token assign-left variable">USE_INTEGER</span><span class="token operator">=</span><span class="token string">&#39;true&#39;</span>

<span class="token comment"># &quot;quote shell meta characters&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;Hello stranger, and well met. Earn lots of $$$&#39;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Process <span class="token variable">$$</span>: Done making \\$\\$\\$.&quot;</span>

<span class="token comment"># &quot;command options or path names&quot;</span>
<span class="token comment"># ($1 is assumed to contain a value here)</span>
<span class="token function">grep</span> <span class="token parameter variable">-li</span> Hugo /dev/null <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span>

<span class="token comment"># Less simple examples</span>
<span class="token comment"># &quot;quote variables, unless proven false&quot;: ccs might be empty</span>
<span class="token function">git</span> send-email <span class="token parameter variable">--to</span> <span class="token string">&quot;<span class="token variable">\${reviewers}</span>&quot;</span> <span class="token variable">\${ccs<span class="token operator">:+</span>&quot;--cc&quot; &quot;\${ccs}</span>&quot;<span class="token punctuation">}</span>

<span class="token comment"># Positional parameter precautions: $1 might be unset</span>
<span class="token comment"># Single quotes leave regex as-is.</span>
<span class="token function">grep</span> <span class="token parameter variable">-cP</span> <span class="token string">&#39;([Ss]pecial|\\|?characters*)$&#39;</span> <span class="token variable">\${1<span class="token operator">:+</span>&quot;$1&quot;}</span>

<span class="token comment"># For passing on arguments,</span>
<span class="token comment"># &quot;$@&quot; is right almost everytime, and</span>
<span class="token comment"># $* is wrong almost everytime:</span>
<span class="token comment">#</span>
<span class="token comment"># * $* and $@ will split on spaces, clobbering up arguments</span>
<span class="token comment">#   that contain spaces and dropping empty strings;</span>
<span class="token comment"># * &quot;$@&quot; will retain arguments as-is, so no args</span>
<span class="token comment">#   provided will result in no args being passed on;</span>
<span class="token comment">#   This is in most cases what you want to use for passing</span>
<span class="token comment">#   on arguments.</span>
<span class="token comment"># * &quot;$*&quot; expands to one argument, with all args joined</span>
<span class="token comment">#   by (usually) spaces,</span>
<span class="token comment">#   so no args provided will result in one empty string</span>
<span class="token comment">#   being passed on.</span>
<span class="token comment"># (Consult &#39;man bash&#39; for the nit-grits ;-)</span>

<span class="token builtin class-name">set</span> -- <span class="token number">1</span> <span class="token string">&quot;2 two&quot;</span> <span class="token string">&quot;3 three tres&quot;</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$#</span> <span class="token punctuation">;</span> <span class="token builtin class-name">set</span> -- <span class="token string">&quot;<span class="token variable">$*</span>&quot;</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$#</span>, <span class="token variable">$@</span>&quot;</span><span class="token punctuation">)</span>
<span class="token builtin class-name">set</span> -- <span class="token number">1</span> <span class="token string">&quot;2 two&quot;</span> <span class="token string">&quot;3 three tres&quot;</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$#</span> <span class="token punctuation">;</span> <span class="token builtin class-name">set</span> -- <span class="token string">&quot;<span class="token variable">$@</span>&quot;</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$#</span>, <span class="token variable">$@</span>&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-特性及错误" tabindex="-1"><a class="header-anchor" href="#_6-特性及错误" aria-hidden="true">#</a> 6 特性及错误</h2><h3 id="_6-1-命令替换" tabindex="-1"><a class="header-anchor" href="#_6-1-命令替换" aria-hidden="true">#</a> 6.1 命令替换</h3><blockquote><p>使用 <code>$(command)</code> 而不是反引号。</p></blockquote><p>嵌套的反引号要求用反斜杠转义内部的反引号。而 <code>$(command)</code> 形式嵌套时不需要改变，而且更易于阅读。</p><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># This is preferred:</span>
<span class="token assign-left variable">var</span><span class="token operator">=</span><span class="token string">&quot;$(command &quot;<span class="token variable"><span class="token variable">$(</span>command1<span class="token variable">)</span></span>&quot;</span><span class="token punctuation">)</span><span class="token string">&quot;

# This is not:
var=&quot;</span><span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">command</span> <span class="token punctuation">\\</span><span class="token variable">\`</span></span>command1<span class="token punctuation">\\</span>\`\`&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-test-和" tabindex="-1"><a class="header-anchor" href="#_6-2-test-和" aria-hidden="true">#</a> 6.2 test, [和[[</h3><blockquote><p>推荐使用 <code>[[ ... ]]</code> ，而不是 <code>[</code> , <code>test</code> , 和 <code>/usr/bin/ [</code> 。</p></blockquote><p>因为在<code>[[</code>和<code>]]</code>之间不会有路径名称扩展或单词分割发生，所以使用<code>[[ ... ]]</code>能够减少错误。而且<code>[[ ... ]]</code>允许正则表达式匹配，而<code>[ ... ]</code>不允许。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># This ensures the string on the left is made up of characters in the</span>
<span class="token comment"># alnum character class followed by the string name.</span>
<span class="token comment"># Note that the RHS should not be quoted here.</span>
<span class="token comment"># For the gory details, see</span>
<span class="token comment"># E14 at http://tiswww.case.edu/php/chet/bash/FAQ</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;filename&quot;</span> <span class="token operator">=~</span> ^<span class="token punctuation">[</span><span class="token punctuation">[</span>:alnum:<span class="token punctuation">]</span><span class="token punctuation">]</span>+name <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;Match&quot;</span>
<span class="token keyword">fi</span>

<span class="token comment"># This matches the exact pattern &quot;f*&quot; (Does not match in this case)</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;filename&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;f*&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;Match&quot;</span>
<span class="token keyword">fi</span>

<span class="token comment"># This gives a &quot;too many arguments&quot; error as f* is expanded to the</span>
<span class="token comment"># contents of the current directory</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;filename&quot;</span> <span class="token operator">==</span> f* <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;Match&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-测试字符串" tabindex="-1"><a class="header-anchor" href="#_6-3-测试字符串" aria-hidden="true">#</a> 6.3 测试字符串</h3><blockquote><p>尽可能使用引用，而不是过滤字符串。</p></blockquote><p>Bash足以在测试中处理空字符串。所以，请使用空（非空）字符串测试，而不是过滤字符，使得代码更易于阅读。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Do this:</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">\${my_var}</span>&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;some_string&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  do_something
<span class="token keyword">fi</span>

<span class="token comment"># -z (string length is zero) and -n (string length is not zero) are</span>
<span class="token comment"># preferred over testing for an empty string</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">&quot;<span class="token variable">\${my_var}</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  do_something
<span class="token keyword">fi</span>

<span class="token comment"># This is OK (ensure quotes on the empty side), but not preferred:</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">\${my_var}</span>&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  do_something
<span class="token keyword">fi</span>

<span class="token comment"># Not this:</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">\${my_var}</span>X&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;some_stringX&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  do_something
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了避免对你测试的目的产生困惑，请明确使用<code>-z</code>或者<code>-n</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Use this</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">\${my_var}</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  do_something
<span class="token keyword">fi</span>

<span class="token comment"># Instead of this as errors can occur if \${my_var} expands to a test</span>
<span class="token comment"># flag</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">\${my_var}</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  do_something
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-文件名的通配符扩展" tabindex="-1"><a class="header-anchor" href="#_6-4-文件名的通配符扩展" aria-hidden="true">#</a> 6.4 文件名的通配符扩展</h3><blockquote><p>当进行文件名的通配符扩展时，请使用明确的路径。</p></blockquote><p>为文件名可能以 <code>-</code> 开头，所以使用扩展通配符 <code>./*</code> 比<code>*</code> 来得安全得多。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Here&#39;s the contents of the directory:</span>
<span class="token comment"># -f  -r  somedir  somefile</span>

<span class="token comment"># This deletes almost everything in the directory by force</span>
psa@bilby$ <span class="token function">rm</span> <span class="token parameter variable">-v</span> *
removed directory: <span class="token variable"><span class="token variable">\`</span>somedir&#39;
removed <span class="token variable">\`</span></span>somefile<span class="token string">&#39;

# As opposed to:
psa@bilby$ rm -v ./*
removed \`./-f&#39;</span>
removed <span class="token variable"><span class="token variable">\`</span>./-r&#39;
rm: cannot remove <span class="token variable">\`</span></span>./somedir<span class="token string">&#39;: Is a directory
removed \`./somefile&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-5-eval" tabindex="-1"><a class="header-anchor" href="#_6-5-eval" aria-hidden="true">#</a> 6.5 Eval</h3><blockquote><p>应该避免使用eval。</p></blockquote><p>当用于给变量赋值时，Eval解析输入，并且能够设置变量，但无法检查这些变量是什么。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># What does this set?</span>
<span class="token comment"># Did it succeed? In part or whole?</span>
<span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>set_my_variables<span class="token variable">)</span></span>

<span class="token comment"># What happens if one of the returned values has a space in it?</span>
<span class="token assign-left variable">variable</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">eval</span> some_function<span class="token variable">)</span></span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-6-管道导向while循环" tabindex="-1"><a class="header-anchor" href="#_6-6-管道导向while循环" aria-hidden="true">#</a> 6.6 管道导向while循环</h3><blockquote><p>请使用过程替换或者for循环，而不是管道导向while循环。在while循环中被修改的变量是不能传递给父shell的，因为循环命令是在一个子shell中运行的。</p></blockquote><p>管道导向while循环中的隐式子shell使得追踪bug变得很困难。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">last_line</span><span class="token operator">=</span><span class="token string">&#39;NULL&#39;</span>
your_command <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> line<span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token assign-left variable">last_line</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${line}</span>&quot;</span>
<span class="token keyword">done</span>

<span class="token comment"># This will output &#39;NULL&#39;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">\${last_line}</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你确定输入中不包含空格或者特殊符号（通常意味着不是用户输入的），那么可以使用一个for循环。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">total</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token comment"># Only do this if there are no spaces in return values.</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">value</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">command</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token assign-left variable">total</span><span class="token operator">+=</span><span class="token string">&quot;<span class="token variable">\${value}</span>&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用过程替换允许重定向输出，但是请将命令放入一个显式的子shell中，而不是bash为while循环创建的隐式子shell。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">total</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token assign-left variable">last_file</span><span class="token operator">=</span>
<span class="token keyword">while</span> <span class="token builtin class-name">read</span> count filename<span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token assign-left variable">total</span><span class="token operator">+=</span><span class="token string">&quot;<span class="token variable">\${count}</span>&quot;</span>
  <span class="token assign-left variable">last_file</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${filename}</span>&quot;</span>
<span class="token keyword">done</span> <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>your_command <span class="token operator">|</span> <span class="token function">uniq</span> -c<span class="token punctuation">)</span>

<span class="token comment"># This will output the second field of the last line of output from</span>
<span class="token comment"># the command.</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Total = <span class="token variable">\${total}</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Last one = <span class="token variable">\${last_file}</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当不需要传递复杂的结果给父shell时可以使用while循环。这通常需要一些更复杂的“解析”。请注意简单的例子使用如awk这类工具可能更容易完成。当你特别不希望改变父shell的范围变量时这可能也是有用的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Trivial implementation of awk expression:</span>
<span class="token comment">#   awk &#39;$3 == &quot;nfs&quot; { print $2 &quot; maps to &quot; $1 }&#39; /proc/mounts</span>
<span class="token function">cat</span> /proc/mounts <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> src dest <span class="token builtin class-name">type</span> opts rest<span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">\${type}</span> <span class="token operator">==</span> <span class="token string">&quot;nfs&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;NFS <span class="token variable">\${dest}</span> maps to <span class="token variable">\${src}</span>&quot;</span>
  <span class="token keyword">fi</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-命名约定" tabindex="-1"><a class="header-anchor" href="#_7-命名约定" aria-hidden="true">#</a> 7 命名约定</h2><h3 id="_7-1-函数名" tabindex="-1"><a class="header-anchor" href="#_7-1-函数名" aria-hidden="true">#</a> 7.1 函数名</h3><blockquote><p>使用小写字母，并用下划线分隔单词。使用双冒号<code>::</code>分隔库。函数名之后必须有圆括号。关键词<code>function</code>是可选的，但必须在一个项目中保持一致。</p></blockquote><p>如果你正在写单个函数，请用小写字母来命名，并用下划线分隔单词。如果你正在写一个包，使用双冒号<code>::</code>来分隔包名。大括号必须和函数名位于同一行（就像在Google的其他语言一样），并且函数名和圆括号之间没有空格。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Single function</span>
<span class="token function-name function">my_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">..</span>.
<span class="token punctuation">}</span>

<span class="token comment"># Part of a package</span>
mypackage::<span class="token function-name function">my_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">..</span>.
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当函数名后存在 () 时，关键词 function 是多余的。但是其促进了函数的快速辨识。</p><h3 id="_7-2-变量名" tabindex="-1"><a class="header-anchor" href="#_7-2-变量名" aria-hidden="true">#</a> 7.2 变量名</h3><blockquote><p>如函数名</p></blockquote><p>循环的变量名应该和循环的任何变量同样命名。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">zone</span> <span class="token keyword">in</span> <span class="token variable">\${zones}</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
  something_with <span class="token string">&quot;<span class="token variable">\${zone}</span>&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-常量和环境变量名" tabindex="-1"><a class="header-anchor" href="#_7-3-常量和环境变量名" aria-hidden="true">#</a> 7.3 常量和环境变量名</h3><blockquote><p>全部大写，用下划线分隔，声明在文件的顶部。</p></blockquote><p>常量和任何导出到环境中的都应该大写。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Constant</span>
<span class="token builtin class-name">readonly</span> <span class="token assign-left variable">PATH_TO_FILES</span><span class="token operator">=</span><span class="token string">&#39;/some/path&#39;</span>

<span class="token comment"># Both constant and environment</span>
<span class="token builtin class-name">declare</span> <span class="token parameter variable">-xr</span> <span class="token assign-left variable">ORACLE_SID</span><span class="token operator">=</span><span class="token string">&#39;PROD&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一次设置时有一些就变成了常量（例如，通过getopts）。因此，可以在getopts中或基于条件来设定常量，但之后应该立即设置其为只读。值得注意的是，在函数中<code>declare</code>不会对全局变量进行操作。所以推荐使用<code>readonly</code>和<code>export</code>来代替。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">VERBOSE</span><span class="token operator">=</span><span class="token string">&#39;false&#39;</span>
<span class="token keyword">while</span> <span class="token builtin class-name">getopts</span> <span class="token string">&#39;v&#39;</span> flag<span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token keyword">case</span> <span class="token string">&quot;<span class="token variable">\${flag}</span>&quot;</span> <span class="token keyword">in</span>
    <span class="token function">v</span><span class="token punctuation">)</span> <span class="token assign-left variable">VERBOSE</span><span class="token operator">=</span><span class="token string">&#39;true&#39;</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token keyword">esac</span>
<span class="token keyword">done</span>
<span class="token builtin class-name">readonly</span> VERBOSE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-源文件名" tabindex="-1"><a class="header-anchor" href="#_7-4-源文件名" aria-hidden="true">#</a> 7.4 源文件名</h3><blockquote><p>小写，如果需要的话使用下划线分隔单词。</p></blockquote><p>这是为了和在Google中的其他代码风格保持一致：<code>maketemplate</code>或者<code>make_template</code>，而不是<code>make-template</code>。</p><h3 id="_7-5-只读变量" tabindex="-1"><a class="header-anchor" href="#_7-5-只读变量" aria-hidden="true">#</a> 7.5 只读变量</h3><blockquote><p>使用 readonly 或者 declare -r 来确保变量只读。</p></blockquote><p>因为全局变量在shell中广泛使用，所以在使用它们的过程中捕获错误是很重要的。当你声明了一个变量，希望其只读，那么请明确指出。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">zip_version</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>dpkg <span class="token parameter variable">--status</span> <span class="token function">zip</span> <span class="token operator">|</span> <span class="token function">grep</span> Version: <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">&#39; &#39;</span> <span class="token parameter variable">-f</span> <span class="token number">2</span><span class="token variable">)</span></span>&quot;</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">&quot;<span class="token variable">\${zip_version}</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  error_message
<span class="token keyword">else</span>
  <span class="token builtin class-name">readonly</span> zip_version
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-6-使用本地变量" tabindex="-1"><a class="header-anchor" href="#_7-6-使用本地变量" aria-hidden="true">#</a> 7.6 使用本地变量</h3><blockquote><p>使用<code>local</code>声明特定功能的变量。声明和赋值应该在不同行。</p></blockquote><p>使用<code>local</code>来声明局部变量以确保其只在函数内部和子函数中可见。这避免了污染全局命名空间和不经意间设置可能具有函数之外重要性的变量。</p><p>当赋值的值由命令替换提供时，声明和赋值必须分开。因为内建的<code>local</code>不会从命令替换中传递退出码。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function-name function">my_func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin class-name">local</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$1</span>&quot;</span>

  <span class="token comment"># Separate lines for declaration and assignment:</span>
  <span class="token builtin class-name">local</span> my_var
  <span class="token assign-left variable">my_var</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>my_func<span class="token variable">)</span></span>&quot;</span> <span class="token operator">||</span> <span class="token builtin class-name">return</span>

  <span class="token comment"># DO NOT do this: $? contains the exit code of &#39;local&#39;, not my_func</span>
  <span class="token builtin class-name">local</span> <span class="token assign-left variable">my_var</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>my_func<span class="token variable">)</span></span>&quot;</span>
  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token builtin class-name">return</span>

  <span class="token punctuation">..</span>.
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-7-函数位置" tabindex="-1"><a class="header-anchor" href="#_7-7-函数位置" aria-hidden="true">#</a> 7.7 函数位置</h3><blockquote><p>将文件中所有的函数一起放在常量下面。不要在函数之间隐藏可执行代码。</p></blockquote><p>如果你有函数，请将他们一起放在文件头部。只有includes，<code>set</code>声明和常量设置可能在函数声明之前完成。不要在函数之间隐藏可执行代码。如果那样做，会使得代码在调试时难以跟踪并出现意想不到的讨厌结果。</p><h3 id="_7-8-主函数main" tabindex="-1"><a class="header-anchor" href="#_7-8-主函数main" aria-hidden="true">#</a> 7.8 主函数main</h3><blockquote><p>对于包含至少一个其他函数的足够长的脚本，需要称为<code>main</code>的函数。</p></blockquote><p>为了方便查找程序的开始，将主程序放入一个称为<code>main</code>的函数，作为最下面的函数。这使其和代码库的其余部分保持一致性，同时允许你定义更多变量为局部变量（如果主代码不是一个函数就不能这么做）。文件中最后的非注释行应该是对<code>main</code>函数的调用。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>main <span class="token string">&quot;<span class="token variable">$@</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显然，对于仅仅是线性流的短脚本， <code>main</code> 是矫枉过正，因此是不需要的。</p><h2 id="_8-调用命令" tabindex="-1"><a class="header-anchor" href="#_8-调用命令" aria-hidden="true">#</a> 8 调用命令</h2><h3 id="_8-1-检查返回值" tabindex="-1"><a class="header-anchor" href="#_8-1-检查返回值" aria-hidden="true">#</a> 8.1 检查返回值</h3><blockquote><p>总是检查返回值，并给出信息返回值。</p></blockquote><p>对于非管道命令，使用 <code>$?</code> 或直接通过一个 <code>if</code> 语句来检查以保持其简洁。</p><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">mv</span> <span class="token string">&quot;<span class="token variable">\${file_list}</span>&quot;</span> <span class="token string">&quot;<span class="token variable">\${dest_dir}</span>/&quot;</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;Unable to move <span class="token variable">\${file_list}</span> to <span class="token variable">\${dest_dir}</span>&quot;</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span>
  <span class="token builtin class-name">exit</span> <span class="token string">&quot;<span class="token variable">\${E_BAD_MOVE}</span>&quot;</span>
<span class="token keyword">fi</span>

<span class="token comment"># Or</span>
<span class="token function">mv</span> <span class="token string">&quot;<span class="token variable">\${file_list}</span>&quot;</span> <span class="token string">&quot;<span class="token variable">\${dest_dir}</span>/&quot;</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$?</span>&quot;</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;Unable to move <span class="token variable">\${file_list}</span> to <span class="token variable">\${dest_dir}</span>&quot;</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span>
  <span class="token builtin class-name">exit</span> <span class="token string">&quot;<span class="token variable">\${E_BAD_MOVE}</span>&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Bash也有<code>PIPESTATUS</code>变量，允许检查从管道所有部分返回的代码。如果仅仅需要检查整个管道是成功还是失败，以下的方法是可以接受的：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-cf</span> - ./* <span class="token operator">|</span> <span class="token punctuation">(</span> <span class="token builtin class-name">cd</span> <span class="token string">&quot;<span class="token variable">\${dir}</span>&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> <span class="token parameter variable">-xf</span> - <span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">\${<span class="token environment constant">PIPESTATUS</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>}</span>&quot;</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">&quot;<span class="token variable">\${<span class="token environment constant">PIPESTATUS</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>}</span>&quot;</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;Unable to tar files to <span class="token variable">\${dir}</span>&quot;</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可是，只要你运行任何其他命令，<code>PIPESTATUS</code>将会被覆盖。如果你需要基于管道中发生的错误执行不同的操作，那么你需要在运行命令后立即将<code>PIPESTATUS</code>赋值给另一个变量（别忘了 <code>[</code> 是一个会将<code>PIPESTATUS</code>擦除的命令）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-cf</span> - ./* <span class="token operator">|</span> <span class="token punctuation">(</span> <span class="token builtin class-name">cd</span> <span class="token string">&quot;<span class="token variable">\${DIR}</span>&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> <span class="token parameter variable">-xf</span> - <span class="token punctuation">)</span>
<span class="token assign-left variable">return_codes</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">\${<span class="token environment constant">PIPESTATUS</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">\${return_codes<span class="token punctuation">[</span>0<span class="token punctuation">]</span>}</span>&quot;</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  do_something
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">\${return_codes<span class="token punctuation">[</span>1<span class="token punctuation">]</span>}</span>&quot;</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  do_something_else
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-2-内建命令和外部命令" tabindex="-1"><a class="header-anchor" href="#_8-2-内建命令和外部命令" aria-hidden="true">#</a> 8.2 内建命令和外部命令</h3><blockquote><p>可以在调用shell内建命令和调用另外的程序之间选择，请选择内建命令。</p></blockquote><p>我们更喜欢使用内建命令，如在 <code>bash(1)</code> 中参数扩展函数。因为它更强健和便携（尤其是跟像 <code>sed</code> 这样的命令比较）</p><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Prefer this:</span>
<span class="token assign-left variable">addition</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>\${X} <span class="token operator">+</span> \${Y}<span class="token variable">))</span></span>
<span class="token assign-left variable">substitution</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${string<span class="token operator">/</span><span class="token operator">#</span>foo<span class="token operator">/</span>bar}</span>&quot;</span>

<span class="token comment"># Instead of this:</span>
<span class="token assign-left variable">addition</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> $<span class="token punctuation">{</span>X<span class="token punctuation">}</span> + $<span class="token punctuation">{</span>Y<span class="token punctuation">}</span><span class="token variable">)</span></span>&quot;</span>
<span class="token assign-left variable">substitution</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">\${string}</span>&quot;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/^foo/bar/&#39;</span><span class="token variable">)</span></span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,168),o=[l];function i(p,c){return n(),a("div",null,o)}const u=s(t,[["render",i],["__file","part6.html.vue"]]);export{u as default};
