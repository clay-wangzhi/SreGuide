import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,e as i}from"./app-f1a45f61.js";const a={},l=i(`<h1 id="_1-初识ansible" tabindex="-1"><a class="header-anchor" href="#_1-初识ansible" aria-hidden="true">#</a> 1 初识Ansible</h1><h2 id="_1-ansible简介" tabindex="-1"><a class="header-anchor" href="#_1-ansible简介" aria-hidden="true">#</a> 1 Ansible简介</h2><p>Ansible官方文档： https://docs.ansible.com/</p><p>Ansible 是一个 IT 自动化工具。它能配置系统、部署软件、编排更复杂的 IT 任务，如连续部署或零停机时间滚动更新。</p><p>Ansible 用 python 编写，尽管市面上已经有很多可供选择的配置管理解决方案（例如 Salt，Puppet，Chef等），但它们各有优劣，而Ansible的特点在于它的简洁。让 Ansible 在主流的配置管理系统中与众不同的一点便是，它并不需要你在想要配置的每个节点上安装自己的组件。同时提供的一个优点在于，如果需要的话，你可以在不止一个地方控制你的整个基础架构。</p><h3 id="_1-1-ansible特性" tabindex="-1"><a class="header-anchor" href="#_1-1-ansible特性" aria-hidden="true">#</a> 1.1 Ansible特性</h3><ul><li>Agentless：不需要再被管理节点上安装客户端，只要有sshd即可</li><li>幂等性：多次操作或多次执行不影响结果。</li><li>Serverless：在服务端不需要启动任何服务，只需要执行命令就行</li><li>Modules in any language：基于模块工作，可以使用任意语言开发ansible模块</li><li>YAML, not code：使用yaml语言定制playbook</li><li>SSH by default：默认使用ssh控制各节点</li><li>Strong multi-tier solution：可实现多级控制</li></ul><blockquote><p>幂等性详细解释：比如算术运算时数值加0是幂等的，无论加多少次结果都不会改变，而数值加1是非幂等的，每次加1结果都会改变。再比如执行systemctl stop xxx命令来停止服务,当发现要停止的目标服务已经处于停止状态，它什么也不会做，所以多次停止的结果仍然是停止，不会改变结果，它是幂等的，而systemctl restart xxx是非幂等的。Ansible的很多 模块在执行时都会先判断目标节点是否要执行任务,所以，可以放心大胆地让Ansible去执行任务,重复执行某个任务绝大多数时候不会产生任何副作用。</p></blockquote><h3 id="_1-2-ansible的基本组件" tabindex="-1"><a class="header-anchor" href="#_1-2-ansible的基本组件" aria-hidden="true">#</a> 1.2 Ansible的基本组件</h3><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/ansible1-1585014469983.png" alt="ansible1"></p><ul><li>核心：ansible</li><li>核心模块（Core Modules）：这些都是ansible自带的模块</li><li>扩展模块（Custom Modules）：如果核心模块不足以完成某种功能，可以添加扩展模块</li><li>插件（Plugins）：完成模块功能的补充</li><li>剧本（Playbooks）：把需要完成的多个任务定义在剧本中</li><li>连接插件（Connectior Plugins）：ansible基于连接插件连接到各个主机上，虽然ansible是使用ssh连接到各个主机的，但是它还支持其他的连接方法，所以需要有连接插件</li><li>主机群（Host Inventory）：ansible在管理多台主机时，可以选择只对其中的一部分执行某些操作</li></ul><h3 id="_1-3-ansible工作机制" tabindex="-1"><a class="header-anchor" href="#_1-3-ansible工作机制" aria-hidden="true">#</a> 1.3 Ansible工作机制</h3><p>Ansible 在管理节点将 Ansible 模块通过 SSH 协议（或者 Kerberos、LDAP）推送到被管理端执行，执行完之后自动删除，可以使用版本控制系统（git/svn）来管理自定义模块及playbooks。</p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/ansible2-1585014469997.png" alt="ansible2"></p><h2 id="_2-ansible安装" tabindex="-1"><a class="header-anchor" href="#_2-ansible安装" aria-hidden="true">#</a> 2 Ansible安装</h2><h3 id="_2-1-yum-安装-推荐" tabindex="-1"><a class="header-anchor" href="#_2-1-yum-安装-推荐" aria-hidden="true">#</a> 2.1 yum 安装（推荐）</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 配置epel源</span>
<span class="token function">cat</span> <span class="token operator">&gt;</span> /etc/yum.repos.d/epel.repo <span class="token operator">&lt;&lt;</span><span class="token string">&#39;EOF&#39;
[epel]
name=epel repo
baseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/$basearch
enabled=1
gpgcheck=0
EOF</span>
<span class="token comment"># 安装</span>
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> ansible
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>&#39;EOF&#39;，EOF用单引号括起来，可使配置文件中变量<code>$basearch</code>不被转义</p></blockquote><h3 id="_2-2-源码安装-推荐" tabindex="-1"><a class="header-anchor" href="#_2-2-源码安装-推荐" aria-hidden="true">#</a> 2.2 源码安装（推荐）</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 解决依赖关系：</span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> python36 python36-devel python36-setuptools gcc libffi-devel openssl-devel

<span class="token comment"># 配置pip 下载源</span>
<span class="token function">mkdir</span> ~/.pip
<span class="token function">cat</span> <span class="token operator">&gt;</span> ~/.pip/pip.conf <span class="token operator">&lt;&lt;</span> <span class="token string">&#39;EOF&#39;
[global] 
index-url = https://pypi.tuna.tsinghua.edu.cn/simple
[install]
trusted-host = https://pypi.tuna.tsinghua.edu.cn
EOF</span>

 
<span class="token comment"># 下载ansible：</span>
<span class="token function">wget</span> https://github.com/ansible/ansible/archive/v2.9.17.tar.gz

<span class="token comment">#解压安装</span>

<span class="token function">tar</span> xf v2.9.17.tar.gz
<span class="token builtin class-name">cd</span> ansible-2.9.17/
python3 setup.py build
python3 setup.py <span class="token function">install</span> <span class="token comment"># install 过程安装module失败时，使用pip3手动安装</span>
<span class="token function">mkdir</span> /etc/ansible
<span class="token function">cp</span> <span class="token parameter variable">-r</span> examples/* /etc/ansible
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-pip-安装" tabindex="-1"><a class="header-anchor" href="#_2-3-pip-安装" aria-hidden="true">#</a> 2.3 pip 安装</h3><p>Ansible每个版本释放出来之后，都首先提交到Pypi,所以任何操作系统，都可以使用pip工具来安装最新版的Ansible。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip3 <span class="token function">install</span> ansible
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但要注意，使用各系统的包管理I具(如yum)安装Ansible时自动会提供-些配置文件，如/etc/ansible/ansible. cfg。而使用pip安装的Ansible默认不提供配置文件。</p><h2 id="_3-ansible-参数补全功能" tabindex="-1"><a class="header-anchor" href="#_3-ansible-参数补全功能" aria-hidden="true">#</a> 3 Ansible 参数补全功能</h2><p>从Ansible 2.9版本开始，它支持命令的选项补全功能，它依赖于python的argcomplete插件</p><p>安装argcomplete:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yum -y install python-argcomplete
pip3 install argcomplete
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>安装完成后，激活插件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>activate-global-python-argcomplete 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重新进去终端，即可使用tab参数补全功能</p><h2 id="_4-ansible配置文件管理" tabindex="-1"><a class="header-anchor" href="#_4-ansible配置文件管理" aria-hidden="true">#</a> 4 Ansible配置文件管理</h2><h3 id="_4-1-配置文件优先级" tabindex="-1"><a class="header-anchor" href="#_4-1-配置文件优先级" aria-hidden="true">#</a> 4.1 配置文件优先级</h3><p>ansible的配置文件名为ansible.cfg，它一般会存在于四个地方：</p><ul><li>ANSIBLE_CONFIG：首先，Ansible命令会检查该环境变量，及这个环境变量将指向的配置文件</li><li>./ansible.cfg：当前工作目录，即当前执行ansible指令的目录，如果ANSIBEL_CONFIG环境变量未定义，则优先使用该配置文件</li><li>~/.ansible.cfg：当前用户家目录下的一个隐藏文件，如果当前工作目录下不存在ansible.cfg配置文件，则会查找用户家目录下的该隐藏文件</li><li>/etc/ansible/ansible.cfg：默认配置文件，如果上面两个路径下的ansible.cfg都不存在，则使用该文件</li></ul><blockquote><p>需要说明的是，配置文件中所有的配置项都可以通过环境变量的方式来定义，而环境变量定义的配置项具有最高优先级，会覆盖掉所有配置文件中的配置项</p></blockquote><h3 id="_4-2-配置文件详解" tabindex="-1"><a class="header-anchor" href="#_4-2-配置文件详解" aria-hidden="true">#</a> 4.2 配置文件详解</h3><p>Ansible 配置文件采用ini风格进行配置，每一项配置都使用<code>key=value</code>的方式进行配置</p><h4 id="_4-2-1-配置文件分段说明" tabindex="-1"><a class="header-anchor" href="#_4-2-1-配置文件分段说明" aria-hidden="true">#</a> 4.2.1 配置文件分段说明</h4><p>ansible.cfg的配置默认分为十段：</p><ul><li>[defaults]：通用配置项</li><li>[inventory]：与主机清单相关的配置项</li><li>[privilege_escalation]：特权升级相关的配置项</li><li>[paramiko_connection]：使用paramiko连接的相关配置项，Paramiko在RHEL6以及更早的版本中默认使用的ssh连接方式</li><li>[ssh_connection]：使用OpenSSH连接的相关配置项，OpenSSH是Ansible在RHEL6之后默认使用的ssh连接方式</li><li>[persistent_connection]：持久连接的配置项</li><li>[accelerate]：加速模式配置项</li><li>[selinux]：selinux相关的配置项</li><li>[colors]：ansible命令输出的颜色相关的配置项</li><li>[diff]：定义是否在运行时打印diff（变更前与变更后的差异）</li></ul><h4 id="_4-2-2-配置参数说明" tabindex="-1"><a class="header-anchor" href="#_4-2-2-配置参数说明" aria-hidden="true">#</a> 4.2.2 配置参数说明</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[default]
inventory      = /etc/ansible/hosts
remote_user    = root
ask_pass       = false
log_path       = /var/log/ansible.log

[privilege_escalation]
become=True
become_method=sudo
become_user=root
become_ask_pass=False

[ssh_connection]
ssh_args = -C -o ControlMaster=auto -o ControlPersist=60s 
host_key_checking = False 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置项说明：</p><ul><li>inventory：定义默认使用的主机清单</li><li>remote_user： ansible在操作远程主机时，使用远程主机上的哪个用户身份，默认是root</li><li>ask_pass：ansible在操作远程主机时，获取远程主机上的用户身份，是否交互提示密码验证，默认为true。如果使用密钥认证的话，建议将其设置为false</li><li>log_path：默认ansible 执行的时候，并不会输出日志到文件，打开该配置项，所有的命令执行后，都会将日志输出到<code>/var/log/ansible.log</code>文件。</li><li>become：如果ansible在操作远程主机时，使用的是远程主机上的普通用户，该普通用户是否允许提权</li><li>become_method：如果允许提权，使用何种提权方式，默认是sudo</li><li>become_user：提权到哪个用户身份，默认是root</li><li>become_ask_pass：提权时，是否交互提示密码验证，默认为False</li><li>ssh_args：ansible通过ssh连接远程被管理机，这里用于定义一些ssh连接时的参数，如-C启用压缩传输，ControlPersist用于提升性能。</li><li>host_key_checking：通过ssh首次连接远程主机时，由于在本机的<code>~/.ssh/known_hosts</code>文件中并有<code>fingerprint key</code>串，ssh第一次连接的时候一般会提示输入yes/no进行确认将key字符串加入到<code>~/.ssh/known_hosts</code>文件中。将此项设置为False将跳过该确认过程。</li></ul><blockquote><p>参考链接：</p><p>https://www.cnblogs.com/breezey/p/8810263.html</p><p>https://blog.51cto.com/cloumn/blog/1540</p></blockquote>`,46),t=[l];function d(c,r){return s(),n("div",null,t)}const b=e(a,[["render",d],["__file","first.html.vue"]]);export{b as default};
