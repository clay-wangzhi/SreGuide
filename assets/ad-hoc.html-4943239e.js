import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as l,b as e,t as i,a as s}from"./app-811ce446.js";const t={},r=s(`<h1 id="_3-1-ansible-ad-hoc-常用命令集" tabindex="-1"><a class="header-anchor" href="#_3-1-ansible-ad-hoc-常用命令集" aria-hidden="true">#</a> 3.1 Ansible Ad-hoc 常用命令集</h1><h2 id="_1-ad-hoc简介" tabindex="-1"><a class="header-anchor" href="#_1-ad-hoc简介" aria-hidden="true">#</a> 1 Ad-hoc简介</h2><p>Ad-Hoc（点对点模式）是指ansible下临时执行的一条命令，并且不需要保存的命令，对于复杂的命令会使用playbook。Ad-hoc的执行依赖于模块，ansible官方提供了大量的模块。 如：command、raw、shell、file、cron等，具体可以通过ansible-doc -l 进行查看 。可以使用ansible-doc -s module来查看某个模块的参数，也可以使用ansible-doc module来查看该模块更详细的信息。</p><h3 id="_1-1-命令说明" tabindex="-1"><a class="header-anchor" href="#_1-1-命令说明" aria-hidden="true">#</a> 1.1 命令说明</h3><p>一个ad-hoc命令的执行，需要按以下格式进行执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible 主机或组 <span class="token parameter variable">-m</span> 模块名 <span class="token parameter variable">-a</span> <span class="token string">&#39;模块参数&#39;</span>  ansible参
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>主机和组，是在/etc/ansible/hosts 里进行指定的部分，当然动态Inventory 使用的是脚本从外部应用里获取的主机；</li><li>模块名，可以通过ansible-doc -l 看目前安装的模块，默认不指定时，使用的是command模块，具体可以查看/etc/ansible/ansible.cfg 的“#module_name = command ” 部分，默认模块可以在该配置文件中进行修改；</li><li>模块参数，可以通过 “ansible-doc -s 模块名” 查看具体的用法及后面的参数；</li><li>ansible参数，可以通过ansible命令的帮助信息里查看到，这里有很多参数可以供选择，如是否需要输入密码、是否sudo等。</li></ul><h3 id="_1-2-用户说明" tabindex="-1"><a class="header-anchor" href="#_1-2-用户说明" aria-hidden="true">#</a> 1.2 用户说明</h3><p>ansible在执行ad-hoc的时候，需要使用远程管理机上的一个用户身份，默认这个用户是root，而在实际生产环境中，不建议直接使用root，而推荐使用一个普通用户，需要配置该普通用户可通过sudo提权。</p><p>下面是一个配置示例：</p><ol><li>在被管理机上创建一个普通用户ansible，并配置sudo提权：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 创建ansible用户
useradd ansible

# 设置ansible用户可免密提权
vim /etc/sudoers.d/ansible
ansible    ALL=(ALL)       NOPASSWD:ALL

chmod 400 /etc/sudoers.d/ansible

mkdir /home/ansible/.ssh
chown ansible.ansible /home/ansible/.ssh
chmod 700 /home/ansible/.ssh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>在管理端修改ansible.cfg配置文件如下：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[default]
remote_user = ansible
ask_pass = False

[privilege_escalation]
become=True
become_method=sudo
become_user=root
become_ask_pass=False
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>将管理端用户的<code>id_rsa.pub</code>复制到被管理端的<code>/home/ansible/.ssh//home/ansible/.ssh/authorized_keys</code>文件中，并设置该文件的权限为400</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 管理端执行：
ssh-copy-id -i .ssh/id_rsa.pub ansible@db1.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>需要说明的是，通过上面的操作，需要为ansible用户先创建密码，在实际生产当中，不建议为该用户设置密码。可在安装系统时，提前将管理端公钥直接写入到被管理节点的ansible用户下</p></blockquote><h3 id="_1-3-命令执行模块" tabindex="-1"><a class="header-anchor" href="#_1-3-命令执行模块" aria-hidden="true">#</a> 1.3 命令执行模块</h3><p>命令执行模块包含如下 四个模块：</p><ul><li>command模块：该模块通过-a跟上要执行的命令可以直接执行，不过命令里如果有带有如下字符部分则执行不成功 “ &quot;&lt;&quot;, &quot;&gt;&quot;, &quot;|&quot;, &quot;&amp;&quot;</li><li>shell 模块：用法基本和command一样，但是支持解析特殊shell符号</li><li>raw模块：执行底层shell命令。command和shell模块都是通过目标主机上的python代码启动/bin/sh来执行命令的，但目标主机上可能没有安装python，这时只能使用raw模块在远程主机上直接启动/bin/sh来执行命令，通常只有在目标主机上安装python时才使用raw模块，其它时候都不使用该模块</li><li>script模块：在远程主机上执行脚本文件，其原理是先将shell 复制到远程主机，再在远程主机上执行</li></ul><blockquote><p>raw模块和comand、shell 模块不同的是其没有chdir、creates、removes参数，chdir参数的作用就是先切到chdir指定的目录后，再执行后面的命令，这在后面很多模块里都会有该参数 。</p></blockquote><h2 id="_2-常用模块" tabindex="-1"><a class="header-anchor" href="#_2-常用模块" aria-hidden="true">#</a> 2 常用模块</h2><p>根据官方的分类，将模块按功能分类为：云模块、命令模块、数据库模块、文件模块、资产模块、消息模块、监控模块、网络模块、通知模块、包管理模块、源码控制模块、系统模块、单元模块、web设施模块、windows模块 ，具体可以参看官方页面。</p><p>这里从官方分类的模块里选择最常用的一些模块进行介绍。</p><h3 id="_2-1-command模块" tabindex="-1"><a class="header-anchor" href="#_2-1-command模块" aria-hidden="true">#</a> 2.1 command模块</h3><p>command模块包含如下选项：</p><ul><li>creates：一个文件名，当该文件存在，则该命令不执行</li><li>free_form：要执行的linux指令</li><li>chdir：在执行指令之前，先切换到该指定的目录</li><li>removes：一个文件名，当该文件不存在，则该选项不执行</li><li>executable：切换shell来执行指令，该执行路径必须是一个绝对路径</li></ul><p>chdir示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 三个命令都会返回执行成功的状态。不过实际上只有前两个文件会被创建成功。使用raw模块的执行的结果文件事实上也被正常创建了，不过不是在chdir指定的目录，而是在当前执行用户的家目录</span>
ansible <span class="token number">192.168</span>.1.1 <span class="token parameter variable">-m</span> <span class="token builtin class-name">command</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;chdir=/tmp/test.txt touch test.file&#39;</span>
ansible <span class="token number">192.168</span>.1.1 <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&#39;chdir=/tmp/test.txt touch test2.file&#39;</span>
ansible <span class="token number">192.168</span>.1.1 <span class="token parameter variable">-m</span> raw <span class="token parameter variable">-a</span> <span class="token string">&#39;chdir=/tmp/text.txt touch test3.file&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>creates与removes示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token number">192.168</span>.1.1 <span class="token parameter variable">-a</span> <span class="token string">&#39;creates=/tmp/server.txt uptime&#39;</span> <span class="token comment">#当/tmp/server.txt文件存在时，则不执行uptime指令</span>
ansible <span class="token number">192.168</span>.1.1 <span class="token parameter variable">-a</span> <span class="token string">&#39;removes=/tmp/server.txt uptime&#39;</span> <span class="token comment">#当/tmp/server.txt文件不存在时，则不执行uptime指令</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-script模块" tabindex="-1"><a class="header-anchor" href="#_2-2-script模块" aria-hidden="true">#</a> 2.2 script模块</h3><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#要执行的脚本文件script.sh内容如下： </span>

<span class="token comment">#/bin/bash</span>
<span class="token function">ifconfig</span>
<span class="token function">df</span> <span class="token parameter variable">-hT</span>

<span class="token comment"># 执行ansible指令：</span>
ansible <span class="token number">10.212</span>.52.252 <span class="token parameter variable">-m</span> script <span class="token parameter variable">-a</span> <span class="token string">&#39;script.sh&#39;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-ping模块" tabindex="-1"><a class="header-anchor" href="#_2-3-ping模块" aria-hidden="true">#</a> 2.3 ping模块</h3><p>测试主机是否是通的，用法很简单，不涉及参数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token function">ping</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-4-file模块" tabindex="-1"><a class="header-anchor" href="#_2-4-file模块" aria-hidden="true">#</a> 2.4 file模块</h3><p>file模块主要用于远程主机上的文件操作，file模块包含如下选项：</p><ul><li>force：需要在两种情况下强制创建软链接，一种是源文件不存在但之后会建立的情况下；另一种是目标软链接已存在,需要先取消之前的软链，然后创建新的软链，有两个选项：yes|no</li><li>group：定义文件/目录的属组</li><li>mode：定义文件/目录的权限</li><li>owner：定义文件/目录的属主</li><li>path：必选项，定义文件/目录的路径</li><li>src：要被链接的源文件的路径，只应用于state=link的情况</li><li>dest：被链接到的路径，只应用于state=link的情况</li><li>state： <ul><li>directory：如果目录不存在，创建目录</li><li>file：即使文件不存在，也不会被创建</li><li>link：创建软链接</li><li>hard：创建硬链接</li><li>touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间</li><li>absent：删除目录、文件或者取消链接文件</li></ul></li></ul><p>使用示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token number">192.168</span>.8.120 <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;path=/tmp/test.txt state=touch owner=root group=root mode=644&#39;</span>

ansible <span class="token number">192.168</span>.8.120 <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;src=/tmp/test.txt dest=/root/test.txt state=link&#39;</span>

ansible <span class="token number">192.168</span>.8.120 <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;path=/tmp/test.txt state=file&#39;</span>

ansible <span class="token number">192.168</span>.8.120 <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;path=/tmp/test state=directory owner=root group=root mode=755&#39;</span>

ansible <span class="token number">192.168</span>.8.120 <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;path=/tmp/test2/test3/aaa/bbb state=directory owner=root group=root mode=755&#39;</span>

ansible <span class="token number">192.168</span>.8.120 <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;path=/tmp/test2 state=absent&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-copy模块" tabindex="-1"><a class="header-anchor" href="#_2-5-copy模块" aria-hidden="true">#</a> 2.5 copy模块</h3><p>复制文件到远程主机，copy模块包含如下选项：</p><ul><li>backup：在覆盖之前将原文件备份，备份文件包含时间信息。有两个选项：yes|no</li><li>content：用于替代&quot;src&quot;,可以直接设定指定文件的值</li><li>dest：必选项。要将源文件复制到的远程主机的绝对路径，如果源文件是一个目录，那么该路径也必须是个目录</li><li>force：如果目标主机包含该文件，但内容不同，如果设置为yes，则强制覆盖，如果为no，则只有当目标主机的目标位置不存在该文件时，才复制。默认为yes</li><li>others：所有的file模块里的相关文件属性选项都可以在这里使用</li><li>src：要复制到远程主机的文件在本地的地址，可以是绝对路径，也可以是相对路径。如果路径是一个目录，它将递归复制。在这种情况下，如果路径使用&quot;/&quot;来结尾，则只复制目录里的内容，如果没有使用&quot;/&quot;来结尾，则包含目录在内的整个内容全部复制，类似于rsync。</li></ul><p>示例如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ansible 192.168.8.120 -m copy -a &#39;src=/etc/ansible/ansible.cfg dest=/usr/local/src/ owner=root group=root mode=644&#39;

ansible 192.168.8.120 -m copy -a &#39;backup=yes src=/etc/fstab dest=/usr/local/src/ansible.cfg owner=root group=root mode=644&#39;

ansible 192.168.8.120 -m copy -a &#39;content=&quot;just a test!&quot; dest=/usr/local/src/test.txt&#39;

ansible 192.168.8.120 -m copy -a &#39;src=/data dest=/usr/local/src/&#39;

ansible 192.168.8.120 -m copy -a &#39;src=/data/ dest=/usr/local/src/&#39;

ansible 192.168.8.120 -m copy -a &quot;src=/mine/sudoers dest=/etc/sudoers validate=&#39;visudo -cf %s&#39;&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-yum模块" tabindex="-1"><a class="header-anchor" href="#_2-6-yum模块" aria-hidden="true">#</a> 2.6 yum模块</h3><p>使用yum包管理器来管理软件包，其选项有：</p><ul><li><code>name</code>：要进行操作的软件包的名字，也可以传递一个url或者一个本地的rpm包的路径</li><li><code>state</code>：状态（present，absent，latest）</li></ul><p>示例如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ansible test -m yum -a &#39;name=httpd state=latest&#39;
ansible test -m yum -a &#39;name=&quot;@Development tools&quot; state=present&#39;
ansible test -m yum -a &#39;name=http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm state=present&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-7-service模块" tabindex="-1"><a class="header-anchor" href="#_2-7-service模块" aria-hidden="true">#</a> 2.7 service模块</h3><p>用于管理服务 该模块包含如下选项：</p><ul><li>arguments：给命令行提供一些选项</li><li>enabled：是否开机启动 yes|no</li><li>name：必选项，服务名称</li><li>pattern：定义一个模式，如果通过status指令来查看服务的状态时，没有响应，就会通过ps指令在进程中根据该模式进行查找，如果匹配到，则认为该服务依然在运行</li><li>runlevel：运行级别</li><li>sleep：如果执行了restarted，在则stop和start之间沉睡几秒钟</li><li>state：对当前服务执行启动，停止、重启、重新加载等操作（started,stopped,restarted,reloaded）</li><li>daemon_reload：针对使用systemd的系统，重新加载systemd配置，yes/no</li></ul><p>使用示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ansible test -m service -a &quot;name=httpd state=started enabled=yes&quot;
asnible test -m service -a &quot;name=foo pattern=/usr/bin/foo state=started&quot;
ansible test -m service -a &quot;name=network state=restarted args=eth0&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-8-cron模块" tabindex="-1"><a class="header-anchor" href="#_2-8-cron模块" aria-hidden="true">#</a> 2.8 cron模块</h3><p>用于管理计划任务</p><p>包含如下选项：</p><ul><li>backup：对远程主机上的原任务计划内容修改之前做备份</li><li>cron_file：如果指定该选项，则用该文件替换远程主机上的cron.d目录下的用户的任务计划</li><li>day：日（1-31，<em>，</em>/2,……）</li><li>hour：小时（0-23，<em>，</em>/2，……）</li><li>minute：分钟（0-59，<em>，</em>/2，……）</li><li>month：月（1-12，<em>，</em>/2，……）</li><li>weekday：周（0-7，*，……）</li><li>job：要执行的任务，依赖于state=present</li><li>name：该任务的描述</li><li>special_time：指定什么时候执行，参数：reboot,yearly,annually,monthly,weekly,daily,hourly</li><li>state：确认该任务计划是创建还是删除</li><li>user：以哪个用户的身份执行</li></ul><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;name=&quot;a job for reboot&quot; special_time=reboot job=&quot;/some/job.sh&quot;&#39;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;name=&quot;yum autoupdate&quot; weekday=&quot;2&quot; minute=0 hour=12 user=&quot;root&quot;&#39;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token function">cron</span>  <span class="token parameter variable">-a</span> <span class="token string">&#39;backup=&quot;True&quot; name=&quot;test&quot; minute=&quot;0&quot; hour=&quot;5,2&quot; job=&quot;ls -alh &gt; /dev/null&quot;&#39;</span>
ansilbe <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;cron_file=ansible_yum-autoupdate state=absent&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-9-user模块与group模块" tabindex="-1"><a class="header-anchor" href="#_2-9-user模块与group模块" aria-hidden="true">#</a> 2.9 user模块与group模块</h3><p>user模块是请求的是useradd, userdel, usermod三个指令，goup模块请求的是groupadd, groupdel, groupmod 三个指令。</p><h4 id="_2-9-1-user模块" tabindex="-1"><a class="header-anchor" href="#_2-9-1-user模块" aria-hidden="true">#</a> 2.9.1 user模块</h4><ul><li>home：指定用户的家目录，需要与createhome配合使用</li><li>groups：指定用户的属组</li><li>uid：指定用的uid</li><li>password：指定用户的密码</li><li>name：指定用户名</li><li>createhome：是否创建家目录 yes|no</li><li>system：是否为系统用户</li><li>remove：当state=absent时，remove=yes则表示连同家目录一起删除，等价于userdel -r</li><li>state：是创建还是删除</li><li>shell：指定用户的shell环境</li></ul><p>使用示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>user: <span class="token assign-left variable">name</span><span class="token operator">=</span>johnd <span class="token assign-left variable">comment</span><span class="token operator">=</span><span class="token string">&quot;John Doe&quot;</span> <span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">1040</span> <span class="token assign-left variable">group</span><span class="token operator">=</span>admin
user: <span class="token assign-left variable">name</span><span class="token operator">=</span>james <span class="token assign-left variable">shell</span><span class="token operator">=</span>/bin/bash <span class="token assign-left variable">groups</span><span class="token operator">=</span>admins,developers <span class="token assign-left variable">append</span><span class="token operator">=</span>yes user: <span class="token assign-left variable">name</span><span class="token operator">=</span>johnd <span class="token assign-left variable">state</span><span class="token operator">=</span>absent <span class="token assign-left variable">remove</span><span class="token operator">=</span>yes
user: <span class="token assign-left variable">name</span><span class="token operator">=</span>james18 <span class="token assign-left variable">shell</span><span class="token operator">=</span>/bin/zsh <span class="token assign-left variable">groups</span><span class="token operator">=</span>developers <span class="token assign-left variable">expires</span><span class="token operator">=</span><span class="token number">1422403387</span>
<span class="token comment">#生成密钥时，只会生成公钥文件和私钥文件，和直接使用ssh-keygen指令效果相同，不会生成authorized_keys文件</span>
user: <span class="token assign-left variable">name</span><span class="token operator">=</span>test <span class="token assign-left variable">generate_ssh_key</span><span class="token operator">=</span>yes <span class="token assign-left variable">ssh_key_bits</span><span class="token operator">=</span><span class="token number">2048</span> <span class="token assign-left variable">ssh_key_file</span><span class="token operator">=</span>.ssh/id_rsa  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明的是，在指定password参数时，不能使用明文密码，因为后面这一串密码会被直接传送到被管理主机的/etc/shadow文件中，所以需要先将密码字符串进行加密处理。然后将得到的字符串放到password中即可。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>echo &quot;123456&quot; | openssl passwd -1 -salt $(&lt; /dev/urandom tr -dc &#39;[:alnum:]&#39; | head -c 32) -stdin
$1$4P4PlFuE$ur9ObJiT5iHNrb9QnjaIB0

#使用上面的密码创建用户
ansible all -m user -a &#39;name=foo password=&quot;$1$4P4PlFuE$ur9ObJiT5iHNrb9QnjaIB0&quot;&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不同的发行版默认使用的加密方式可能会有区别，具体可以查看/etc/login.defs文件确认，centos 6.5版本使用的是SHA512加密算法。</p></blockquote><h4 id="_2-9-2-group示例" tabindex="-1"><a class="header-anchor" href="#_2-9-2-group示例" aria-hidden="true">#</a> 2.9.2 group示例</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>group: name=somegroup state=present
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-10-synchronize模块" tabindex="-1"><a class="header-anchor" href="#_2-10-synchronize模块" aria-hidden="true">#</a> 2.10 synchronize模块</h3><p>使用rsync同步文件，其参数如下：</p><ul><li>archive: 归档，相当于同时开启recursive(递归)、links、perms、times、owner、group、-D选项都为yes ，默认该项为开启</li><li>checksum: 跳过检测sum值，默认关闭</li><li>compress:是否开启压缩</li><li>copy_links：复制链接文件，默认为no ，注意后面还有一个links参数</li><li>delete: 删除不存在的文件，默认no</li><li>dest：目录路径</li><li>dest_port：默认目录主机上的端口 ，默认是22，走的ssh协议</li><li>dirs：传输目录不进行递归，默认为no，即进行目录递归</li><li>rsync_opts：rsync参数部分</li><li>set_remote_user：主要用于/etc/ansible/hosts中定义或默认使用的用户与rsync使用的用户不同的情况</li><li>mode: push或pull 模块，push模的话，一般用于从本机向远程主机上传文件，pull 模式用于从远程主机上取文件</li></ul><p>使用示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>src=some/relative/path dest=/some/absolute/path rsync_path=&quot;sudo rsync&quot;
src=some/relative/path dest=/some/absolute/path archive=no links=yes
src=some/relative/path dest=/some/absolute/path checksum=yes times=no
src=/tmp/helloworld dest=/var/www/helloword rsync_opts=--no-motd,--exclude=.git mode=pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-11-filesystem模块" tabindex="-1"><a class="header-anchor" href="#_2-11-filesystem模块" aria-hidden="true">#</a> 2.11 filesystem模块</h3><p>在块设备上创建文件系统 常用选项：</p><ul><li>dev：目标块设备</li><li>force：在一个已有文件系统 的设备上强制创建</li><li>fstype：文件系统的类型</li><li>opts：传递给mkfs命令的选项</li></ul><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> filesystem <span class="token parameter variable">-a</span> <span class="token string">&#39;fstype=ext2 dev=/dev/sdb1 force=yes&#39;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> filesystem <span class="token parameter variable">-a</span> <span class="token string">&#39;fstype=ext4 dev=/dev/sdb1 opts=&quot;-cc&quot;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-12-mount模块" tabindex="-1"><a class="header-anchor" href="#_2-12-mount模块" aria-hidden="true">#</a> 2.12 mount模块</h3><p>配置挂载点 选项：</p><ul><li>dump</li><li>fstype：必选项，挂载文件的类型</li><li>name：必选项，挂载点</li><li>opts：传递给mount命令的参数</li><li>src：必选项，要挂载的文件</li><li>state：必选项 <ul><li>present：只处理fstab中的配置</li><li>absent：删除挂载点</li><li>mounted：自动创建挂载点并挂载之</li><li>umounted：卸载</li></ul></li></ul><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>name=/mnt/dvd src=/dev/sr0 fstype=iso9660 opts=ro state=present
name=/srv/disk src=&#39;LABEL=SOME_LABEL&#39; state=present
name=/home src=&#39;UUID=b3e48f45-f933-4c8e-a700-22a159ec9077&#39; opts=noatime state=present

ansible test -a &#39;dd if=/dev/zero of=/disk.img bs=4k count=1024&#39;
ansible test -a &#39;losetup /dev/loop0 /disk.img&#39;
ansible test -m filesystem &#39;fstype=ext4 force=yes opts=-F dev=/dev/loop0&#39;
ansible test -m mount &#39;name=/mnt src=/dev/loop0 fstype=ext4 state=mounted opts=rw&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-13-get-url-模块" tabindex="-1"><a class="header-anchor" href="#_2-13-get-url-模块" aria-hidden="true">#</a> 2.13 get_url 模块</h3><p>该模块主要用于从http、ftp、https服务器上下载文件（类似于wget），主要有如下选项：</p><ul><li>sha256sum：下载完成后进行sha256 check；</li><li>timeout：下载超时时间，默认10s</li><li>url：下载的URL</li><li>url_password、url_username：主要用于需要用户名密码进行验证的情况</li><li>use_proxy：是事使用代理，代理需事先在环境变更中定义</li></ul><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>get_url: url=http://example.com/path/file.conf dest=/etc/foo.conf mode=0440
get_url: url=http://example.com/path/file.conf dest=/etc/foo.conf sha256sum=b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-14-unarchive模块" tabindex="-1"><a class="header-anchor" href="#_2-14-unarchive模块" aria-hidden="true">#</a> 2.14 unarchive模块</h3><p>用于解压文件，模块包含如下选项：</p><ul><li>copy：在解压文件之前，是否先将文件复制到远程主机，默认为yes。若为no，则要求目标主机上压缩包必须存在。</li><li>creates：指定一个文件名，当该文件存在时，则解压指令不执行</li><li>dest：远程主机上的一个路径，即文件解压的路径</li><li>group：解压后的目录或文件的属组</li><li>list_files：如果为yes，则会列出压缩包里的文件，默认为no，2.0版本新增的选项</li><li>mode：解决后文件的权限</li><li>src：如果copy为yes，则需要指定压缩文件的源路径</li><li>owner：解压后文件或目录的属主</li></ul><p>示例如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- unarchive: src=foo.tgz dest=/var/lib/foo
- unarchive: src=/tmp/foo.zip dest=/usr/local/bin copy=no
- unarchive: src=https://example.com/example.zip dest=/usr/local/bin copy=no
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-15-debug" tabindex="-1"><a class="header-anchor" href="#_2-15-debug" aria-hidden="true">#</a> 2.15 debug</h3><p>用于输出调试一些数据，模块包含如下选项：</p>`,101),o=e("li",null,"var：只能输出变量的值，变量调用无需加任何东西，只需数据变量名称",-1),d=s(`<p>示例如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ansible localhost <span class="token parameter variable">-e</span> <span class="token string">&#39;str=world&#39;</span> <span class="token parameter variable">-m</span> debug <span class="token parameter variable">-a</span> <span class="token string">&#39;msg=&quot;hello {{str}}&quot;&#39;</span>
localhost <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;msg&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;hello world&quot;</span>
<span class="token punctuation">}</span>

$ ansible localhost <span class="token parameter variable">-e</span> <span class="token string">&#39;str=&quot;hello world&quot;&#39;</span> <span class="token parameter variable">-m</span> debug <span class="token parameter variable">-a</span> <span class="token string">&#39;var=str&#39;</span>
localhost <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;str&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;hello world&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>参考链接：</p><p>https://www.cnblogs.com/breezey/p/8810414.html</p><p>https://www.cnblogs.com/breezey/p/8811187.html</p><p>https://blog.51cto.com/cloumn/blog/1544</p></blockquote>`,3);function c(p,u){return n(),l("div",null,[r,e("ul",null,[e("li",null,'msg：可以输出字符串，可以输出变量的值，变量调用需加"'+i()+'"',1),o]),d])}const v=a(t,[["render",c],["__file","ad-hoc.html.vue"]]);export{v as default};
