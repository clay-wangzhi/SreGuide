const n=JSON.parse('{"key":"v-e021017c","path":"/code/shell/appendix/T_ascii_table.html","title":"附录 T. ASCII 表","lang":"zh-CN","frontmatter":{"author":"LinuxStory","category":"Linux","tag":["Bash"],"description":"附录 T. ASCII 表 传统上，这类书的附录会有一个 ASCII 表。但本书不会。取而代之的是这些生成一张完整 ASCII 表的简短脚本。 例 T-1. 一个生成 ASCII 表的脚本 #!/bin/bash # ascii.sh # ver. 0.2, reldate 26 Aug 2008 # Patched by ABS Guide author. # Original script by Sebastian Arming. # Used with permission (thanks!). exec &gt;ASCII.txt # Save stdout to file, #+ as in the example scripts #+ reassign-stdout.sh and upperconv.sh. MAXNUM=256 COLUMNS=5 OCT=8 OCTSQU=64 LITTLESPACE=-3 BIGSPACE=-5 i=1 # Decimal counter o=1 # Octal counter while [ \\"$i\\" -lt \\"$MAXNUM\\" ]; do # We don\'t have to count past 400 octal. paddi=\\" $i\\" echo -n \\"${paddi: $BIGSPACE} \\" # Column spacing. paddo=\\"00$o\\" # echo -ne \\"\\\\\\\\${paddo: $LITTLESPACE}\\" # Original. echo -ne \\"\\\\\\\\0${paddo: $LITTLESPACE}\\" # Fixup. # ^ echo -n \\" \\" if (( i % $COLUMNS == 0)); then # New line. echo fi ((i++, o++)) # The octal notation for 8 is 10, and 64 decimal is 100 octal. (( i % $OCT == 0)) &amp;&amp; ((o+=2)) (( i % $OCTSQU == 0)) &amp;&amp; ((o+=20)) done exit $? # Compare this script with the \\"pr-asc.sh\\" example. # This one handles \\"unprintable\\" characters. # Exercise: # Rewrite this script to use decimal numbers, rather than octal.","head":[["meta",{"property":"og:url","content":"https://clay-wangzhi.com/code/shell/appendix/T_ascii_table.html"}],["meta",{"property":"og:site_name","content":"SRE运维进阶之路"}],["meta",{"property":"og:title","content":"附录 T. ASCII 表"}],["meta",{"property":"og:description","content":"附录 T. ASCII 表 传统上，这类书的附录会有一个 ASCII 表。但本书不会。取而代之的是这些生成一张完整 ASCII 表的简短脚本。 例 T-1. 一个生成 ASCII 表的脚本 #!/bin/bash # ascii.sh # ver. 0.2, reldate 26 Aug 2008 # Patched by ABS Guide author. # Original script by Sebastian Arming. # Used with permission (thanks!). exec &gt;ASCII.txt # Save stdout to file, #+ as in the example scripts #+ reassign-stdout.sh and upperconv.sh. MAXNUM=256 COLUMNS=5 OCT=8 OCTSQU=64 LITTLESPACE=-3 BIGSPACE=-5 i=1 # Decimal counter o=1 # Octal counter while [ \\"$i\\" -lt \\"$MAXNUM\\" ]; do # We don\'t have to count past 400 octal. paddi=\\" $i\\" echo -n \\"${paddi: $BIGSPACE} \\" # Column spacing. paddo=\\"00$o\\" # echo -ne \\"\\\\\\\\${paddo: $LITTLESPACE}\\" # Original. echo -ne \\"\\\\\\\\0${paddo: $LITTLESPACE}\\" # Fixup. # ^ echo -n \\" \\" if (( i % $COLUMNS == 0)); then # New line. echo fi ((i++, o++)) # The octal notation for 8 is 10, and 64 decimal is 100 octal. (( i % $OCT == 0)) &amp;&amp; ((o+=2)) (( i % $OCTSQU == 0)) &amp;&amp; ((o+=20)) done exit $? # Compare this script with the \\"pr-asc.sh\\" example. # This one handles \\"unprintable\\" characters. # Exercise: # Rewrite this script to use decimal numbers, rather than octal."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-19T13:08:31.000Z"}],["meta",{"property":"article:author","content":"LinuxStory"}],["meta",{"property":"article:tag","content":"Bash"}],["meta",{"property":"article:modified_time","content":"2023-04-19T13:08:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"附录 T. ASCII 表\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-19T13:08:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LinuxStory\\"}]}"]]},"headers":[],"git":{"createdTime":1681909711000,"updatedTime":1681909711000,"contributors":[{"name":"clay-wangzhi","email":"clay.wangzhi@gmail.com","commits":1}]},"readingTime":{"minutes":2.29,"words":687},"filePathRelative":"code/shell/appendix/T_ascii_table.md","localizedDate":"2023年4月19日","excerpt":"<h1> 附录 T. ASCII 表</h1>\\n<p>传统上，这类书的附录会有一个 ASCII 表。但本书不会。取而代之的是这些生成一张完整 ASCII 表的简短脚本。</p>\\n<p>例 T-1. 一个生成 ASCII 表的脚本</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token shebang important\\">#!/bin/bash</span>\\n<span class=\\"token comment\\"># ascii.sh</span>\\n<span class=\\"token comment\\"># ver. 0.2, reldate 26 Aug 2008</span>\\n<span class=\\"token comment\\"># Patched by ABS Guide author.</span>\\n\\n<span class=\\"token comment\\"># Original script by Sebastian Arming.</span>\\n<span class=\\"token comment\\"># Used with permission (thanks!).</span>\\n\\n<span class=\\"token builtin class-name\\">exec</span> <span class=\\"token operator\\">&gt;</span>ASCII.txt         <span class=\\"token comment\\">#  Save stdout to file,</span>\\n                        <span class=\\"token comment\\">#+ as in the example scripts</span>\\n                        <span class=\\"token comment\\">#+ reassign-stdout.sh and upperconv.sh.</span>\\n\\n<span class=\\"token assign-left variable\\">MAXNUM</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">256</span>\\n<span class=\\"token assign-left variable\\"><span class=\\"token environment constant\\">COLUMNS</span></span><span class=\\"token operator\\">=</span><span class=\\"token number\\">5</span>\\n<span class=\\"token assign-left variable\\">OCT</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">8</span>\\n<span class=\\"token assign-left variable\\">OCTSQU</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">64</span>\\n<span class=\\"token assign-left variable\\">LITTLESPACE</span><span class=\\"token operator\\">=</span>-3\\n<span class=\\"token assign-left variable\\">BIGSPACE</span><span class=\\"token operator\\">=</span>-5\\n\\n<span class=\\"token assign-left variable\\">i</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span> <span class=\\"token comment\\"># Decimal counter</span>\\n<span class=\\"token assign-left variable\\">o</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span> <span class=\\"token comment\\"># Octal counter</span>\\n\\n<span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">[</span> <span class=\\"token string\\">\\"<span class=\\"token variable\\">$i</span>\\"</span> <span class=\\"token parameter variable\\">-lt</span> <span class=\\"token string\\">\\"<span class=\\"token variable\\">$MAXNUM</span>\\"</span> <span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">do</span>  <span class=\\"token comment\\"># We don\'t have to count past 400 octal.</span>\\n        <span class=\\"token assign-left variable\\">paddi</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"    <span class=\\"token variable\\">$i</span>\\"</span>\\n        <span class=\\"token builtin class-name\\">echo</span> <span class=\\"token parameter variable\\">-n</span> <span class=\\"token string\\">\\"<span class=\\"token variable\\">${paddi<span class=\\"token operator\\">:</span> $BIGSPACE}</span>  \\"</span>       <span class=\\"token comment\\"># Column spacing.</span>\\n        <span class=\\"token assign-left variable\\">paddo</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"00<span class=\\"token variable\\">$o</span>\\"</span>\\n<span class=\\"token comment\\">#       echo -ne \\"\\\\\\\\${paddo: $LITTLESPACE}\\"   # Original.</span>\\n        <span class=\\"token builtin class-name\\">echo</span> <span class=\\"token parameter variable\\">-ne</span> <span class=\\"token string\\">\\"<span class=\\"token entity\\" title=\\"\\\\\\\\\\">\\\\\\\\</span>0<span class=\\"token variable\\">${paddo<span class=\\"token operator\\">:</span> $LITTLESPACE}</span>\\"</span>  <span class=\\"token comment\\"># Fixup.</span>\\n<span class=\\"token comment\\">#                   ^</span>\\n        <span class=\\"token builtin class-name\\">echo</span> <span class=\\"token parameter variable\\">-n</span> <span class=\\"token string\\">\\"     \\"</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token variable\\"><span class=\\"token punctuation\\">((</span> i <span class=\\"token operator\\">%</span> $COLUMNS <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">))</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">then</span>       <span class=\\"token comment\\"># New line.</span>\\n           <span class=\\"token builtin class-name\\">echo</span>\\n        <span class=\\"token keyword\\">fi</span>\\n        <span class=\\"token variable\\"><span class=\\"token punctuation\\">((</span>i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">,</span> o<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">))</span></span>\\n        <span class=\\"token comment\\"># The octal notation for 8 is 10, and 64 decimal is 100 octal.</span>\\n        <span class=\\"token variable\\"><span class=\\"token punctuation\\">((</span> i <span class=\\"token operator\\">%</span> $OCT <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">))</span></span>    <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token variable\\"><span class=\\"token punctuation\\">((</span>o<span class=\\"token operator\\">+=</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">))</span></span>\\n        <span class=\\"token variable\\"><span class=\\"token punctuation\\">((</span> i <span class=\\"token operator\\">%</span> $OCTSQU <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">))</span></span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token variable\\"><span class=\\"token punctuation\\">((</span>o<span class=\\"token operator\\">+=</span><span class=\\"token number\\">20</span><span class=\\"token punctuation\\">))</span></span>\\n<span class=\\"token keyword\\">done</span>\\n\\n<span class=\\"token builtin class-name\\">exit</span> <span class=\\"token variable\\">$?</span>\\n\\n<span class=\\"token comment\\"># Compare this script with the \\"pr-asc.sh\\" example.</span>\\n<span class=\\"token comment\\"># This one handles \\"unprintable\\" characters.</span>\\n\\n<span class=\\"token comment\\"># Exercise:</span>\\n<span class=\\"token comment\\"># Rewrite this script to use decimal numbers, rather than octal.</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"LinuxStory"},"autoDesc":true}');export{n as data};
