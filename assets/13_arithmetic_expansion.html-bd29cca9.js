import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c as i,b as n,d as s,e as a,a as t}from"./app-52a338cc.js";const c={},p=n("h1",{id:"第十三章-算术扩展",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第十三章-算术扩展","aria-hidden":"true"},"#"),s(" 第十三章 算术扩展")],-1),d=n("p",null,[s("算术扩展为脚本中的（整数）算术操作提供了强有力的工具。你可以使用反引号、双圆括号或者 "),n("code",null,"let"),s(" 将字符串转换为数学表达式。")],-1),h=n("h3",{id:"差异比较",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#差异比较","aria-hidden":"true"},"#"),s(" 差异比较")],-1),m={id:"使用-反引号-的算术扩展-通常与-expr-一起使用",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#使用-反引号-的算术扩展-通常与-expr-一起使用","aria-hidden":"true"},"#",-1),u={href:"http://tldp.org/LDP/abs/html/commandsub.html#BACKQUOTESREF",target:"_blank",rel:"noopener noreferrer"},_={href:"http://tldp.org/LDP/abs/html/moreadv.html#EXPRREF",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"expr",-1),k=t('<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">z</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $z + <span class="token number">3</span><span class="token variable">`</span></span>         <span class="token comment"># &#39;expr&#39; 命令执行了算术扩展。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',1),f={id:"使用-双圆括号-或-let-的算术扩展。",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#使用-双圆括号-或-let-的算术扩展。","aria-hidden":"true"},"#",-1),x={href:"http://tldp.org/LDP/abs/html/dblparens.html",target:"_blank",rel:"noopener noreferrer"},E={href:"http://tldp.org/LDP/abs/html/internal.html#LETREF",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"let",-1),P=n("code",null,"((...))",-1),D=n("code",null,"$((...))",-1),z={href:"http://tldp.org/LDP/abs/html/internal.html#LETREF",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"let",-1),B=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">z</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$z<span class="token operator">+</span><span class="token number">3</span><span class="token variable">))</span></span>
<span class="token assign-left variable">z</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>z<span class="token operator">+</span><span class="token number">3</span><span class="token variable">))</span></span>                     <span class="token comment"># 同样正确。</span>
                               <span class="token comment"># 在双圆括号内，参数引用形式可用可不用。</span>
                                            
<span class="token comment"># $((EXPRESSION)) 是算术扩展。  # 不要与命令替换混淆。</span>



<span class="token comment"># 双圆括号不是只能用作赋值算术结果。</span>

  <span class="token assign-left variable">n</span><span class="token operator">=</span><span class="token number">0</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;n = <span class="token variable">$n</span>&quot;</span>                <span class="token comment"># n = 0</span>

  <span class="token variable"><span class="token punctuation">((</span> n <span class="token operator">+=</span> <span class="token number">1</span> <span class="token punctuation">))</span></span>                 <span class="token comment"># 自增。</span>
<span class="token comment"># (( $n += 1 )) 是错误用法！</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;n = <span class="token variable">$n</span>&quot;</span>                <span class="token comment"># n = 1</span>


<span class="token builtin class-name">let</span> <span class="token assign-left variable">z</span><span class="token operator">=</span>z+3
<span class="token builtin class-name">let</span> <span class="token string">&quot;z += 3&quot;</span>  <span class="token comment"># 引号允许在赋值表达式中使用空格。</span>
              <span class="token comment"># &#39;let&#39; 事实上执行的算术运算而非算术扩展。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是包含算术扩展的样例：</p>`,2),R={href:"http://tldp.org/LDP/abs/html/moreadv.html#EX45",target:"_blank",rel:"noopener noreferrer"},q={href:"http://tldp.org/LDP/abs/html/loops1.html#EX25",target:"_blank",rel:"noopener noreferrer"},N={href:"http://tldp.org/LDP/abs/html/arrays.html#EX66",target:"_blank",rel:"noopener noreferrer"},T={href:"http://tldp.org/LDP/abs/html/arrays.html#BUBBLE",target:"_blank",rel:"noopener noreferrer"},X={href:"http://tldp.org/LDP/abs/html/contributed-scripts.html#TREE",target:"_blank",rel:"noopener noreferrer"};function F(S,V){const e=o("ExternalLinkIcon");return r(),i("div",null,[p,d,h,n("h4",m,[b,s(" 使用 "),n("a",u,[s("反引号"),a(e)]),s(" 的算术扩展（通常与 "),n("a",_,[v,a(e)]),s(" 一起使用）")]),k,n("h4",f,[g,s(" 使用 "),n("a",x,[s("双圆括号"),a(e)]),s(" 或 "),n("a",E,[L,a(e)]),s(" 的算术扩展。")]),n("p",null,[s("事实上，在算术扩展中，反引号已经被双圆括号 "),P,s(" 和 "),D,s(" 以及 "),n("a",z,[$,a(e)]),s(" 所取代。")]),B,n("ol",null,[n("li",null,[n("a",R,[s("样例 16-9"),a(e)])]),n("li",null,[n("a",q,[s("样例 11-15"),a(e)])]),n("li",null,[n("a",N,[s("样例 27-1"),a(e)])]),n("li",null,[n("a",T,[s("样例 27-11"),a(e)])]),n("li",null,[n("a",X,[s("样例 A-16"),a(e)])])])])}const A=l(c,[["render",F],["__file","13_arithmetic_expansion.html.vue"]]);export{A as default};
