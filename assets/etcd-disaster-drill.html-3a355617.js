import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as s,e as n}from"./app-4e885309.js";const t={},p=n(`<h1 id="etcd-高可用故障演练" tabindex="-1"><a class="header-anchor" href="#etcd-高可用故障演练" aria-hidden="true">#</a> Etcd 高可用故障演练</h1><h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的" aria-hidden="true">#</a> 目的</h2><p>本次演练旨在测试 Kubernetes 的 etcd 高可用性，检验是否能够在其中一个 etcd 节点发生故障的情况下，其他 etcd 节点能够接管其工作，确保集群仍能正常运行。</p><p>集群架构</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/kube-etcd.png" alt=""></p><h2 id="演练场景" tabindex="-1"><a class="header-anchor" href="#演练场景" aria-hidden="true">#</a> 演练场景</h2><p>在一个三节点的 Kubernetes 集群中，我们将模拟其中一个 etcd 节点的故障，观察剩余的 etcd 节点是否能够正常运行。</p><h2 id="演练过程" tabindex="-1"><a class="header-anchor" href="#演练过程" aria-hidden="true">#</a> 演练过程</h2><ol><li><p>确认集群当前健康状态</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get componentstatuses <span class="token comment"># 确认所有组件状态均为正常</span>
kubectl <span class="token parameter variable">-n</span> kube-system get endpoints <span class="token operator">|</span> <span class="token function">grep</span> etcd <span class="token comment"># 确认 etcd Endpoints 列表</span>
kubectl <span class="token parameter variable">-n</span> kube-system get pods <span class="token operator">|</span> <span class="token function">grep</span> etcd <span class="token comment"># 确认 etcd Pod 的数量</span>
<span class="token comment"># 确认etcd 集群状态</span>
<span class="token assign-left variable">ETCD_CA_CERT</span><span class="token operator">=</span><span class="token string">&quot;/etc/kubernetes/pki/etcd/ca.crt&quot;</span>
<span class="token assign-left variable">ETCD_CERT</span><span class="token operator">=</span><span class="token string">&quot;/etc/kubernetes/pki/etcd/server.crt&quot;</span>
<span class="token assign-left variable">ETCD_KEY</span><span class="token operator">=</span><span class="token string">&quot;/etc/kubernetes/pki/etcd/server.key&quot;</span>
<span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span> /usr/local/bin/etcdctl <span class="token parameter variable">--endpoints</span><span class="token operator">=</span>https://127.0.0.1:2379 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--cacert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CA_CERT}</span>&quot;</span> <span class="token parameter variable">--cert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CERT}</span>&quot;</span> <span class="token parameter variable">--key</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_KEY}</span>&quot;</span> member list
<span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span> /usr/local/bin/etcdctl <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token variable">\${HOST1}</span>,<span class="token variable">\${HOST2}</span>,<span class="token variable">\${HOST3}</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--cacert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CA_CERT}</span>&quot;</span> <span class="token parameter variable">--cert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CERT}</span>&quot;</span> <span class="token parameter variable">--key</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_KEY}</span>&quot;</span> endpoint health
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>停止 M3 节点 etcd 服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/clay/etcdbak
<span class="token function">mv</span> /etc/kubernetes/manifests/etcd.yaml /home/clay/etcdbak/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>确认剩余节点是否能正常提供服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 重复执行步骤一命令</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在其他 etcd 节点上执行 kubectl create 命令测试 Kubernetes 集群是否能够正常运行，例如 kubectl create deployment nginx</p><p>持续通过 vip + 域名两种方式，调用 apiserver 服务，统计影响时长</p></li><li><p>启动 M3 节点 etcd 服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> /home/clay/etcdbak/etcd.yaml /etc/kubernetes/manifests/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>确认集群当前健康状态</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 重复执行步骤一命令</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><blockquote><p>🐶 因为现有架构为 apiserver 调用本地 127.0.0.1 的 etcd 服务，所以当 M3 节点 etcd 服务停止后， M3 节点的 apiserver 也不能正常提供服务</p><p>所以 haproxy 和 nginx 都必要配置正确的健康检查策略，可以自动剔除故障节点</p></blockquote><h2 id="演练结果" tabindex="-1"><a class="header-anchor" href="#演练结果" aria-hidden="true">#</a> 演练结果</h2><p>在停止一个 etcd 节点的 etcd 进程后，其他 etcd 节点能够顺利接管其工作，确保 Kubernetes 集群的正常运行。当第一个 etcd 节点重新加入集群后，所有 etcd 节点均能够恢复到健康状态，集群仍然能够正常工作。演练结果证明 Kubernetes 的 etcd 子系统具有较高的可用性，可以有效地应对节点故障的情况。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>通过本次演练，我们验证了 Kubernetes 的 etcd 子系统的高可用性，并了解了在一个节点发生故障的情况下，其他节点是如何接管其工作的。在实际生产环境中，我们建议对 Kubernetes 集群的 etcd 子系统进行高可用性测试，以确保集群能够稳定、可靠地运行。此外，我们还应定期检查 Kubernetes 集群的各个组件状态，确保其正常运行，避免出现故障导致的服务中断。</p>`,14),c=[p];function r(l,i){return e(),s("div",null,c)}const u=a(t,[["render",r],["__file","etcd-disaster-drill.html.vue"]]);export{u as default};
