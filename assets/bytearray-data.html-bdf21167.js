const n=JSON.parse(`{"key":"v-632afeee","path":"/code/python/bytearray-data.html","title":"2.3.3 字节序列","lang":"zh-CN","frontmatter":{"category":"Python","description":"2.3.3 字节序列 Python3 引入两个新的类型 bytes、bytearray。 bytes 不可变字节序列；bytearray 是可变字节数组。 编码与解码 编码：str =&gt; bytes，将字符串这个字符序列使用指定字符集encode编码为一个个字节组成的序列bytes 解码：bytes 或 bytearray =&gt; str，将一个个字节按照某种指定的字符集解码为一个个字符串组成的字符串 print(\\"abc\\".encode()) # 缺省为utf-8编码 print(\\"啊\\".encode()) print(\\"啊\\".encode('utf-8')) print(\\"啊\\".encode('gbk')) print(b'abc'.decode('utf8')) print(b'\\\\xb0\\\\xa1'.decode('gbk')) print(b'\\\\xe5\\\\x95\\\\x8a'.decode())","head":[["meta",{"property":"og:url","content":"https://clay-wangzhi.com/code/python/bytearray-data.html"}],["meta",{"property":"og:site_name","content":"SRE运维进阶之路"}],["meta",{"property":"og:title","content":"2.3.3 字节序列"}],["meta",{"property":"og:description","content":"2.3.3 字节序列 Python3 引入两个新的类型 bytes、bytearray。 bytes 不可变字节序列；bytearray 是可变字节数组。 编码与解码 编码：str =&gt; bytes，将字符串这个字符序列使用指定字符集encode编码为一个个字节组成的序列bytes 解码：bytes 或 bytearray =&gt; str，将一个个字节按照某种指定的字符集解码为一个个字符串组成的字符串 print(\\"abc\\".encode()) # 缺省为utf-8编码 print(\\"啊\\".encode()) print(\\"啊\\".encode('utf-8')) print(\\"啊\\".encode('gbk')) print(b'abc'.decode('utf8')) print(b'\\\\xb0\\\\xa1'.decode('gbk')) print(b'\\\\xe5\\\\x95\\\\x8a'.decode())"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-19T13:08:31.000Z"}],["meta",{"property":"article:author","content":"Clay"}],["meta",{"property":"article:modified_time","content":"2023-04-19T13:08:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2.3.3 字节序列\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-19T13:08:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Clay\\",\\"url\\":\\"https://clay-wangzhi.com\\"}]}"]]},"headers":[{"level":2,"title":"编码与解码","slug":"编码与解码","link":"#编码与解码","children":[]},{"level":2,"title":"ASCII","slug":"ascii","link":"#ascii","children":[]},{"level":2,"title":"bytes 初始化","slug":"bytes-初始化","link":"#bytes-初始化","children":[]},{"level":2,"title":"bytearrary 初始化","slug":"bytearrary-初始化","link":"#bytearrary-初始化","children":[]}],"git":{"createdTime":1681909711000,"updatedTime":1681909711000,"contributors":[{"name":"clay-wangzhi","email":"clay.wangzhi@gmail.com","commits":1}]},"readingTime":{"minutes":4.98,"words":1494},"filePathRelative":"code/python/bytearray-data.md","localizedDate":"2023年4月19日","excerpt":"<h1> 2.3.3 字节序列</h1>\\n<p>Python3 引入两个新的类型 bytes、bytearray。</p>\\n<p>bytes 不可变字节序列；bytearray 是可变字节数组。</p>\\n<h2> 编码与解码</h2>\\n<ul>\\n<li>编码：str =&gt; bytes，将字符串这个字符序列使用指定字符集encode编码为一个个字节组成的序列bytes</li>\\n<li>解码：bytes 或 bytearray =&gt; str，将一个个字节按照某种指定的字符集解码为一个个字符串组成的字符串</li>\\n</ul>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"abc\\"</span><span class=\\"token punctuation\\">.</span>encode<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\"># 缺省为utf-8编码</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"啊\\"</span><span class=\\"token punctuation\\">.</span>encode<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"啊\\"</span><span class=\\"token punctuation\\">.</span>encode<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'utf-8'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"啊\\"</span><span class=\\"token punctuation\\">.</span>encode<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'gbk'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">b'abc'</span><span class=\\"token punctuation\\">.</span>decode<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'utf8'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">b'\\\\xb0\\\\xa1'</span><span class=\\"token punctuation\\">.</span>decode<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'gbk'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">b'\\\\xe5\\\\x95\\\\x8a'</span><span class=\\"token punctuation\\">.</span>decode<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"Clay"},"autoDesc":true}`);export{n as data};
