const e=JSON.parse('{"key":"v-21e01b0d","path":"/code/python/python-generator.html","title":"3.3 生成器","lang":"zh-CN","frontmatter":{"category":"Python","description":"3.3 生成器 要创建一个generator，有很多种方法。 生成器表达式 第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator 语法 (返回值 for 元素 in 可迭代对象 if 条件) 列表解析式的中括号换成小括号就行了 返回一个生成器对象 和列表解析式的区别 生成器表达式是按需计算（或称惰性求值、延迟计算），需要的时候才计算值，返回可迭代对象迭代器，只能迭代一次 列表解析式是立即返回值，返回可迭代对象列表，不是迭代器，可反复迭代","head":[["meta",{"property":"og:url","content":"https://clay-wangzhi.com/code/python/python-generator.html"}],["meta",{"property":"og:site_name","content":"SRE运维进阶之路"}],["meta",{"property":"og:title","content":"3.3 生成器"}],["meta",{"property":"og:description","content":"3.3 生成器 要创建一个generator，有很多种方法。 生成器表达式 第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator 语法 (返回值 for 元素 in 可迭代对象 if 条件) 列表解析式的中括号换成小括号就行了 返回一个生成器对象 和列表解析式的区别 生成器表达式是按需计算（或称惰性求值、延迟计算），需要的时候才计算值，返回可迭代对象迭代器，只能迭代一次 列表解析式是立即返回值，返回可迭代对象列表，不是迭代器，可反复迭代"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-19T13:08:31.000Z"}],["meta",{"property":"article:author","content":"Clay"}],["meta",{"property":"article:modified_time","content":"2023-04-19T13:08:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.3 生成器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-19T13:08:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Clay\\",\\"url\\":\\"https://clay-wangzhi.com\\"}]}"]]},"headers":[{"level":2,"title":"生成器表达式","slug":"生成器表达式","link":"#生成器表达式","children":[]},{"level":2,"title":"生成器函数","slug":"生成器函数","link":"#生成器函数","children":[]}],"git":{"createdTime":1681909711000,"updatedTime":1681909711000,"contributors":[{"name":"clay-wangzhi","email":"clay.wangzhi@gmail.com","commits":1}]},"readingTime":{"minutes":5.81,"words":1744},"filePathRelative":"code/python/python-generator.md","localizedDate":"2023年4月19日","excerpt":"<h1> 3.3 生成器</h1>\\n<p>要创建一个generator，有很多种方法。</p>\\n<h2> 生成器表达式</h2>\\n<p>第一种方法很简单，只要把一个列表生成式的<code>[]</code>改成<code>()</code>，就创建了一个generator</p>\\n<p>语法</p>\\n<ul>\\n<li>(返回值 for 元素 in 可迭代对象 if 条件)</li>\\n<li>列表解析式的中括号换成小括号就行了</li>\\n<li>返回一个生成器对象</li>\\n</ul>\\n<p>和列表解析式的区别</p>\\n<ul>\\n<li>生成器表达式是按需计算（或称惰性求值、延迟计算），需要的时候才计算值，返回可迭代对象迭代器，只能迭代一次</li>\\n<li>列表解析式是立即返回值，返回可迭代对象列表，不是迭代器，可反复迭代</li>\\n</ul>","copyright":{"author":"Clay"},"autoDesc":true}');export{e as data};
