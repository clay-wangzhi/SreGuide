import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-e91902ff.js";const t={},p=e(`<h1 id="_17-io-模型" tabindex="-1"><a class="header-anchor" href="#_17-io-模型" aria-hidden="true">#</a> 17 IO 模型</h1><h2 id="重要概念" tabindex="-1"><a class="header-anchor" href="#重要概念" aria-hidden="true">#</a> 重要概念</h2><h3 id="同步、异步" tabindex="-1"><a class="header-anchor" href="#同步、异步" aria-hidden="true">#</a> 同步、异步</h3><p>函数或方法被调用的时候，调用者是否得到<strong>最终结果</strong>的。 直接得到最终结果结果的，就是同步调用； 不直接得到最终结果的，就是异步调用。</p><h3 id="阻塞、非阻塞" tabindex="-1"><a class="header-anchor" href="#阻塞、非阻塞" aria-hidden="true">#</a> 阻塞、非阻塞</h3><p>函数或方法调用的时候，是否立刻返回。 立即返回就是非阻塞调用； 不立即返回就是阻塞调用。</p><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h3><p>同步、异步，与阻塞、非阻塞不相关。 同步、异步强调的是，是否得到（最终的）<strong>结果</strong>； 阻塞、非阻塞强调是时间，是否<strong>等待</strong>。</p><p>同步与异步区别在于：调用者是否得到了想要的最终结果。 同步就是一直要执行到返回最终结果； 异步就是直接返回了，但是返回的不是最终结果。调用者不能通过这种调用得到结果，以后可以通过被调用者提供的某种方式（被调用者通知调用者、调用者反复查询、回调），来取回最终结果。</p><p>阻塞与非阻塞的区别在于，调用者是否还能干其他事。 阻塞，调用者就只能干等； 非阻塞，调用者可以先去忙会别的，不用一直等。</p><h3 id="联系" tabindex="-1"><a class="header-anchor" href="#联系" aria-hidden="true">#</a> 联系</h3><p>同步阻塞，我啥事不干，就等你打饭打给我。打到饭是结果，而且我啥事不干一直等，同步加阻塞。 同步非阻塞，我等着你打饭给我，饭没好，我不等，但是我无事可做，反复看饭好了没有。打饭是结果，但是我不一直等。</p><p>异步阻塞，我要打饭，你说等叫号，并没有返回饭给我，我啥事不干，就干等着饭好了你叫我。例如，取了号什么不干就等叫自己的号。 异步非阻塞，我要打饭，你给我号，你说等叫号，并没有返回饭给我，我去看电视、玩手机，饭打好了叫我。</p><h2 id="io两个阶段" tabindex="-1"><a class="header-anchor" href="#io两个阶段" aria-hidden="true">#</a> IO两个阶段</h2><p>IO过程分两阶段： 1、数据准备阶段。从设备读取数据到内核空间的缓冲区（淘米，把米放饭锅里煮饭） 2、内核空间复制回用户空间进程缓冲区阶段（盛饭，从内核这个饭锅里面把饭装到碗里来）</p><p>系统调用——read函数、recv函数等</p><h2 id="同步-io-模型" tabindex="-1"><a class="header-anchor" href="#同步-io-模型" aria-hidden="true">#</a> 同步 IO 模型</h2><p>同步IO模型包括 阻塞IO、非阻塞IO、IO多路复用</p><h3 id="阻塞-io" tabindex="-1"><a class="header-anchor" href="#阻塞-io" aria-hidden="true">#</a> 阻塞 IO</h3><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/block_io.png" alt="block_io"></p><h3 id="非阻塞-io" tabindex="-1"><a class="header-anchor" href="#非阻塞-io" aria-hidden="true">#</a> 非阻塞 IO</h3><p>进程调用 recvfrom 操作，如果 IO 设备没有准备好，立即返回 ERROR，进程不阻塞。用户可以再次发起系统调用（可以轮询），如果内核已经准备好，就阻塞，然后复制数据到用户空间。</p><p>第一阶段数据没有准备好，可以先忙别的，等会再来看看。检查数据是否准备好了的过程是非阻塞的。</p><p>第二阶段是阻塞的，即内核空间和用户空间之间复制数据是阻塞的。</p><p>淘米、蒸饭我不阻塞等，反复来询问，一直没有拿到饭。盛饭过程我等着你装好饭，但是要等到盛好饭才算完事，这是同步的，结果就是盛好饭。</p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/unblock-io.png" alt="unblock-io"></p><h3 id="io多路复用" tabindex="-1"><a class="header-anchor" href="#io多路复用" aria-hidden="true">#</a> IO多路复用</h3><p>也称 Event-driven IO。</p><p>所谓 IO 多路复用，就是同时监控多个 IO，有一个准备好了，就不需要等了开始处理，提高了同时处理 IO 的能力。 select几乎所有操作系统平台都支持，poll是对的select的升级。</p><p>epoll，Linux系统内核2.5+开始支持，对select和poll的增强，在监视的基础上，增加回调机制。BSD、 Mac平台有kqueue，Windows有iocp。</p><p>以 select 为例，将关注的 IO 操作告诉 select 函数并调用，进程阻塞，内核“监视” select 关注的文件描述符 fd，被关注的任何一个 fd 对应的IO准备好了数据，select 返回。再使用 read 将数据复制到用户进程。</p><p>select举例： 食堂供应很多菜（众多的IO），你需要吃某三菜一汤，大师傅（操作系统）说要现做，需要你等，好多人都在等菜，谁先好不知道，你只好等待大师傅叫。你的其中一样菜好了，大师傅叫你，说你点的菜有好的了，你得自己遍历找找看哪一样才好了，请服务员把做好的菜打给你。 epoll是有菜准备好了，大师傅喊你去几号窗口直接打菜，不用自己找菜了。</p><p>一般情况下，select 最多能监听1024个 fd（可以修改），但是由于select采用轮询的方式，当管理的 IO 多了，每次都要遍历全部fd，效率低下。 epoll 没有管理的 fd 的上限，且是回调机制，不需遍历，效率很高。</p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/io-more-road.png" alt="io-more-road"></p><h3 id="信号驱动io" tabindex="-1"><a class="header-anchor" href="#信号驱动io" aria-hidden="true">#</a> 信号驱动IO</h3><p>进程在 IO 访问时，先通过 sigaction 系统调用，提交一个信号处理函数，立即返回。进程不阻塞。</p><p>当内核准备好数据后，产生一个 SIGIO 信号并投递给信号处理函数。可以在此函数中调用 recvfrom 函数 操作数据从内核空间复制到用户空间，这段过程进程阻塞。</p><h2 id="异步-io" tabindex="-1"><a class="header-anchor" href="#异步-io" aria-hidden="true">#</a> 异步 IO</h2><p>进程发起异步 IO 请求，立即返回。内核完成 IO 的两个阶段，内核给进程发一个信号。</p><p>举例，来打饭，跟大师傅说饭好了叫你，饭菜准备好了，窗口服务员把饭盛好了打电话叫你。两阶段都是异步的。在整个过程中，进程都可以忙别的，等好了才过来。 举例，今天不想出去到饭店吃饭了，点外卖，饭菜在饭店做好了（第一阶段），快递员从饭店送到你家门口（第二阶段）。 Linux 的 aio 的系统调用，内核从版本2.6开始支持</p><p><img src="https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/io-async.png" alt="io-async"></p><p>前4个都是同步 IO，因为核心操作 recv 函数调用时，进程阻塞直到拿到最终结果为止。</p><p>而异步 IO 进程全程不阻塞。</p><h2 id="python-中-io多路复用" tabindex="-1"><a class="header-anchor" href="#python-中-io多路复用" aria-hidden="true">#</a> Python 中 IO多路复用</h2><p>IO多路复用</p><ul><li>大多数操作系统都支持 select 和 poll</li><li>Linux 2.5+ 支持 epoll</li><li>BSD、Mac支持kqueue</li><li>Solaris 实现了/dev/poll</li><li>Windows的IOCP</li></ul><p>Python 的 select 库实现了 select、poll 系统调用，这个基本上操作系统都支持。对Linux内核2.5+支持了 epoll。</p><p>开发中的选择 1、完全跨平台，使用 select、poll。但是性能较差 2、针对不同操作系统自行选择支持的技术，这样做会提高 IO 处理的性能</p><p>select 维护一个文件描述符数据结构，单个进程使用有上限，通常是1024，线性扫描这个数据结构。效率低。</p><p>pool 和 select 的区别是内部数据结构使用链表，没有这个最大限制，但是依然是线性遍历才知道哪个设备就绪了。 epoll 使用事件通知机制，使用回调机制提高效率。 select/poll 还要从内核空间复制消息到用户空间，而 epoll 通过内核空间和用户空间共享一块内存来减少复制。</p><p><strong>selectors 库</strong></p><p>3.4 版本提供 selectors 库，高级 IO 复用库。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>类层次结构︰
BaseSelector
+-- SelectSelector  实现select
+-- PollSelector   实现poll
+-- EpollSelector   实现epoll
+-- DevpollSelector  实现devpoll
+-- KqueueSelector  实现kqueue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>selectors.DefaultSelector 返回当前平台最有效、性能最高的实现。</p><p>但是，由于没有实现 Windows 下的 IOCP，所以，Windows 下只能退化为 select。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 在selects模块源码最下面有如下代码</span>
<span class="token comment"># Choose the best implementation, roughly:</span>
<span class="token comment">#    epoll|kqueue|devpoll &gt; poll &gt; select.</span>
<span class="token comment"># select() also can&#39;t accept a FD &gt; FD_SETSIZE (usually around 1024)</span>
<span class="token keyword">if</span> <span class="token string">&#39;KqueueSelector&#39;</span> <span class="token keyword">in</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    DefaultSelector <span class="token operator">=</span> KqueueSelector
<span class="token keyword">elif</span> <span class="token string">&#39;EpollSelector&#39;</span> <span class="token keyword">in</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    DefaultSelector <span class="token operator">=</span> EpollSelector
<span class="token keyword">elif</span> <span class="token string">&#39;DevpollSelector&#39;</span> <span class="token keyword">in</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    DefaultSelector <span class="token operator">=</span> DevpollSelector
<span class="token keyword">elif</span> <span class="token string">&#39;PollSelector&#39;</span> <span class="token keyword">in</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    DefaultSelector <span class="token operator">=</span> PollSelector
<span class="token keyword">else</span><span class="token punctuation">:</span>
    DefaultSelector <span class="token operator">=</span> SelectSelector
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事件注册</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SelectSelector</span><span class="token punctuation">(</span>_BaseSelectorImpl<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Select-based selector.&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>fileobj<span class="token punctuation">,</span> events<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> SelectorKey<span class="token punctuation">:</span> <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>为 selector 注册一个文件对象，监视它的 IO 事件。返回 <strong>SelectKey</strong> 对象。</li><li>fileobj 被监视文件对象，例如socket对象</li><li>events 事件，该文件对象必须等待的事件</li><li>data 可选的与此文件对象相关联的不透明数据，例如，关联用来存储每个客户端的会话 ID，关联方法。通过这个参数在关注的事件产生后让selector干什么事。</li></ul><table><thead><tr><th>Event 常量</th><th>含义</th></tr></thead><tbody><tr><td>EVENT_READ</td><td>可读 0b01，内核已经准备好输入设备，可以开始读了</td></tr><tr><td>EVENT_WRITE</td><td>可写 0b10，内核准备好了，可以往里写了</td></tr></tbody></table><p>selectors.SelectorKey 有4个属性：</p><ol><li>fileobj 注册的文件对象</li><li>fd 文件描述符</li><li>events 等待上面的文件描述符的文件对象的事件</li><li>data 注册时关联的数据</li></ol><p><strong>练习：IO 多路复用 TCP Server</strong></p><p>完成一个 TCP Server，能够接受客户端请求并回应客户端消息。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> selectors
<span class="token keyword">import</span> threading
<span class="token keyword">import</span> socket
<span class="token keyword">import</span> time
<span class="token keyword">import</span> logging

FORMAT <span class="token operator">=</span> <span class="token string">&quot;%(asctime)s %(threadName)s %(thread)d %(message)s&quot;</span>
logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span><span class="token builtin">format</span><span class="token operator">=</span>FORMAT<span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>

<span class="token comment"># 构建本系统最优Selector</span>
selector <span class="token operator">=</span> selectors<span class="token punctuation">.</span>DefaultSelector<span class="token punctuation">(</span><span class="token punctuation">)</span>

sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># TCP Server</span>
sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>

sock<span class="token punctuation">.</span>setblocking<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># 注意：建议非阻塞</span>

<span class="token comment"># 回调函数，sock的读事件</span>
<span class="token comment"># 形参自定义</span>
<span class="token keyword">def</span> <span class="token function">accept</span><span class="token punctuation">(</span>sock<span class="token punctuation">:</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;mask: 事件掩码&quot;&quot;&quot;</span>
    conn<span class="token punctuation">,</span> raddr <span class="token operator">=</span> sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span>setblocking<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># 非阻塞</span>

    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;new client socket {} in accept.&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 注册sock的被关注事件，返回SelectorKey对象</span>
<span class="token comment"># key记录了fileobj, fileobj的fd, events, data</span>
key <span class="token operator">=</span> selector<span class="token punctuation">.</span>register<span class="token punctuation">(</span>sock<span class="token punctuation">,</span> selectors<span class="token punctuation">.</span>EVENT_READ<span class="token punctuation">,</span> accept<span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span>key<span class="token punctuation">)</span>

<span class="token comment"># 开始循环</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token comment"># 监听注册的对象的事件，发生被关注事件则返回events</span>
    events <span class="token operator">=</span> selector<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>events<span class="token punctuation">)</span> <span class="token comment"># [(key, mask)]</span>
    <span class="token comment"># 表示那个关注的对象的某事件发生了</span>
    <span class="token keyword">for</span> key<span class="token punctuation">,</span> mask <span class="token keyword">in</span> events<span class="token punctuation">:</span>
        <span class="token comment"># key.data =&gt; accept; key.fileobj =&gt; sock</span>
        callback <span class="token operator">=</span> key<span class="token punctuation">.</span>data
        callback<span class="token punctuation">(</span>key<span class="token punctuation">.</span>fileobj<span class="token punctuation">,</span> mask<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码完成了 Server socket 的读事件的监听。注意，select() 方法会阻塞到监控的对象的等待的事件有发生（监听的读或者写就绪）。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> selectors
<span class="token keyword">import</span> threading
<span class="token keyword">import</span> socket
<span class="token keyword">import</span> time
<span class="token keyword">import</span> logging

FORMAT <span class="token operator">=</span> <span class="token string">&quot;%(asctime)s %(threadName)s %(thread)d %(message)s&quot;</span>
logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span><span class="token builtin">format</span><span class="token operator">=</span>FORMAT<span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>

<span class="token comment"># 构建本系统最优Selector</span>
selector <span class="token operator">=</span> selectors<span class="token punctuation">.</span>DefaultSelector<span class="token punctuation">(</span><span class="token punctuation">)</span>

sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># TCP Server</span>
sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>

sock<span class="token punctuation">.</span>setblocking<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># 注意：建议非阻塞</span>

<span class="token comment"># 回调函数，sock的读事件</span>
<span class="token comment"># 形参自定义</span>
<span class="token keyword">def</span> <span class="token function">accept</span><span class="token punctuation">(</span>sock<span class="token punctuation">:</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;mask: 事件掩码&quot;&quot;&quot;</span>
    conn<span class="token punctuation">,</span> raddr <span class="token operator">=</span> sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span>setblocking<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># 非阻塞</span>

    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;new client socket {} in accept.&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span>

    key <span class="token operator">=</span> selector<span class="token punctuation">.</span>register<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> selectors<span class="token punctuation">.</span>EVENT_READ<span class="token punctuation">,</span> read<span class="token punctuation">)</span>
    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span>key<span class="token punctuation">)</span>

<span class="token comment"># 回调函数</span>
<span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>conn<span class="token punctuation">:</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
    msg <span class="token operator">=</span> <span class="token string">&quot;Your msg = {} ~~~&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 注册sock的被关注事件，返回SelectorKey对象</span>
<span class="token comment"># key记录了fileobj, fileobj的fd, events, data</span>
key <span class="token operator">=</span> selector<span class="token punctuation">.</span>register<span class="token punctuation">(</span>sock<span class="token punctuation">,</span> selectors<span class="token punctuation">.</span>EVENT_READ<span class="token punctuation">,</span> accept<span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span>key<span class="token punctuation">)</span>

<span class="token comment"># 开始循环</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token comment"># 监听注册的对象的事件，发生被关注事件则返回events</span>
    events <span class="token operator">=</span> selector<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>events<span class="token punctuation">)</span> <span class="token comment"># [(key, mask)]</span>
    <span class="token comment"># 表示那个关注的对象的某事件发生了</span>
    <span class="token keyword">for</span> key<span class="token punctuation">,</span> mask <span class="token keyword">in</span> events<span class="token punctuation">:</span>
        <span class="token comment"># key.data =&gt; accept; key.fileobj =&gt; sock</span>
        callback <span class="token operator">=</span> key<span class="token punctuation">.</span>data
        callback<span class="token punctuation">(</span>key<span class="token punctuation">.</span>fileobj<span class="token punctuation">,</span> mask<span class="token punctuation">)</span>





</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,67),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","python-io-model.html.vue"]]);export{d as default};
