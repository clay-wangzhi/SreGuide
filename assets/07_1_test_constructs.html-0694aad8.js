const e=JSON.parse('{"key":"v-d3244104","path":"/code/shell/part2/07_1_test_constructs.html","title":"7.1 测试结构","lang":"zh-CN","frontmatter":{"author":"LinuxStory","category":"Linux","tag":["Bash"],"description":"7.1 测试结构 if/then 结构是用来检测一系列命令的 退出状态 是否为0（按 UNIX 惯例,退出码 0 表示命令执行成功），如果为0，则执行接下来的一个或多个命令。 测试结构会使用一个特殊的命令 [（参看特殊字符章节 左方括号）。等同于 test 命令，它是一个内建命令，写法更加简洁高效。该命令将其参数视为比较表达式或文件测试，以比较结果作为其退出状态码返回（0 为真，1 为假）。 Bash 在 2.02 版本中引入了扩展测试命令 [[...]]，它提供了一种与其他语言语法更为相似的方式进行比较操作。注意， [[ 是一个 关键字 而非一个命令。 Bash 将 [[ $a -lt $b ]] 视为一整条语句，执行并返回退出状态。 结构 (( ... )) 和 let ... 根据其执行的算术表达式的结果决定退出状态码。这样的 算术扩展 结构可以用来进行 数值比较。","head":[["meta",{"property":"og:url","content":"https://clay-wangzhi.com/code/shell/part2/07_1_test_constructs.html"}],["meta",{"property":"og:site_name","content":"SRE运维进阶之路"}],["meta",{"property":"og:title","content":"7.1 测试结构"}],["meta",{"property":"og:description","content":"7.1 测试结构 if/then 结构是用来检测一系列命令的 退出状态 是否为0（按 UNIX 惯例,退出码 0 表示命令执行成功），如果为0，则执行接下来的一个或多个命令。 测试结构会使用一个特殊的命令 [（参看特殊字符章节 左方括号）。等同于 test 命令，它是一个内建命令，写法更加简洁高效。该命令将其参数视为比较表达式或文件测试，以比较结果作为其退出状态码返回（0 为真，1 为假）。 Bash 在 2.02 版本中引入了扩展测试命令 [[...]]，它提供了一种与其他语言语法更为相似的方式进行比较操作。注意， [[ 是一个 关键字 而非一个命令。 Bash 将 [[ $a -lt $b ]] 视为一整条语句，执行并返回退出状态。 结构 (( ... )) 和 let ... 根据其执行的算术表达式的结果决定退出状态码。这样的 算术扩展 结构可以用来进行 数值比较。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-19T13:08:31.000Z"}],["meta",{"property":"article:author","content":"LinuxStory"}],["meta",{"property":"article:tag","content":"Bash"}],["meta",{"property":"article:modified_time","content":"2023-04-19T13:08:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"7.1 测试结构\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-19T13:08:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LinuxStory\\"}]}"]]},"headers":[{"level":3,"title":"Else if 与 elif","slug":"else-if-与-elif","link":"#else-if-与-elif","children":[]}],"git":{"createdTime":1681909711000,"updatedTime":1681909711000,"contributors":[{"name":"clay-wangzhi","email":"clay.wangzhi@gmail.com","commits":1}]},"readingTime":{"minutes":7.74,"words":2323},"filePathRelative":"code/shell/part2/07_1_test_constructs.md","localizedDate":"2023年4月19日","excerpt":"<h1> 7.1 测试结构</h1>\\n<ul>\\n<li>\\n<p><code>if/then</code> 结构是用来检测一系列命令的 <a href=\\"http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">退出状态</a> 是否为0（按 UNIX 惯例,退出码 0 表示命令执行成功），如果为0，则执行接下来的一个或多个命令。</p>\\n</li>\\n<li>\\n<p>测试结构会使用一个特殊的命令 <code>[</code>（参看特殊字符章节 <a href=\\"http://tldp.org/LDP/abs/html/special-chars.html#LEFTBRACKET\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">左方括号</a>）。等同于 <code>test</code> 命令，它是一个<a href=\\"http://tldp.org/LDP/abs/html/internal.html#BUILTINREF\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">内建命令</a>，写法更加简洁高效。该命令将其参数视为比较表达式或文件测试，以比较结果作为其退出状态码返回（0 为真，1 为假）。</p>\\n</li>\\n<li>\\n<p>Bash 在 2.02 版本中引入了扩展测试命令 <a href=\\"http://tldp.org/LDP/abs/html/testconstructs.html#DBLBRACKETS\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>[[...]]</code></a>，它提供了一种与其他语言语法更为相似的方式进行比较操作。注意， <code>[[</code> 是一个 <a href=\\"http://tldp.org/LDP/abs/html/internal.html#KEYWORDREF\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">关键字</a> 而非一个命令。</p>\\n<p>Bash 将 <code>[[ $a -lt $b ]]</code> 视为一整条语句，执行并返回退出状态。</p>\\n</li>\\n<li>\\n<p>结构 <a href=\\"http://tldp.org/LDP/abs/html/dblparens.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>(( ... ))</code></a> 和 <a href=\\"http://tldp.org/LDP/abs/html/internal.html#LETREF\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>let ...</code></a> 根据其执行的算术表达式的结果决定退出状态码。这样的 <a href=\\"http://tldp.org/LDP/abs/html/arithexp.html#ARITHEXPREF\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">算术扩展</a> 结构可以用来进行 <a href=\\"http://tldp.org/LDP/abs/html/comparison-ops.html#ICOMPARISON1\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">数值比较</a>。</p>\\n</li>\\n</ul>","copyright":{"author":"LinuxStory"},"autoDesc":true}');export{e as data};
