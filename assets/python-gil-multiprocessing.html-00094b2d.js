import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-f15250d3.js";const p={},e=t(`<h1 id="_10-1-多进程" tabindex="-1"><a class="header-anchor" href="#_10-1-多进程" aria-hidden="true">#</a> 10.1 多进程</h1><h2 id="gil" tabindex="-1"><a class="header-anchor" href="#gil" aria-hidden="true">#</a> GIL</h2><p>CPython 在解释器进程级别有一把锁，叫做GIL，即全局解释器锁。</p><p>GIL 保证CPython进程中，只有一个线程执行字节码。甚至是在多核CPU的情况下，也只允许同时只能有一个CPU核心上运行该进程的一个线程。</p><p>CPython中</p><ul><li>IO密集型，某个线程阻塞，GIL会释放，就会调度其他就绪线程</li><li>CPU密集型，当前线程可能会连续的获得GIL，导致其它线程几乎无法使用CPU</li><li>在CPython中由于有GIL存在，IO密集型，使用多线程较为合算；CPU密集型，使用多进程，要绕开GIL</li></ul><p>新版CPython正在努力优化GIL的问题，但不是移除。 如果在意多线程的效率问题，请绕行，选择其它语言erlang、Go等。</p><blockquote><p>Python中绝大多数内置数据结构的读、写操作都是原子操作。 由于GIL的存在，Python的内置数据类型在多线程编程的时候就变成了安全的了，但是实际上它们本身 不是线程安全类型。</p></blockquote><p>保留GIL的原因： GvR坚持的简单哲学，对于初学者门槛低，不需要高深的系统知识也能安全、简单的使用Python。 而且移除GIL，会降低CPython单线程的执行效率。 测试下面2个程序，请问下面的程序是计算密集型还是IO密集型？</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> logging
<span class="token keyword">import</span> datetime

logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&quot;%(thread)s %(message)s&quot;</span><span class="token punctuation">)</span>
start <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 计算</span>
<span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>

calc<span class="token punctuation">(</span><span class="token punctuation">)</span>
calc<span class="token punctuation">(</span><span class="token punctuation">)</span>
calc<span class="token punctuation">(</span><span class="token punctuation">)</span>
calc<span class="token punctuation">(</span><span class="token punctuation">)</span>
delta <span class="token operator">=</span> <span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span>delta<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> threading
<span class="token keyword">import</span> logging
<span class="token keyword">import</span> datetime

logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&quot;%(thread)s %(message)s&quot;</span><span class="token punctuation">)</span>
start <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 计算</span>
<span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>

t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>calc<span class="token punctuation">)</span>
t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>calc<span class="token punctuation">)</span>
t3 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>calc<span class="token punctuation">)</span>
t4 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>calc<span class="token punctuation">)</span>
t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
t3<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
t4<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
t3<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
t4<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
delta <span class="token operator">=</span> <span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span>delta<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，不要在代码中出现print等访问IO的语句。访问IO，线程阻塞，会释放GIL锁，其他线程被调度。</p><p>程序1是单线程程序，所有calc()依次执行，根本就不是并发。在主线程内，函数串行执行。 程序2是多线程程序，calc()执行在不同的线程中，但是由于GIL的存在，线程的执行变成了假并发。但是这些线程可以被调度到不同的CPU核心上执行，只不过GIL让同一时间该进程只有一个线程被执行。</p><p>从两段程序测试的结果来看，CPython中多线程根本没有任何优势，和一个线程执行时间相当。因为GIL的存在，尤其是像上面的计算密集型程序，和单线程串行效果相当。这样，实际上就没有用上CPU多核心的优势。</p><h2 id="多进程" tabindex="-1"><a class="header-anchor" href="#多进程" aria-hidden="true">#</a> 多进程</h2><p>由于Python的GIL全局解释器锁存在，多线程未必是CPU密集型程序的好的选择。 多进程可以完全独立的进程环境中运行程序，可以较充分地利用多处理器。 但是进程本身的隔离带来的数据不共享也是一个问题。而且线程比进程轻量级。</p><h3 id="multiprocessing" tabindex="-1"><a class="header-anchor" href="#multiprocessing" aria-hidden="true">#</a> multiprocessing</h3><p><strong>Process类</strong></p><p>Process类遵循了Thread类的API，减少了学习难度。</p><p>先看一个例子，前面介绍的单线程、多线程比较的例子的多进程版本</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> multiprocessing
<span class="token keyword">import</span> datetime


<span class="token comment"># 计算</span>
<span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> i<span class="token punctuation">,</span> <span class="token builtin">sum</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    start <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>

    ps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>calc<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;calc-{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
        ps<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> p <span class="token keyword">in</span> ps<span class="token punctuation">:</span>
        p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>exitcode<span class="token punctuation">)</span>

    delta <span class="token operator">=</span> <span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span>
    <span class="token keyword">for</span> p <span class="token keyword">in</span> ps<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>exitcode<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;===end===&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上面这个程序，在同一主上运行时长的对比</p><ul><li>使用单线程、多线程跑了4分钟多</li><li>多进程用了1分半</li></ul><p>看到了多个进程都在使用CPU，这是真并行，而且进程库几乎没有什么学习难度</p><p>注意：多进程代码一定要放在 <code>__name__ == &#39;__main__&#39;</code> 下面执行。</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>pid</td><td>进程 id</td></tr><tr><td>exitcode</td><td>进程的退出状态码</td></tr><tr><td>terminate()</td><td>终止指定的进程</td></tr></tbody></table><h3 id="进程间同步" tabindex="-1"><a class="header-anchor" href="#进程间同步" aria-hidden="true">#</a> 进程间同步</h3><p>Python 在进程间同步提供了和线程同步一样的类，使用的方法一样，使用的效果也类似。 不过，进程间代价要高于线程间，而且系统底层实现是不同的，只不过 Python 屏蔽了这些不同之处，让用户简单使用多进程。 multiprocessing 还提供共享内存、服务器进程来共享数据，还提供了用于进程间通讯的 Queue队列、Pipe 管道。</p><p>通信方式不同</p><ol><li>多进程就是启动多个解释器进程，进程间通信必须序列化、反序列化</li><li>数据的线程安全性问题 如果每个进程中没有实现多线程，GIL可以说没什么用了</li></ol><h3 id="多进程、多线程的选择" tabindex="-1"><a class="header-anchor" href="#多进程、多线程的选择" aria-hidden="true">#</a> 多进程、多线程的选择</h3><p>1、CPU密集型 CPython中使用到了GIL，多线程的时候锁相互竞争，且多核优势不能发挥，选用Python多进程效率更 高。</p><p>2、IO密集型 在Python中适合是用多线程，可以减少多进程间IO的序列化开销。且在IO等待的时候，切换到其他线程继续执行，效率不错。</p><p><strong>应用</strong></p><p>请求/应答模型：WEB应用中常见的处理模型</p><p>master启动多个worker工作进程，一般和CPU数目相同。发挥多核优势。 worker工作进程中，往往需要操作网络IO和磁盘IO，启动多线程，提高并发处理能力。worker处理用户的请求，往往需要等待数据，处理完请求还要通过网络IO返回响应。 这就是nginx工作模式。</p><h2 id="concurrent-futures包" tabindex="-1"><a class="header-anchor" href="#concurrent-futures包" aria-hidden="true">#</a> concurrent.futures包</h2><p>3.2版本引入的模块。</p><p>异步并行任务编程模块，提供一个高级的异步可执行的便利接口。</p><p>提供了2个池执行器：</p><ul><li>ThreadPoolExecutor 异步调用的线程池的 Executor</li><li>ProcessPoolExecutor 异步调用的进程池的Executor</li></ul><h3 id="threadpoolexecutor对象" tabindex="-1"><a class="header-anchor" href="#threadpoolexecutor对象" aria-hidden="true">#</a> ThreadPoolExecutor对象</h3><p>首先需要定义一个池的执行器对象，Executor类的子类实例。</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>ThreadPoolExecutor(max_workers=1)</td><td>池中至多创建max_workers个线程的池来同时异步执行，返回Executor实例<br>支持上下文，进入时返回自己，退出时调用shutdown(wait=True)</td></tr><tr><td>submit(fn, *args, **kwargs)</td><td>提交执行的函数及其参数，如有空闲开启daemon线程，返回Future类的实例</td></tr><tr><td>shutdown(wait=True)</td><td>清理池，wait 表示是否等待到任务线程完成</td></tr></tbody></table><p>Future 类</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>done()</td><td>如果调用被成功的取消或者执行完成，返回True</td></tr><tr><td>cancelled()</td><td>如果调用被成功的取消，返回True</td></tr><tr><td>running()</td><td>如果正在运行且不能被取消，返回True</td></tr><tr><td>cancel()</td><td>尝试取消调用。如果已经执行且不能取消返回False，否则返回True</td></tr><tr><td>result(timeout=None)</td><td>取返回的结果，timeout为None，一直等待返回；timeout设置到期，抛出<br>concurrent.futures.TimeoutError 异常</td></tr><tr><td>exception(timeout=None)</td><td>取返回的异常，timeout为None，一直等待返回；timeout设置到期，抛出<br>concurrent.futures.TimeoutError 异常</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token punctuation">,</span> wait
<span class="token keyword">import</span> datetime
<span class="token keyword">import</span> logging

FORMAT <span class="token operator">=</span> <span class="token string">&quot;%(asctime)s [%(processName)s %(threadName)s] %(message)s&quot;</span>
logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span><span class="token builtin">format</span><span class="token operator">=</span>FORMAT<span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">sum</span> <span class="token operator">=</span> base
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>
    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">sum</span>

start <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
executor <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> executor<span class="token punctuation">:</span> <span class="token comment"># 默认shutdown阻塞</span>
    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        future <span class="token operator">=</span> executor<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>calc<span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span>
        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>future<span class="token punctuation">)</span>

    <span class="token comment">#wait(fs) # 阻塞</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> f <span class="token keyword">in</span> fs<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> f<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># done不阻塞，result阻塞</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>

delta <span class="token operator">=</span> <span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="processpoolexecutor对象" tabindex="-1"><a class="header-anchor" href="#processpoolexecutor对象" aria-hidden="true">#</a> ProcessPoolExecutor对象</h3><p>方法一样。就是使用多进程完成。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ProcessPoolExecutor<span class="token punctuation">,</span> wait
<span class="token keyword">import</span> datetime
<span class="token keyword">import</span> logging

FORMAT <span class="token operator">=</span> <span class="token string">&quot;%(asctime)s [%(processName)s %(threadName)s] %(message)s&quot;</span>
logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span><span class="token builtin">format</span><span class="token operator">=</span>FORMAT<span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">sum</span> <span class="token operator">=</span> base
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token number">1</span>
    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">sum</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    start <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
    executor <span class="token operator">=</span> ProcessPoolExecutor<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> executor<span class="token punctuation">:</span> <span class="token comment"># 默认shutdown阻塞</span>
        fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            future <span class="token operator">=</span> executor<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>calc<span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span>
            fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>future<span class="token punctuation">)</span>

        <span class="token comment">#wait(fs) # 阻塞</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> f <span class="token keyword">in</span> fs<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> f<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># done不阻塞，result阻塞</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>

    delta <span class="token operator">=</span> <span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong></p><p>该库统一了线程池、进程池调用，简化了编程。 是Python简单的思想哲学的体现。</p><p>唯一的缺点：无法设置线程名称。但这都不值一提。</p>`,53),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","python-gil-multiprocessing.html.vue"]]);export{d as default};
