import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as e,e as n}from"./app-3cf8be0b.js";const t={},r=n(`<h1 id="etcd-概述及运维实践" tabindex="-1"><a class="header-anchor" href="#etcd-概述及运维实践" aria-hidden="true">#</a> Etcd 概述及运维实践</h1><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/Etcd .png" alt=""></p><h2 id="etcd-概述" tabindex="-1"><a class="header-anchor" href="#etcd-概述" aria-hidden="true">#</a> Etcd 概述</h2><h3 id="什么是-etcd" tabindex="-1"><a class="header-anchor" href="#什么是-etcd" aria-hidden="true">#</a> 什么是 Etcd ?</h3><p>Etcd 是 CoreOS 团队于2013年6月发起的开源项目，它的目标是构建一个高可用的分布式键值(key-value)数据库。etcd内部采用<code>raft</code>协议作为一致性算法，Etcd基于 Go 语言实现。</p><p>名字由来，它源于两个方面，unix的“/etc”文件夹和分布式系统(“D”istribute system)的D，组合在一起表示etcd是用于存储分布式配置的信息存储服务。</p><h3 id="kubernetes-为什么用-etcd" tabindex="-1"><a class="header-anchor" href="#kubernetes-为什么用-etcd" aria-hidden="true">#</a> Kubernetes 为什么用 Etcd ?</h3><p>2014年6月，Google 的 Kubernetes 项目诞生了，我们前面所讨论到 Go 语言编写、etcd 高可用、Watch 机制、CAS、TTL等特性正是 Kubernetes 所需要的，它早期的0.4版本，使用的正是 etcd v0.2版本。</p><p>Kubernetes 是如何使用 etcd v2 这些特性的呢？举几个简单小例子。</p><p>当你使用 Kubernetes 声明式 API 部署服务的时候，Kubernetes 的控制器通过 etcd Watch 机制，会实时监听资源变化事件，对比实际状态与期望状态是否一致，并采取协调动作使其一致。Kubernetes 更新数据的时候，通过 CAS 机制保证并发场景下的原子更新，并通过对 key 设置 TTL 来存储 Event 事件，提升Kubernetes 集群的可观测性，基于 TTL 特性，Event 事件 key 到期后可自动删除。</p><p>Kubernetes 项目使用etcd，除了技术因素也与当时的商业竞争有关。CoreOS 是 Kubernetes 容器生态圈的核心成员之一。</p><h3 id="etcd-版本变化" tabindex="-1"><a class="header-anchor" href="#etcd-版本变化" aria-hidden="true">#</a> Etcd 版本变化</h3><p>时间轴图，总结一下 etcd v1/v2 关键特性</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/d0af3537c0eef89b499a82693da23f0e-20240410191510352.png" alt=""></p><p>然而随着 Kubernetes 项目不断发展，v2 版本的瓶颈和缺陷逐渐暴露，遇到了若干性能和稳定性问题，Kubernetes 社区呼吁支持新的存储、批评 etcd 不可靠的声音开始不断出现。</p><p>问题如下</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/881db1b7d05dc40771e9737f3117f5d1-20240410191510378.png" alt=""></p><p>2016年6月，etcd 3.0 诞生，随后 Kubernetes 1.6 发布，默认启用 etcd v3，助力 Kubernetes 支撑5000节点集群规模。</p><p>时间轴及重要特性</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/5f1bf807db06233ed51d142917798b6d-20240410191510416.png" alt=""></p><p>发展到今天，在 GitHub 上 star 数超过46K。在 Kubernetes 的业务场景磨炼下它不断成长，走向稳定和成熟，成为技术圈众所周知的开源产品，而 <strong>v3方案的发布，也标志着 etcd 进入了技术成熟期，成为云原生时代的首选元数据存储产品。</strong></p><h3 id="基础架构" tabindex="-1"><a class="header-anchor" href="#基础架构" aria-hidden="true">#</a> 基础架构</h3><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/34486534722d2748d8cd1172bfe63084-20240410191510506.png" alt=""></p><p>你可以看到，按照分层模型，etcd 可分为 Client 层、API 网络层、Raft 算法层、逻辑层和存储层。这些层的功能如下：</p><ul><li><p><strong>Client 层</strong>：Client 层包括 client v2 和 v3 两个大版本 API 客户端库，提供了简洁易用的 API，同时支持负载均衡、节点间故障自动转移，可极大降低业务使用etcd复杂度，提升开发效率、服务可用性。</p></li><li><p><strong>API 网络层</strong>：API 网络层主要包括 client 访问 server 和 server 节点之间的通信协议。一方面，client 访问 etcd server 的 API 分为 v2 和 v3 两个大版本。v2 API 使用 HTTP/1.x 协议，v3 API 使用 gRPC 协议。同时 v3 通过 etcd grpc-gateway 组件也支持 HTTP/1.x 协议，便于各种语言的服务调用。另一方面，server 之间通信协议，是指节点间通过Raft算法实现数据复制和Leader选举等功能时使用的HTTP协议。</p></li><li><p><strong>Raft 算法层</strong>：Raft 算法层实现了 Leader 选举、日志复制、ReadIndex 等核心算法特性，用于保障 etcd 多个节点间的数据一致性、提升服务可用性等，是etcd的基石和亮点。</p></li><li><p><strong>功能逻辑层</strong>：etcd 核心特性实现层，如典型的 KVServer 模块、MVCC 模块、Auth 鉴权模块、Lease 租约模块、Compactor 压缩模块等，其中 MVCC 模块主要由 treeIndex 模块和 boltdb 模块组成。</p></li><li><p><strong>存储层</strong>：存储层包含预写日志(WAL)模块、快照(Snapshot)模块、boltdb 模块。其中 WAL 可保障 etcd crash 后数据不丢失，boltdb 则保存了集群元数据和用户写入的数据。</p></li></ul><h3 id="概念术语" tabindex="-1"><a class="header-anchor" href="#概念术语" aria-hidden="true">#</a> 概念术语</h3><ul><li>Raft：etcd 所采用的保证分布式系统强一致性的算法。</li><li>Node：一个 Raft 状态机实例。</li><li>Member： 一个 etcd 实例。它管理着一个 Node，并且可以为客户端请求提供服务。</li><li>Cluster：由多个 Member 构成可以协同工作的 etcd 集群。</li><li>Peer：对同一个 etcd 集群中另外一个 Member 的称呼。</li><li>Client： 向 etcd 集群发送 HTTP 请求的客户端。</li><li>WAL：预写式日志，etcd 用于持久化存储的日志格式。</li><li>snapshot：etcd 防止 WAL 文件过多而设置的快照，存储 etcd 数据状态。</li><li>Proxy：etcd 的一种模式，为 etcd 集群提供反向代理服务。</li><li>Leader：Raft 算法中通过竞选而产生的处理所有数据提交的节点。</li><li>Follower：竞选失败的节点作为 Raft 中的从属节点，为算法提供强一致性保证。</li><li>Candidate：当 Follower 超过一定时间接收不到 Leader 的心跳时转变为 Candidate 开始竞选。</li><li>Term：某个节点成为 Leader 到下一次竞选时间，称为一个 Term。</li><li>Index：数据项编号。Raft 中通过 Term 和 Index 来定位数据。</li></ul><h2 id="运维实践" tabindex="-1"><a class="header-anchor" href="#运维实践" aria-hidden="true">#</a> 运维实践</h2><h3 id="etcdctl-常用命令" tabindex="-1"><a class="header-anchor" href="#etcdctl-常用命令" aria-hidden="true">#</a> etcdctl 常用命令</h3><p>全局参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">ETCD_CA_CERT</span><span class="token operator">=</span><span class="token string">&quot;/etc/kubernetes/pki/etcd/ca.crt&quot;</span>
<span class="token assign-left variable">ETCD_CERT</span><span class="token operator">=</span><span class="token string">&quot;/etc/kubernetes/pki/etcd/server.crt&quot;</span>
<span class="token assign-left variable">ETCD_KEY</span><span class="token operator">=</span><span class="token string">&quot;/etc/kubernetes/pki/etcd/server.key&quot;</span>
<span class="token assign-left variable">HOST_1</span><span class="token operator">=</span>https://xxx.xxx.xxx.xxx:2379
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span> etcdctl <span class="token parameter variable">--cacert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CA_CERT}</span>&quot;</span> <span class="token parameter variable">--cert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CERT}</span>&quot;</span> <span class="token parameter variable">--key</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_KEY}</span>&quot;</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${HOST_1}</span>&quot;</span> endpoint status --write-out<span class="token operator">=</span>table 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>常用命令</p><ul><li>键值命令</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 增 &amp; 改</span>
put foo bar
<span class="token comment"># 查</span>
get foo
<span class="token comment"># 根据前缀查询</span>
get <span class="token parameter variable">--prefix</span> <span class="token string">&quot;/demo&quot;</span>
<span class="token comment"># 查询所有 keys</span>
get <span class="token parameter variable">--prefix</span> <span class="token string">&quot;&quot;</span> --keys-only
<span class="token comment"># 删</span>
del foo
<span class="token comment"># 事务，多个操作合并为一个事务</span>
txn <span class="token operator">&lt;&lt;&lt;</span><span class="token string">&#39;mod(&quot;key1&quot;) &gt; &quot;0&quot;

put key1 &quot;overwrote-key1&quot;

put key1 &quot;created-key1&quot;
put key2 &quot;some extra key&quot;

&#39;</span>
<span class="token comment"># 压缩</span>
compaction <span class="token number">1234</span>
<span class="token comment"># 监听</span>
<span class="token function">watch</span> foo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>集群维护命令</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 列出成员</span>
member list
<span class="token comment"># 端点健康情况</span>
endpoint health
<span class="token comment"># 端点状态</span>
endpoint status
<span class="token comment"># 告警列表</span>
alarm list
<span class="token comment"># 解除所有告警</span>
alarm disarm
<span class="token comment"># 碎片整理</span>
defrag
<span class="token comment"># 创建快照进行备份</span>
snapshot save snapshot.db
<span class="token comment"># 快照恢复</span>
snapshot restore
<span class="token comment"># 快照状态</span>
snapshot status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="etcd-监控" tabindex="-1"><a class="header-anchor" href="#etcd-监控" aria-hidden="true">#</a> Etcd 监控</h3><h4 id="重点监控指标" tabindex="-1"><a class="header-anchor" href="#重点监控指标" aria-hidden="true">#</a> 重点监控指标</h4><p>指标分类</p><ul><li>健康状态</li><li>USE 方法（系统） <ul><li>使用率</li><li>饱和度</li><li>错误</li></ul></li><li>RED 方法（应用） <ul><li>请求速率</li><li>错误率</li><li>延迟</li></ul></li></ul><table><thead><tr><th>指标分类</th><th>指标</th><th>释义</th></tr></thead><tbody><tr><td>健康状态</td><td>实例健康状态</td><td>etcd是一个分布式系统，由多个成员节点组成。监控etcd成员节点的状态可以帮助你了解集群中节点的健康状况，发现掉线或者异常节点。</td></tr><tr><td>健康状态</td><td>主从状态</td><td></td></tr><tr><td>健康状态</td><td>etcd leader切换统计</td><td>频繁的领导者变更会严重影响 etcd 的性能。这也意味着领导者不稳定，可能是由于网络连接问题或对 etcd 集群施加的过载负荷导致的。</td></tr><tr><td>健康状态</td><td>心跳</td><td>etcd集群中的节点通过发送心跳来保持彼此之间的连接。监控丢失的心跳可以帮助你发现etcd节点之间的通信问题或者网络延迟。</td></tr><tr><td>RED 方法</td><td>QPS</td><td></td></tr><tr><td>RED 方法</td><td>请求错误率</td><td>监控etcd的错误率可以帮助你发现etcd操作中的潜在问题。高错误率可能表明集群遇到了故障或其他异常情况。</td></tr><tr><td>RED 方法</td><td>请求延迟</td><td>监控etcd的请求延迟可以帮助你了解API请求的处理时间。较高的延迟可能表明etcd正面临负载压力或性能问题。</td></tr><tr><td>RED 方法</td><td>磁盘同步（WAL/DB fsync）耗时</td><td>高磁盘操作延迟（wal_fsync_duration_seconds或backend_commit_duration_seconds）通常表示磁盘问题。它可能会导致高请求延迟或使群集不稳定。</td></tr><tr><td>RED 方法</td><td>同步延迟</td><td>如果集群正常运行，已提交的提案应该随着时间的推移而增加。重要的是要在集群的所有成员中监控这个指标；如果单个成员与其领导节点之间存在持续较大的滞后，这表明该成员运行缓慢或存在异常。</td></tr><tr><td>RED 方法</td><td>提案失败次数</td><td>失败的提案通常与两个问题相关：与领导选举相关的暂时性故障或由于集群丧失法定人数而导致的较长时间的停机。</td></tr><tr><td>RED 方法</td><td>快照处理时间</td><td>etcd定期创建快照以备份数据。监控快照处理时间可以帮助你了解etcd备份的性能，确保备份任务能够及时完成。</td></tr><tr><td>RED 方法</td><td>watcher 数量</td><td>监控etcd集群当前连接到etcd的客户端数量。如果连接数过高，可能需要调整etcd的配置或者增加集群的容量。</td></tr><tr><td>USE 方法</td><td>CPU 使用率</td><td></td></tr><tr><td>USE 方法</td><td>内存使用量</td><td></td></tr><tr><td>USE 方法</td><td>打开文件数</td><td></td></tr><tr><td>USE 方法</td><td>存储空间使用率</td><td>监控etcd存储空间的使用率可以帮助你确保etcd有足够的空间存储配置数据。如果使用率接近或达到上限，可能需要考虑扩展存储容量或者清理无用的数据。</td></tr></tbody></table><h4 id="使用-kube-prometheus-收集-etcd-指标" tabindex="-1"><a class="header-anchor" href="#使用-kube-prometheus-收集-etcd-指标" aria-hidden="true">#</a> 使用 kube-prometheus 收集 etcd 指标</h4><p><strong>http 模式（推荐）</strong></p><p>修改<code>--listen-metrics-urls</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>    <span class="token comment">#- --listen-metrics-urls=http://127.0.0.1:2381</span>
    <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>listen<span class="token punctuation">-</span>metrics<span class="token punctuation">-</span>urls=http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">2381</span><span class="token punctuation">,</span>http<span class="token punctuation">:</span>//ip<span class="token punctuation">:</span><span class="token number">2381</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>部署</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>helm <span class="token function">install</span> monitoring <span class="token parameter variable">-n</span> cattle-prometheus <span class="token parameter variable">--set</span> <span class="token assign-left variable">kubeEtcd.service.port</span><span class="token operator">=</span><span class="token number">2381</span> <span class="token parameter variable">--set</span> <span class="token assign-left variable">kubeEtcd.service.targetPort</span><span class="token operator">=</span><span class="token number">2381</span> <span class="token parameter variable">--set</span> <span class="token assign-left variable">prometheusOperator.admissionWebhooks.patch.image.sha</span><span class="token operator">=</span>null ./
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>https 模式</strong></p><p>新增 etcd secret</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl create secret generic etcd-certs <span class="token parameter variable">-n</span> cattle-prometheus --from-file<span class="token operator">=</span>/etc/kubernetes/pki/etcd/ca.crt --from-file<span class="token operator">=</span>/etc/kubernetes/pki/etcd/healthcheck-client.crt --from-file<span class="token operator">=</span>/etc/kubernetes/pki/etcd/healthcheck-client.key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>部署</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>helm <span class="token function">install</span> monitoring <span class="token parameter variable">-n</span> cattle-prometheus  <span class="token parameter variable">--set</span> <span class="token assign-left variable">kubeEtcd.serviceMonitor.scheme</span><span class="token operator">=</span>https <span class="token parameter variable">--set</span> <span class="token assign-left variable">kubeEtcd.serviceMonitor.caFile</span><span class="token operator">=</span>/etc/prometheus/secrets/etcd-certs/ca.crt <span class="token parameter variable">--set</span> <span class="token assign-left variable">kubeEtcd.serviceMonitor.certFile</span><span class="token operator">=</span>/etc/prometheus/secrets/etcd-certs/healthcheck-client.crt <span class="token parameter variable">--set</span> <span class="token assign-left variable">kubeEtcd.serviceMonitor.keyFile</span><span class="token operator">=</span>/etc/prometheus/secrets/etcd-certs/healthcheck-client.key <span class="token parameter variable">--set</span> <span class="token assign-left variable">prometheus.prometheusSpec.secrets</span><span class="token operator">=</span><span class="token punctuation">{</span>etcd-certs<span class="token punctuation">}</span> <span class="token parameter variable">--set</span> <span class="token assign-left variable">prometheusOperator.admissionWebhooks.patch.image.sha</span><span class="token operator">=</span>null ./
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="大盘展示" tabindex="-1"><a class="header-anchor" href="#大盘展示" aria-hidden="true">#</a> 大盘展示</h4><p>Grafana 大盘： https://github.com/clay-wangzhi/grafana-dashboard/blob/master/etcd/etcd-dash.json</p><p>导入即可</p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20230616180204033.png" alt="image-20230616180204033" style="zoom:67%;"><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20230616180334752.png" alt="image-20230616180334752"><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20230616180508983.png" alt=""></p><h4 id="监控指标补充" tabindex="-1"><a class="header-anchor" href="#监控指标补充" aria-hidden="true">#</a> 监控指标补充</h4><ul><li>数据一致性、写请求、资源对象数等</li></ul><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240410193826786.png" alt=""></p><p>收集过程详见：https://github.com/clay-wangzhi/etcd-metrics</p><p>参考 https://github.com/kstone-io/kstone 进行裁剪</p><h3 id="etcd-基准测试" tabindex="-1"><a class="header-anchor" href="#etcd-基准测试" aria-hidden="true">#</a> Etcd 基准测试</h3><h4 id="sli-slo" tabindex="-1"><a class="header-anchor" href="#sli-slo" aria-hidden="true">#</a> SLI &amp; SLO</h4><p>SLI（Service Level Indicator）：服务等级指标，其实就是我们选择哪些指标来衡量我们的稳定性。</p><p>SLO（Service Level Objective）：服务等级目标，指的就是我们设定的稳定性目标，比如“几个 9”这样的目标。</p><p><strong>SLO 是 SLI 要达成的目标，我们需要选择合适的 SLI，设定对应的 SLO。</strong></p><table><thead><tr><th>SLI</th><th>SLO</th><th>测试方式</th></tr></thead><tbody><tr><td>吞吐量：衡量etcd每秒可以处理的请求数量</td><td>每秒处理40,000个读取请求和20,000个写入请求</td><td>官方 benchmark</td></tr><tr><td>响应时间：衡量etcd对于读取和写入请求的响应时间</td><td>99%的读写请求在100毫秒以内完成</td><td>官方 benchmark</td></tr></tbody></table><p>目前已有 SLI 指标的收集、监控、展示及告警</p><h4 id="使用-benchmark-测试延迟和吞吐量" tabindex="-1"><a class="header-anchor" href="#使用-benchmark-测试延迟和吞吐量" aria-hidden="true">#</a> <strong>使用 benchmark 测试延迟和吞吐量</strong></h4><p><em>环境准备</em></p><p><strong>在 Linux 主机安装 Go 环境</strong></p><p><strong>下载解压</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://golang.google.cn/dl/go1.19.10.linux-amd64.tar.gz
<span class="token function">tar</span> <span class="token parameter variable">-C</span> /usr/local <span class="token parameter variable">-xzf</span>  go1.19.10.linux-amd64.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置到PATH环境变量</strong></p><p>在 <code>/etc/profile</code> 文件追加如下内容</p><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>export PATH=$PATH:/usr/local/go/bin
export GOPROXY=https://goproxy.cn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后 source 生效</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> /etc/profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>安装 benchmark 工具</strong></p><p>clone 代码，安装 benchmark</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/etcd-io/etcd.git <span class="token parameter variable">--depth</span> <span class="token number">1</span>
<span class="token builtin class-name">cd</span> etcd/
go <span class="token function">install</span> <span class="token parameter variable">-v</span> ./tools/benchmark
<span class="token comment"># 找到二进制文件位置</span>
go list <span class="token parameter variable">-f</span> <span class="token string">&quot;{{.Target}}&quot;</span> ./tools/benchmark
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>基准测试</strong></p><p>查看帮助</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /root/go/bin/
./benchmark <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置变量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">ETCD_CA_CERT</span><span class="token operator">=</span><span class="token string">&quot;/etc/kubernetes/pki/etcd/ca.crt&quot;</span>
<span class="token assign-left variable">ETCD_CERT</span><span class="token operator">=</span><span class="token string">&quot;/etc/kubernetes/pki/etcd/server.crt&quot;</span>
<span class="token assign-left variable">ETCD_KEY</span><span class="token operator">=</span><span class="token string">&quot;/etc/kubernetes/pki/etcd/server.key&quot;</span>
<span class="token assign-left variable">HOST_1</span><span class="token operator">=</span>https://xxx.xxx.xxx.xxx:2379
<span class="token assign-left variable">HOST_2</span><span class="token operator">=</span>https://xxx.xxx.xxx.xxx:2379
<span class="token assign-left variable">HOST_3</span><span class="token operator">=</span>https://xxx.xxx.xxx.xxx:2379

<span class="token comment"># 提前写个测试 key</span>
<span class="token assign-left variable">YOUR_KEY</span><span class="token operator">=</span>foo
<span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span> /usr/local/bin/etcdctl <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token variable">\${HOST_1}</span>,<span class="token variable">\${HOST_2}</span>,<span class="token variable">\${HOST_3}</span> <span class="token parameter variable">--cacert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CA_CERT}</span>&quot;</span> <span class="token parameter variable">--cert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CERT}</span>&quot;</span> <span class="token parameter variable">--key</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_KEY}</span>&quot;</span> put <span class="token variable">$YOUR_KEY</span> bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>写测试</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># write to leader</span>
./benchmark <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token variable">\${HOST_2}</span> <span class="token parameter variable">--cacert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CA_CERT}</span>&quot;</span> <span class="token parameter variable">--cert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CERT}</span>&quot;</span> <span class="token parameter variable">--key</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_KEY}</span>&quot;</span> --target-leader <span class="token parameter variable">--conns</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--clients</span><span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\\</span>
     put --key-size<span class="token operator">=</span><span class="token number">8</span> --sequential-keys <span class="token parameter variable">--total</span><span class="token operator">=</span><span class="token number">10000</span> --val-size<span class="token operator">=</span><span class="token number">256</span>
./benchmark <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token variable">\${HOST_2}</span> <span class="token parameter variable">--cacert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CA_CERT}</span>&quot;</span> <span class="token parameter variable">--cert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CERT}</span>&quot;</span> <span class="token parameter variable">--key</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_KEY}</span>&quot;</span> --target-leader  <span class="token parameter variable">--conns</span><span class="token operator">=</span><span class="token number">100</span> <span class="token parameter variable">--clients</span><span class="token operator">=</span><span class="token number">1000</span> <span class="token punctuation">\\</span>
     put --key-size<span class="token operator">=</span><span class="token number">8</span> --sequential-keys <span class="token parameter variable">--total</span><span class="token operator">=</span><span class="token number">100000</span> --val-size<span class="token operator">=</span><span class="token number">256</span>
     
<span class="token comment"># write to all members</span>
./benchmark <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token variable">\${HOST_1}</span>,<span class="token variable">\${HOST_2}</span>,<span class="token variable">\${HOST_3}</span> <span class="token parameter variable">--cacert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CA_CERT}</span>&quot;</span> <span class="token parameter variable">--cert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CERT}</span>&quot;</span> <span class="token parameter variable">--key</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_KEY}</span>&quot;</span> <span class="token parameter variable">--conns</span><span class="token operator">=</span><span class="token number">100</span> <span class="token parameter variable">--clients</span><span class="token operator">=</span><span class="token number">1000</span> <span class="token punctuation">\\</span>
    put --key-size<span class="token operator">=</span><span class="token number">8</span> --sequential-keys <span class="token parameter variable">--total</span><span class="token operator">=</span><span class="token number">100000</span> --val-size<span class="token operator">=</span><span class="token number">256</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:right;">Number of keys</th><th style="text-align:right;">Key size in bytes</th><th style="text-align:right;">Value size in bytes</th><th style="text-align:right;">Number of connections</th><th style="text-align:right;">Number of clients</th><th>Target etcd server</th><th style="text-align:right;">Average write QPS</th><th style="text-align:right;">99% latency per request</th></tr></thead><tbody><tr><td style="text-align:right;">10,000</td><td style="text-align:right;">8</td><td style="text-align:right;">256</td><td style="text-align:right;">1</td><td style="text-align:right;">1</td><td>leader only</td><td style="text-align:right;">154</td><td style="text-align:right;">14.8ms</td></tr><tr><td style="text-align:right;">100,000</td><td style="text-align:right;">8</td><td style="text-align:right;">256</td><td style="text-align:right;">100</td><td style="text-align:right;">1000</td><td>leader only</td><td style="text-align:right;">14,567</td><td style="text-align:right;">134.4ms</td></tr><tr><td style="text-align:right;">100,000</td><td style="text-align:right;">8</td><td style="text-align:right;">256</td><td style="text-align:right;">100</td><td style="text-align:right;">1000</td><td>all members</td><td style="text-align:right;">17,018</td><td style="text-align:right;">117ms</td></tr></tbody></table><p><strong>读测试</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Single connection read requests</span>
./benchmark <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token variable">\${HOST_1}</span>,<span class="token variable">\${HOST_2}</span>,<span class="token variable">\${HOST_3}</span> <span class="token parameter variable">--cacert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CA_CERT}</span>&quot;</span> <span class="token parameter variable">--cert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CERT}</span>&quot;</span> <span class="token parameter variable">--key</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_KEY}</span>&quot;</span> <span class="token parameter variable">--conns</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--clients</span><span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\\</span>
    range <span class="token variable">$YOUR_KEY</span> <span class="token parameter variable">--consistency</span><span class="token operator">=</span>l <span class="token parameter variable">--total</span><span class="token operator">=</span><span class="token number">10000</span>
./benchmark <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token variable">\${HOST_1}</span>,<span class="token variable">\${HOST_2}</span>,<span class="token variable">\${HOST_3}</span> <span class="token parameter variable">--cacert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CA_CERT}</span>&quot;</span> <span class="token parameter variable">--cert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CERT}</span>&quot;</span> <span class="token parameter variable">--key</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_KEY}</span>&quot;</span> <span class="token parameter variable">--conns</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--clients</span><span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\\</span>
    range <span class="token variable">$YOUR_KEY</span> <span class="token parameter variable">--consistency</span><span class="token operator">=</span>s <span class="token parameter variable">--total</span><span class="token operator">=</span><span class="token number">10000</span>

<span class="token comment"># Many concurrent read requests</span>
./benchmark <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token variable">\${HOST_1}</span>,<span class="token variable">\${HOST_2}</span>,<span class="token variable">\${HOST_3}</span> <span class="token parameter variable">--cacert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CA_CERT}</span>&quot;</span> <span class="token parameter variable">--cert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CERT}</span>&quot;</span> <span class="token parameter variable">--key</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_KEY}</span>&quot;</span> <span class="token parameter variable">--conns</span><span class="token operator">=</span><span class="token number">100</span> <span class="token parameter variable">--clients</span><span class="token operator">=</span><span class="token number">1000</span> <span class="token punctuation">\\</span>
    range <span class="token variable">$YOUR_KEY</span> <span class="token parameter variable">--consistency</span><span class="token operator">=</span>l <span class="token parameter variable">--total</span><span class="token operator">=</span><span class="token number">100000</span>
./benchmark <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token variable">\${HOST_1}</span>,<span class="token variable">\${HOST_2}</span>,<span class="token variable">\${HOST_3}</span> <span class="token parameter variable">--cacert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CA_CERT}</span>&quot;</span> <span class="token parameter variable">--cert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CERT}</span>&quot;</span> <span class="token parameter variable">--key</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_KEY}</span>&quot;</span> <span class="token parameter variable">--conns</span><span class="token operator">=</span><span class="token number">100</span> <span class="token parameter variable">--clients</span><span class="token operator">=</span><span class="token number">1000</span> <span class="token punctuation">\\</span>
    range <span class="token variable">$YOUR_KEY</span> <span class="token parameter variable">--consistency</span><span class="token operator">=</span>s <span class="token parameter variable">--total</span><span class="token operator">=</span><span class="token number">100000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:right;">Number of requests</th><th style="text-align:right;">Key size in bytes</th><th style="text-align:right;">Value size in bytes</th><th style="text-align:right;">Number of connections</th><th style="text-align:right;">Number of clients</th><th>Consistency</th><th style="text-align:right;">Average read QPS</th><th style="text-align:right;">99% latency per request</th></tr></thead><tbody><tr><td style="text-align:right;">10,000</td><td style="text-align:right;">8</td><td style="text-align:right;">256</td><td style="text-align:right;">1</td><td style="text-align:right;">1</td><td>Linearizable</td><td style="text-align:right;">509</td><td style="text-align:right;">7.3ms</td></tr><tr><td style="text-align:right;">10,000</td><td style="text-align:right;">8</td><td style="text-align:right;">256</td><td style="text-align:right;">1</td><td style="text-align:right;">1</td><td>Serializable</td><td style="text-align:right;">1,709</td><td style="text-align:right;">1.7ms</td></tr><tr><td style="text-align:right;">100,000</td><td style="text-align:right;">8</td><td style="text-align:right;">256</td><td style="text-align:right;">100</td><td style="text-align:right;">1000</td><td>Linearizable</td><td style="text-align:right;">29,326</td><td style="text-align:right;">104.8ms</td></tr><tr><td style="text-align:right;">100,000</td><td style="text-align:right;">8</td><td style="text-align:right;">256</td><td style="text-align:right;">100</td><td style="text-align:right;">1000</td><td>Serializable</td><td style="text-align:right;">43,469</td><td style="text-align:right;">98.9ms</td></tr></tbody></table><h4 id="使用-fio-测试磁盘性能" tabindex="-1"><a class="header-anchor" href="#使用-fio-测试磁盘性能" aria-hidden="true">#</a> 使用 FIO 测试磁盘性能</h4><p>Etcd 对内存和 CPU 消耗并不高，足够就行。</p><p>一次 Etcd 请求的最小时间 = 成员节点之间的网络往返时延 + 收到数据之后进行持久化的时延。因此，Etcd 的性能主要受两方面的约束：</p><ul><li>网络</li><li>磁盘</li></ul><p>多节点的 Etcd 集群成员节点应该尽量部署在同一个数据中心，减少网络时延。同一数据中心内，不同节点的网络情况通常是非常好的，如果需要测试可以使用 <code>ping</code> 或 <code>tcpdump</code> 命令进行分析。</p><p>下面主要讨论硬盘 IO 测试方法。</p><p>存储性能能够满足 etcd 的性能要求，有两种方法测试：</p><ol><li><p>已运行的 etcd 集群，通过指标<code>etcd_disk_wal_fysnc_duration_seconds</code>来评估存储 I/O 性能， 该指标记录了 WAL 文件系统调用 fsync 的延迟分布，当 99% 样本的同步时间小于 10 毫秒就可以认为存储性能能够满足 etcd 的性能要求。</p></li><li><p>是用 fio 命令，还原 etcd 使用场景，看99线</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> test-data 
fio <span class="token parameter variable">--rw</span><span class="token operator">=</span>write <span class="token parameter variable">--ioengine</span><span class="token operator">=</span>sync <span class="token parameter variable">--fdatasync</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--directory</span><span class="token operator">=</span>test-data <span class="token parameter variable">--size</span><span class="token operator">=</span>22m <span class="token parameter variable">--bs</span><span class="token operator">=</span><span class="token number">2300</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>mytest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="调优" tabindex="-1"><a class="header-anchor" href="#调优" aria-hidden="true">#</a> 调优</h3><p><strong>磁盘</strong></p><p>换 SSD 盘 -------- 这个是必须的</p><p>给定较高的磁盘优先级</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># best effort, highest priority</span>
$ <span class="token function">sudo</span> ionice <span class="token parameter variable">-c2</span> <span class="token parameter variable">-n0</span> <span class="token parameter variable">-p</span> <span class="token variable"><span class="token variable">\`</span>pgrep etcd<span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>CPU</strong></p><p>CPU 性能模式调整为 performance , 如何调整不成功参考：https://clay-wangzhi.com/cloudnative/troubleshooting/vm-vs-container-performance.html#cpu</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> performance <span class="token operator">|</span> <span class="token function">tee</span> /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>配置参数</strong></p><p>开启自动压缩、修改etcd raft消息最大字节数、修改 etcd最大容量等。</p><p>参考链接：</p><p>etcd 实战课 | 极客时间 唐聪：https://time.geekbang.org/column/intro/100069901</p><p>github etcdctl doc：https://github.com/etcd-io/etcd/blob/main/etcdctl/README.md</p><p>datadog etcd 指标：https://docs.datadoghq.com/integrations/etcd/?tab=host</p><p>etcd 官方文档-tunning：https://etcd.io/docs/v3.5/tuning/</p><p>etcd 官方文档-硬件要求：https://etcd.io/docs/v3.5/op-guide/hardware/</p><p>etcd 官方文档-benchmark：https://etcd.io/docs/v3.5/benchmarks/etcd-3-demo-benchmarks/</p><p>使用fio测试etcd是否满足要求：https://www.ibm.com/cloud/blog/using-fio-to-tell-whether-your-storage-is-fast-enough-for-etcd</p><p>我是 Clay，下期见 👋</p><hr><blockquote><ul><li><p>欢迎订阅我的公众号「SRE运维进阶之路」或关注我的 Github https://github.com/clay-wangzhi/wiki 查看最新文章</p></li><li><p>欢迎加我微信<code>sre-k8s-ai</code>，与我讨论云原生、稳定性相关内容</p></li></ul></blockquote><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/weixin-20240220180036567.png" alt="weixin" style="zoom:50%;">`,126),l=[r];function p(i,o){return s(),e("div",null,l)}const b=a(t,[["render",p],["__file","etcd.html.vue"]]);export{b as default};
