import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-b1cf59f4.js";const p={},t=e(`<h1 id="k8s-一条默认参数引起的性能问题" tabindex="-1"><a class="header-anchor" href="#k8s-一条默认参数引起的性能问题" aria-hidden="true">#</a> K8s 一条默认参数引起的性能问题</h1><blockquote><p>👉 Nodejs 应用 从虚拟机迁移到容器 产生的性能问题</p></blockquote><h2 id="问题时间线" tabindex="-1"><a class="header-anchor" href="#问题时间线" aria-hidden="true">#</a> 问题时间线</h2><p>[xx:xx] 开发收到业务反馈接口响应超时</p><p>[xx:xx] 开发&amp;SRE&amp;中间件 联合排查代码、网关、底层网络问题，无果</p><p>[xx:xx] 测试环境复现排查</p><p>[xx:xx] 利用差异法、排除法和经验解决，先上线</p><p>[xx:xx] 根因定位</p><h2 id="问题现象" tabindex="-1"><a class="header-anchor" href="#问题现象" aria-hidden="true">#</a> 问题现象</h2><p>1）接口偶发性超时</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240116181451879.png" alt="image-20240116181451879"></p><p>2）容器化后，CPU 使用率一直较高</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240116180755092.png" alt="image-20240116180755092"></p><p>3）迁移到容器前，虚拟机 CPU 使用率和接口响应均正常</p><h2 id="问题排查" tabindex="-1"><a class="header-anchor" href="#问题排查" aria-hidden="true">#</a> 问题排查</h2><p>首先使用排除法： 确定了与网络、代码没有关系</p><p>然后进行差异分析：</p><ul><li><p>在虚拟机上启动相同应用做测试，结果正常，矛头直指容器 😱</p></li><li><p>在 Serverless 测试集群上跑了一下，也正常，开始疑惑，是容器的问题吗 🤔</p></li></ul><p>思考：</p><ul><li>容器对比虚拟机，应用运行环境发生了哪些改变呢 → 经验告诉我：Service 环境变量 会自动注入到 Pod 里面</li><li>为啥 Serverless 集群没有问题呢 → <em><strong>量</strong></em> ，常规集群所跑的应用数量多，Service 环境变量的数目自然会多</li></ul><p>检验：</p><ul><li>进入常规集群 Pod 查看环境变量的数目 <code>env | wc -l</code>， 结果有 1.6 w 个环境变量，基本都是 Service 自动注入的</li><li>关闭 Service 自动注入参数，<code>enableServiceLinks: false</code>，测试检验，CPU 使用率回归正常，接口响应正常</li></ul><h2 id="根因分析" tabindex="-1"><a class="header-anchor" href="#根因分析" aria-hidden="true">#</a> 根因分析</h2><blockquote><p>👍 优先解决问题，事后再深挖根因！</p></blockquote><h3 id="分析性能的一般步骤" tabindex="-1"><a class="header-anchor" href="#分析性能的一般步骤" aria-hidden="true">#</a> 分析性能的一般步骤</h3><p><strong>系统资源瓶颈</strong></p><p>系统资源的瓶颈，可以通过 USE 法，即 <strong>使用率、饱和度以及错误数这三类指标来衡量</strong>。系统的资源，可以分为硬件资源和软件资源两类。</p><ul><li><p>如 CPU、内存、磁盘和文件系统以及网络等，都是最常见的硬件资源。</p></li><li><p>而文件描述符数、连接跟踪数、套接字缓冲区大小等，则是典型的软件资源。</p></li></ul><p><strong>应用程序瓶颈</strong></p><p>最典型的应用程序性能问题，就是吞吐量（并发请求数）下降、错误率升高以及响应时间增大。</p><p>本质来源，实际上只有三种，也就是资源瓶颈、依赖服务瓶颈以及应用自身的瓶颈。</p><p>第一种资源瓶颈， CPU、内存、磁盘和文件系统 I/O、网络以及内核资源等各类软硬件资源出现了瓶颈，从而导致应用程序的运行受限。</p><p>第二种依赖服务的瓶颈，也就是诸如数据库、分布式缓存、中间件等应用程序，直接或者间接调用的服务出现了性能问题，从而导致应用程序的响应变慢，或者错误率升高。这说白了就是跨应用的性能问题，使用全链路跟踪系统，就可以帮你快速定位这类问题的根源。</p><p>最后一种，应用程序自身的性能问题，包括了多线程处理不当、死锁、业务算法的复杂度过高等等。对于这类问题，通过应用程序指标监控以及日志监控，观察关键环节的耗时和内部执行过程中的错误，就可以帮你缩小问题的范围。</p><p>不过，由于这是应用程序内部的状态，外部通常不能直接获取详细的性能数据，所以就需要应用程序在设计和开发时，就提供出这些指标，以便监控系统可以了解应用程序的内部运行状态。</p><p>如果这些手段过后还是无法找出瓶颈，你还可以用系统资源模块提到的各类进程分析工具，来进行分析定位。比如：</p><ul><li><p>你可以用 strace，观察系统调用；</p></li><li><p>使用 perf 和火焰图，分析热点函数；</p></li><li><p>甚至使用动态追踪技术，来分析进程的执行状态。</p></li></ul><h3 id="具体排查过程" tabindex="-1"><a class="header-anchor" href="#具体排查过程" aria-hidden="true">#</a> 具体排查过程</h3><p>针对本文的案例，排查思路如下：</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/xingnengpaicha.png" alt="xingnengpaicha"></p><p><strong>问题现象追踪</strong></p><ul><li><p>通过 「容器速查大盘」 实时查看 CPU 利用率</p></li><li><p>通过 <code>time</code> + <code>curl</code> 命令实时测试 API 响应耗时情况</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">seq</span> <span class="token number">1</span> <span class="token number">100</span><span class="token variable">\`</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">time</span> <span class="token function">curl</span> <span class="token parameter variable">-I</span> <span class="token variable">\${API}</span> <span class="token punctuation">;</span> <span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p><strong>使用 <code>strace </code>、 <code>perf</code> 排查</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在Master节点，查询 Pod 所在宿主机</span>
kubectl <span class="token parameter variable">-n</span> work describe <span class="token variable">\${PodName}</span>  <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&#39;Node:&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> -F/ <span class="token string">&#39;{print $2}&#39;</span>
<span class="token comment"># 在Master节点，查询 ContainerID </span>
kubectl <span class="token parameter variable">-n</span> work get pod <span class="token variable">\${PodName}</span>  <span class="token parameter variable">-o</span> template <span class="token parameter variable">--template</span><span class="token operator">=</span><span class="token string">&#39;{{range .status.containerStatuses}}{{.containerID}}{{end}}&#39;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s/docker:\\/\\/\\(.*\\)$/\\1/&#39;</span>
<span class="token comment"># 在 Pod 所在宿主机，查询 Pid</span>
<span class="token function">docker</span> inspect <span class="token parameter variable">-f</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>.State.Pid<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token variable">\${ContainerID}</span>
<span class="token comment"># 查询是否有子进程,层层找出 CPU 占用高的子进程</span>
pstree <span class="token parameter variable">-p</span> <span class="token variable">\${Pid}</span>
<span class="token function">ps</span> <span class="token parameter variable">-aux</span> <span class="token operator">|</span> <span class="token function">head</span> -1<span class="token punctuation">;</span>  <span class="token function">ps</span> <span class="token parameter variable">-aux</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token variable">\${Pid}</span>
<span class="token comment"># 在 Pod 所在宿主机，使用 strace 观察系统调用</span>
<span class="token comment">## -f表示跟踪子进程和子线程，-T表示显示系统调用的时长，-tt表示显示跟踪时间</span>
<span class="token function">strace</span> <span class="token parameter variable">-f</span> <span class="token parameter variable">-T</span> <span class="token parameter variable">-tt</span> <span class="token parameter variable">-p</span> <span class="token variable">\${Pid}</span> <span class="token parameter variable">-o</span> trace.log
<span class="token comment"># 请求五次接口，观察响应情况</span>
<span class="token function">date</span> +<span class="token string">&quot;%H:%M:%S&quot;</span><span class="token punctuation">;</span> <span class="token function">time</span> <span class="token function">curl</span> <span class="token parameter variable">-I</span> <span class="token variable">\${API}</span> <span class="token punctuation">;</span> <span class="token function">date</span> +<span class="token string">&quot;%H:%M:%S&quot;</span>
<span class="token comment">## 五次请求的时间有用信息如下，会发现第一次和第五次请求耗时较长，20s 左右， 其他三次响应很快，80ms 左右</span>
<span class="token number">15</span>:19:40
<span class="token number">20.055</span> total
<span class="token number">15</span>:20:00

<span class="token number">15</span>:20:05
<span class="token number">0.090</span> total
<span class="token number">15</span>:20:05

<span class="token number">15</span>:20:07
<span class="token number">0.084</span> total
<span class="token number">15</span>:20:07

<span class="token number">15</span>:20:09
<span class="token number">0.078</span> total
<span class="token number">15</span>:20:09

<span class="token number">15</span>:20:13
<span class="token number">19.164</span> total
<span class="token number">15</span>:20:33
<span class="token comment">## trace.log 分析</span>
<span class="token comment">### 过滤关键信息，五次处理 uri 的时间,发现第一次和第五次的请求被阻塞了</span>
<span class="token number">31366</span> <span class="token number">15</span>:19:59.980073 read<span class="token punctuation">(</span><span class="token number">21</span>, <span class="token string">&quot;HEAD /xxx&quot;</span><span class="token punctuation">..</span>., <span class="token number">65536</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">134</span> <span class="token operator">&lt;</span><span class="token number">0.00001</span><span class="token operator"><span class="token file-descriptor important">6</span>&gt;</span>
<span class="token number">31366</span> <span class="token number">15</span>:20:05.345321 read<span class="token punctuation">(</span><span class="token number">21</span>, <span class="token string">&quot;HEAD /xxx&quot;</span><span class="token punctuation">..</span>., <span class="token number">65536</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">134</span> <span class="token operator">&lt;</span><span class="token number">0.00001</span><span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>
<span class="token number">31366</span> <span class="token number">15</span>:20:07.373577 read<span class="token punctuation">(</span><span class="token number">21</span>, <span class="token string">&quot;HEAD /xxx&quot;</span><span class="token punctuation">..</span>., <span class="token number">65536</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">134</span> <span class="token operator">&lt;</span><span class="token number">0.00001</span><span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>
<span class="token number">31366</span> <span class="token number">15</span>:20:09.209124 read<span class="token punctuation">(</span><span class="token number">21</span>, <span class="token string">&quot;HEAD /xxx&quot;</span><span class="token punctuation">..</span>., <span class="token number">65536</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">134</span> <span class="token operator">&lt;</span><span class="token number">0.00001</span><span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>
<span class="token number">31366</span> <span class="token number">15</span>:20:33.190620 read<span class="token punctuation">(</span><span class="token number">21</span>, <span class="token string">&quot;HEAD /xxx&quot;</span><span class="token punctuation">..</span>., <span class="token number">65536</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">134</span> <span class="token operator">&lt;</span><span class="token number">0.00002</span><span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>
<span class="token comment">### 过滤关键信息，查询哪里造成的阻塞，发现两次超时请求前，都有 futex resumed，并且进程 ID 不同，是31366的子进程</span>
<span class="token comment">#### futex 是 Linux 系统上用于实现用户空间线程同步的一种机制。这些记录显示进程可能在等待或释放某种锁或同步对象</span>
<span class="token number">31371</span> <span class="token number">15</span>:19:59.979948 <span class="token operator">&lt;</span><span class="token punctuation">..</span>. futex resumed<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token number">0.00006</span><span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>
<span class="token number">31366</span> <span class="token number">15</span>:19:59.979961 <span class="token operator">&lt;</span><span class="token punctuation">..</span>. futex resumed<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token number">0.00006</span><span class="token operator"><span class="token file-descriptor important">8</span>&gt;</span>
<span class="token number">31372</span> <span class="token number">15</span>:19:59.979977 <span class="token operator">&lt;</span><span class="token punctuation">..</span>. futex resumed<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token number">0.00003</span><span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>
<span class="token number">31366</span> <span class="token number">15</span>:19:59.980023 write<span class="token punctuation">(</span><span class="token number">16</span>, <span class="token string">&quot;<span class="token entity" title="\\1">\\1</span><span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\0">\\0</span>&quot;</span>, <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">&lt;</span><span class="token number">0.00001</span><span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>
<span class="token number">31366</span> <span class="token number">15</span>:19:59.980073 read<span class="token punctuation">(</span><span class="token number">21</span>, <span class="token string">&quot;HEAD /xxx&quot;</span><span class="token punctuation">..</span>., <span class="token number">65536</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">134</span> <span class="token operator">&lt;</span><span class="token number">0.00001</span><span class="token operator"><span class="token file-descriptor important">6</span>&gt;</span>

<span class="token number">31372</span> <span class="token number">15</span>:20:33.189971 <span class="token operator">&lt;</span><span class="token punctuation">..</span>. futex resumed<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token number">0.00006</span><span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>
<span class="token number">31366</span> <span class="token number">15</span>:20:33.189985 <span class="token operator">&lt;</span><span class="token punctuation">..</span>. futex resumed<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token number">0.00004</span><span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>
<span class="token number">31373</span> <span class="token number">15</span>:20:33.190001 <span class="token operator">&lt;</span><span class="token punctuation">..</span>. futex resumed<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token number">0.00003</span><span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>
<span class="token number">31366</span> <span class="token number">15</span>:20:33.190017 read<span class="token punctuation">(</span><span class="token number">24</span>, <span class="token string">&quot;<span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\000">\\000</span>2<span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\000">\\000</span>1<span class="token entity" title="\\261">\\261</span><span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\1">\\1</span><span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\n">\\n</span>nodejs_log<span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\1">\\1</span><span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\0">\\0</span><span class="token entity" title="\\2">\\2</span>&quot;</span><span class="token punctuation">..</span>., <span class="token number">65536</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">216</span> <span class="token operator">&lt;</span><span class="token number">0.00001</span><span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>
<span class="token number">31366</span> <span class="token number">15</span>:20:33.190081 munmap<span class="token punctuation">(</span>0x7f166db42000, <span class="token number">69632</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token number">0.00004</span><span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>
<span class="token number">31366</span> <span class="token number">15</span>:20:33.190620 read<span class="token punctuation">(</span><span class="token number">21</span>, <span class="token string">&quot;HEAD /man-hour-price/get-busines&quot;</span><span class="token punctuation">..</span>., <span class="token number">65536</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">134</span> <span class="token operator">&lt;</span><span class="token number">0.00002</span><span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>
<span class="token comment">### 过滤关键信息，阻塞的时候能看懂的其他关键，发现有两个执行系统命令，和超时的次数及时间吻合</span>
<span class="token number">19623</span> <span class="token number">15</span>:19:44.169724 execve<span class="token punctuation">(</span><span class="token string">&quot;/bin/sh&quot;</span>, <span class="token punctuation">[</span><span class="token string">&quot;/bin/sh&quot;</span>, <span class="token string">&quot;-c&quot;</span>, <span class="token string">&quot;free -m&quot;</span><span class="token punctuation">]</span>, 0x7f166b53b230 /* <span class="token number">13793</span> vars */ <span class="token operator">&lt;</span>unfinished <span class="token punctuation">..</span>.<span class="token operator">&gt;</span>
<span class="token number">20616</span> <span class="token number">15</span>:19:51.988739 execve<span class="token punctuation">(</span><span class="token string">&quot;/bin/sh&quot;</span>, <span class="token punctuation">[</span><span class="token string">&quot;/bin/sh&quot;</span>, <span class="token string">&quot;-c&quot;</span>, <span class="token string">&quot;df -k &#39;/&#39;&quot;</span><span class="token punctuation">]</span>, 0x7f166b53b340 /* <span class="token number">13793</span> vars */ <span class="token operator">&lt;</span>unfinished <span class="token punctuation">..</span>.<span class="token operator">&gt;</span>
<span class="token number">21542</span> <span class="token number">15</span>:19:59.799328 execve<span class="token punctuation">(</span><span class="token string">&quot;/bin/sh&quot;</span>, <span class="token punctuation">[</span><span class="token string">&quot;/bin/sh&quot;</span>, <span class="token string">&quot;-c&quot;</span>, <span class="token string">&quot;df -k &#39;/data&#39;&quot;</span><span class="token punctuation">]</span>, 0x7f166b53b450 /* <span class="token number">13793</span> vars */ <span class="token operator">&lt;</span>unfinished <span class="token punctuation">..</span>.<span class="token operator">&gt;</span>

<span class="token number">23324</span> <span class="token number">15</span>:20:17.371918 execve<span class="token punctuation">(</span><span class="token string">&quot;/bin/sh&quot;</span>, <span class="token punctuation">[</span><span class="token string">&quot;/bin/sh&quot;</span>, <span class="token string">&quot;-c&quot;</span>, <span class="token string">&quot;free -m&quot;</span><span class="token punctuation">]</span>, 0x7f166b53b7a0 /* <span class="token number">13793</span> vars */ <span class="token operator">&lt;</span>unfinished <span class="token punctuation">..</span>.<span class="token operator">&gt;</span>
<span class="token number">24160</span> <span class="token number">15</span>:20:25.186710 execve<span class="token punctuation">(</span><span class="token string">&quot;/bin/sh&quot;</span>, <span class="token punctuation">[</span><span class="token string">&quot;/bin/sh&quot;</span>, <span class="token string">&quot;-c&quot;</span>, <span class="token string">&quot;df -k &#39;/&#39;&quot;</span><span class="token punctuation">]</span>, 0x7f166b53b0d0 /* <span class="token number">13793</span> vars */ <span class="token operator">&lt;</span>unfinished <span class="token punctuation">..</span>.<span class="token operator">&gt;</span>
<span class="token number">24791</span> <span class="token number">15</span>:20:32.997766 execve<span class="token punctuation">(</span><span class="token string">&quot;/bin/sh&quot;</span>, <span class="token punctuation">[</span><span class="token string">&quot;/bin/sh&quot;</span>, <span class="token string">&quot;-c&quot;</span>, <span class="token string">&quot;df -k &#39;/data&#39;&quot;</span><span class="token punctuation">]</span>, 0x7f166b53b200 /* <span class="token number">13793</span> vars */ <span class="token operator">&lt;</span>unfinished <span class="token punctuation">..</span>.<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>strace</code> 排查发现：子进程执行同步任务阻塞了主进程，子进程里面执行系统命令<code>free</code> 和 <code>df</code></strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># strace 命令找不到具体的热点函数，此时 perf 上,看火焰图</span>
perf record <span class="token parameter variable">-a</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-p</span> <span class="token punctuation">{</span><span class="token variable">$PID</span><span class="token punctuation">}</span> -- <span class="token function">sleep</span> <span class="token number">60</span>
<span class="token function">git</span> clone https://github.com/brendangregg/FlameGraph
<span class="token builtin class-name">cd</span> FlameGraph/
perf script <span class="token parameter variable">-i</span> /root/perf.data <span class="token operator">|</span> ./stackcollapse-perf.pl <span class="token parameter variable">--all</span> <span class="token operator">|</span>  ./flamegraph.pl <span class="token operator">&gt;</span> ksoftirqd.svg
<span class="token comment"># 将 ksoftirqd.svg 传输到本地，用浏览器打开，如下,发现找不到具体的热点函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240117164651859.png" alt="image-20240117164651859"></p><p><strong>使用 <code>nodejs --prof</code> + <code>flamebearer</code> 排查</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入容器</span>
kubectl <span class="token parameter variable">-n</span> work <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token variable">\${PodName}</span> -- /bin/sh
<span class="token comment"># 修改启动端口, 找到 app.listen 修改，然后再启动一个实例</span>
<span class="token function">node</span> /data/node_modules/.bin/cross-env <span class="token assign-left variable">NODE_ENV</span><span class="token operator">=</span>work <span class="token function">node</span> <span class="token parameter variable">--prof</span> <span class="token parameter variable">--jitless</span> --no-lazy src/main
<span class="token comment"># 运行一段时间，生成火焰图，在浏览器打开</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> flamebearer <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npmmirror.com
<span class="token function">node</span> --prof-process <span class="token parameter variable">--preprocess</span> <span class="token parameter variable">-j</span> isolate*.log <span class="token operator">|</span> flamebearer
<span class="token comment"># 将 flamegraph.html 传输到本地，用浏览器打开，如下</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 <code>strace</code> 排查到的 子进程会执行系统命令，查看可能相关联的函数</p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/image-20240117170124919.png" alt="image-20240117170124919"></p><p>通过 <code>flamebearer</code> 可以定位定最后是 <code>child_process.js</code> 文件中函数的相关调度， execSync --&gt; spawnSync --&gt; normalizeSpawnArguments</p><p>首先再上一层的文件清楚的标记出来是 System.js 调度产生的热点，第一步现将这个调度注释掉，启动观察，发现，应用恢复正常。</p><p><strong>源码分析，单独测试</strong></p><p>查看 nodejs 源码，查询可能造成阻塞耗时的地方，https://github.com/nodejs/node/blob/v14.x/lib/child_process.js#L485</p><p>可以发现这个函数，最可疑的是这个地方</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> env <span class="token operator">=</span> options<span class="token punctuation">.</span>env <span class="token operator">||</span> process<span class="token punctuation">.</span>env<span class="token punctuation">;</span>
  <span class="token keyword">const</span> envPairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
<span class="token comment">// Prototype values are intentionally included.</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> env<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      envPairs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Pod 里面，单独执行这段代码，统计耗时</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> env <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">;</span>
  <span class="token keyword">const</span> envPairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;TestEnv&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> env<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      envPairs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;TestEnv&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：TestEnv: 7.494s</p><p>果然是它✌️</p><p>进一步分析，这里面影响性能的因素有两个</p><ul><li><code>p<wbr>rocess.env</code> Object 的实现，我测试 len 为 2w 的map，耗时才 38ms</li><li>本身在 js 中 for-in 循环的性能就是最差的</li></ul><h3 id="解决办法" tabindex="-1"><a class="header-anchor" href="#解决办法" aria-hidden="true">#</a> 解决办法</h3><p>有以下几种办法可以解决，任选其一即可：</p><ul><li>将 YAML 文件中 enableServiceLinks 置为 false ,禁止向 Pod 自动注入 Service 环境变量</li><li>child_process.execSync 以同步的方式衍生子进程， 会阻塞 Node.js 事件循环，在大多数情况下，同步的方法会对性能产生重大影响，可以使用 child_process.exec 改为异步方法</li><li>child_process.execSync 调用时，指定需要的 env 传进去，不要用默认的系统 env ，https://github.com/nodejs/node/blob/v14.x/lib/child_process.js#L586</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>应用性能问题，放到一遍，在 K8s 层面，有坑需要我们额外注意</p><p>enableServiceLinks 参数 默认为开启状态，但是大多数情况我们是不需要的，笔者建议统一关闭，有 DNS 的情况下，没多大用途，也有相关 issue 提出将 enableServiceLinks 默认值改为 false</p><blockquote><p>如果不需要服务环境变量（因为可能与预期的程序冲突，可能要处理的变量太多，或者仅使用DNS等），则可以通过在 pod spec 上将 enableServiceLinks 标志设置为 false 来禁用此模式。</p></blockquote><p>Nodejs 和 K8s 针对此问题的相关 issue</p><ul><li>https://github.com/nodejs/node/issues/3104</li><li>https://github.com/kubernetes/kubernetes/issues/60099</li><li>https://github.com/kubernetes/kubernetes/issues/121787</li></ul><p>参考链接：</p><p>k8s doc ： https://kubernetes.io/docs/tutorials/services/connect-applications-service/</p><p>倪朋飞 「Linux性能优化实战」</p><p>flamebearer：https://github.com/mapbox/flamebearer</p>`,76),o=[t];function l(c,i){return s(),a("div",null,o)}const k=n(p,[["render",l],["__file","enable-service-links.html.vue"]]);export{k as default};
