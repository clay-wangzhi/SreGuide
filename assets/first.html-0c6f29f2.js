import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as r,c as t,b as e,d as n,e as a,a as o}from"./app-e91902ff.js";const c={},d=e("h1",{id:"_1-2-jenkins简介",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-2-jenkins简介","aria-hidden":"true"},"#"),n(" 1.2 Jenkins简介")],-1),h=e("h2",{id:"简单介绍",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#简单介绍","aria-hidden":"true"},"#"),n(" 简单介绍")],-1),u={href:"https://jenkins.io/",target:"_blank",rel:"noopener noreferrer"},p=o('<p>Jenkins 项目产生两个发行线, 长期支持版本 (LTS) 和每周更新版本， 两个版本都以 .war 文件, 原生包, 安装程序, 和 Docker 容器的形式分发。</p><p>官网：https://jenkins.io/</p><p>代码仓库：https://github.com/jenkinsci/jenkins</p><h2 id="发展历史" tabindex="-1"><a class="header-anchor" href="#发展历史" aria-hidden="true">#</a> 发展历史</h2><ul><li>Jenkins的前身是Hudson，采用JAVA编写的持续集成开源工具。</li><li>Hudson由Sun公司在2004年启动，第一个版本于2005年在java.net发布。</li><li>2007年开始Hudson逐渐取代CruiseControl和其他的开源构建工具的江湖地位。</li><li>在2008年的JavaOne大会上在开发者解决方案中获得杜克选择大奖（Duke’s Choice Award）。</li><li>在2010年11月期间，因为Oracle对Sun的收购带来了Hudson的所有权问题。主要的项目贡献者和Oracle之间， 尽管达成了很多协议，但有个关键问题就是商标名称“Hudson”。</li><li>甲骨文在2010年12月声明拥有该名称并申请商标的权利。因此，2011年1月11日，有人要求投票将项目名称从“Hudson”改为“Jenkins”。</li><li>2011年1月29日，该建议得到社区投票的批准，创建了Jenkins项目。</li><li>2011年2月1日，甲骨文表示，他们打算继续开发Hudson，并认为Jenkins只是一个分支，而不是重命名。因此，Jenkins和Hudson继续作为两个独立的项目，每个都认为对方是自己的分支。</li><li>到2013年12月，GitHub上的Jenkins拥有567个项目成员和约1,100个公共仓库，与此相对的Hudson有32个项目成员和17个公共仓库。到现在两者的差异更多，应该说Jenkins已经全面超越了Hudson。此外，大家可能是出于讨厌Oracle的情绪，作为Java开发者天然地应该支持和使用Jenkins。</li></ul><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h2><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/2399048-91830c936e5fa651.webp" alt="img"></p><p><img src="https://clay-blog.oss-cn-shanghai.aliyuncs.com/img/2399048-0fa91d8b2c207c35.webp" alt="img"></p><ul><li>易于安装，只要把jenkins.war部署到servlet容器，不需要数据库支持</li><li>易于配置，所有配置都是通过其提供的web界面实现</li><li>集成RSS/E-mail通过RSS发布构建结果或当构建完成时通过e-mail通知</li><li>生成JUnit/TestNG测试报告</li><li>分布式构建支持Jenkins能够让多台计算机一起构建/测试</li><li>支持多种扩展插件，你可以开发适合自己团队使用的工具</li><li>支持pipeline流水线，可以用代码描述配置过程，方便使用</li></ul><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h3><ul><li>集成svn/git客户端实现源代码下载检出</li><li>集成maven/ant/gradle/npm等构建工具实现源码编译打包单元测试</li><li>集成sonarqube对源代码进行质量检查（坏味道、复杂度、新增bug等）</li><li>集成SaltStack/Ansible实现自动化部署发布</li><li>集成Jmeter/Soar/Kubernetes/…..</li><li>可以自定义插件或者脚本通过jenkins传参运行</li><li>可以说Jenkins比较灵活插件资源丰富，日常运维工作都可以自动化</li></ul><h2 id="三种构建方式" tabindex="-1"><a class="header-anchor" href="#三种构建方式" aria-hidden="true">#</a> 三种构建方式</h2><ul><li><p>jenkins 触发式构建：用于开发环境部署，开发人员push代码或者合并代码到gitlab项目的master分支，jenkins就部署代码到对应服务器。</p></li><li><p>jenkins 参数化构建：用于测试环境预上线环境部署，开发push代码或者合并代码到gitlab项目的master分支之后，并不会部署代码，而是需要登录到jenkins的web界面，点击构建按钮，传入对应的参数（比如参数需要构建的tag，需要部署的分支）然后才会部署。</p></li><li><p>jenkins 定时构建：用于APP自动打包，定时构建是在参数化构建的基础上添加的，开发人员可以登录jenkins手动传入tag进行打包，如果不手动打包，那么jenkins就每天凌晨从gitlab拉取最新的APP代码打包。</p></li></ul><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>',14),k={href:"http://docs.idevops.site/jenkins/basics/introduction/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.kancloud.cn/willseecloud/jenkins/1860518",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.jianshu.com/p/f1167e8850cd",target:"_blank",rel:"noopener noreferrer"};function f(m,g){const i=l("ExternalLinkIcon");return r(),t("div",null,[d,h,e("p",null,[e("a",u,[n("Jenkins"),a(i)]),n("前身是Hudson，Jenkins是一款开源 CI&CD 软件，基于Java开发，用于自动化各种任务，包括构建、测试和部署软件。 Jenkins 支持各种运行方式，可通过系统包、Docker 或者通过一个独立的 Java 程序。")]),p,e("p",null,[e("a",k,[n("jenkins 简介与应用 | 泽阳"),a(i)])]),e("p",null,[e("a",_,[n("jenkins 简介 | willseecloud | 看云"),a(i)])]),e("p",null,[e("a",b,[n("jenkins pipeline基础语法与示例 | MR_Hanjc"),a(i)])])])}const w=s(c,[["render",f],["__file","first.html.vue"]]);export{w as default};
