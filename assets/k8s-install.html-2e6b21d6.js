import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e as n}from"./app-3644928f.js";const l={},i=n(`<h1 id="简述-k8s-集群搭建步骤" tabindex="-1"><a class="header-anchor" href="#简述-k8s-集群搭建步骤" aria-hidden="true">#</a> 简述 K8s 集群搭建步骤</h1><h3 id="preinstall-安装前准备" tabindex="-1"><a class="header-anchor" href="#preinstall-安装前准备" aria-hidden="true">#</a> preinstall：安装前准备</h3><ul><li>关闭 swap 分区</li><li>更换 yum 源、安装 依赖包</li><li>更新 系统版本 到 centos 7.9、内核版本 到 长期支持版本 kernel-lt 5.4.196</li><li>如果硬件网卡驱动不支持新版本内核，升级 网卡驱动， 针对新内核重新编译</li><li><strong>调节 CPU 性能模式为高性能</strong></li><li>禁用防火墙、SELINUX</li><li>修改内核参数、加载 br_netfilter、ip_conntrack、ipvs 等 modules</li><li>配置时间同步</li><li>重启服务器，使用内核生效</li><li>检查 内核版本</li><li>检查 hostname 是否符合 DNS 规范</li><li>检查 kube_service_addresses 和 kube_pods_subnet 是否为正确的网络段</li><li>检查 kube_service_addresses 和 kube_pods_subnet 的网段是否冲突</li><li>检查时间是否同步</li><li>检查 访问外网的连通性（DNS配置是否正确）</li></ul><h3 id="docker-安装docker" tabindex="-1"><a class="header-anchor" href="#docker-安装docker" aria-hidden="true">#</a> docker：安装Docker</h3><ul><li>更换 yum 下载源</li><li>安装 docker 和相关依赖</li><li>新增配置目录，拷贝配置文件</li><li>启动并加入开机自启</li></ul><h3 id="master-安装-master" tabindex="-1"><a class="header-anchor" href="#master-安装-master" aria-hidden="true">#</a> master: 安装 master</h3><ul><li>更换 yum 下载源</li><li>下载 kubelet、kubeadm、kubectl 等</li><li>下载 kube-apiserver、kube-controller-manager、kube-scheduler、kube-proxy、pause、etcd、coredns 等镜像</li><li>启动 kubelet 服务</li><li>配置 kubeadm-config.yml 初始化配置文件</li><li>使用<code>kubeadm init</code> 进行初始化</li><li>master1 生成 certificate key</li><li>其余master 使用 <code>kubeadm join</code> 加入master集群</li></ul><h3 id="ha-使用-haproxy-keepalived-实现master高可用-负载均衡" tabindex="-1"><a class="header-anchor" href="#ha-使用-haproxy-keepalived-实现master高可用-负载均衡" aria-hidden="true">#</a> ha：使用 <code>haproxy + keepalived</code> 实现master高可用，负载均衡</h3><blockquote><p>先申请vip</p></blockquote><ul><li>安装 keepalived 、 haproxy</li><li>重定向日志文件</li><li>keepalived 新增监控检查脚本</li><li>配置keepalived、haproxy</li><li>启动 keepalived、haproxy ，并配置开机自启</li></ul><h3 id="calico-安装配置-calico-bgp-rr模型" tabindex="-1"><a class="header-anchor" href="#calico-安装配置-calico-bgp-rr模型" aria-hidden="true">#</a> calico：安装配置 Calico BGP RR模型</h3><blockquote><p>提前设置好 LOCAL_AS、AS_NUMBER、PEER_IP，安装好后还需要网络设置一下，BGP做宣告加邻居等</p></blockquote><ul><li>拷贝官方 yaml 文件</li><li>替换 PODSUBNET</li><li>设置 NIC 为 bond4 或 eth0</li><li>apply calico yaml 文件</li><li>安装 并配置 calicoctl 工具</li><li>拷贝 设置 为 BGP RR 模式 的一些列 yaml 文件</li><li>使用 calicoctl apply 上面的yaml文件</li></ul><h3 id="node-安装-node" tabindex="-1"><a class="header-anchor" href="#node-安装-node" aria-hidden="true">#</a> node：安装 node</h3><ul><li>步骤和 master 2，3 安装类似，下镜像，生成凭证，<code>kubeadm join</code></li></ul><h2 id="master-节点缩容" tabindex="-1"><a class="header-anchor" href="#master-节点缩容" aria-hidden="true">#</a> Master 节点缩容</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除 Master 节点</span>
kubectl drain st-kubernetes-master-4 --delete-local-data <span class="token parameter variable">--force</span> --ignore-daemonsets
kubectl delete <span class="token function">node</span> st-kubernetes-master-4
<span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span> etcdctl <span class="token parameter variable">--cacert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CA_CERT}</span>&quot;</span> <span class="token parameter variable">--cert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CERT}</span>&quot;</span> <span class="token parameter variable">--key</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_KEY}</span>&quot;</span> <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${HOST_1}</span>&quot;</span> member list
<span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span> etcdctl <span class="token parameter variable">--cacert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CA_CERT}</span>&quot;</span> <span class="token parameter variable">--cert</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_CERT}</span>&quot;</span> <span class="token parameter variable">--key</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${ETCD_KEY}</span>&quot;</span> <span class="token parameter variable">--endpoints</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${HOST_1}</span>&quot;</span> member remove 60efa3874101e09f
<span class="token comment"># 查看 ep</span>
kubectl get ep kubernetes <span class="token parameter variable">-oyaml</span>
<span class="token comment"># 被删除节点停止 kubelet、docker</span>
systemctl stop kubelet
systemctl stop <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="k8s-集群升级" tabindex="-1"><a class="header-anchor" href="#k8s-集群升级" aria-hidden="true">#</a> K8s 集群升级</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 配yum 源</span>
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> kubelet-1.19.16 kubeadm-1.19.16 kubectl-1.19.16
<span class="token comment"># 下拉镜像</span>
<span class="token comment"># edit node  加 CRI 注解</span>
kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock
<span class="token comment"># 查看升级计划</span>
kubeadm upgrade plan
kubeadm upgrade apply v1.19.16
systemctl daemon-reload
systemctl restart kubelet

<span class="token comment"># 如果 kube-proxy 没升级，看一下卡在哪里了， ds 类型，默认是滚动升级的</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),r=[i];function t(o,c){return a(),s("div",null,r)}const u=e(l,[["render",t],["__file","k8s-install.html.vue"]]);export{u as default};
